{
  "manifestVersion": "3.2",
  "admin": {
    "address": "0xd6baC58A372f1F77F483C62FC674612AA5043Fd2",
    "txHash": "0x1bd45c2820a594a932b73a6f7c5b25ade013daa72324c27c6890f43e1aa90f98"
  },
  "proxies": [
    {
      "address": "0x3Ceb74A902dc5fc11cF6337F68d04cB834AE6A22",
      "txHash": "0xc32c2cd1060bf8f952d434f499e0e7da62655cf54db8489d7d656a89de163335",
      "kind": "transparent"
    },
    {
      "address": "0x017f8C7d1Cb04dE974B8aC1a6B8d3d74bC74E7E1",
      "txHash": "0xf1ff3793c61e8b8002a5c875a68d1137820859badfb2062aab4632f4248bddd0",
      "kind": "transparent"
    },
    {
      "address": "0x4e59AeD3aCbb0cb66AF94E893BEE7df8B414dAB1",
      "txHash": "0xdba62f4be347c511cbeb9dedac1ea10667ef051e1173d7f06abb4c8785bb1c62",
      "kind": "transparent"
    }
  ],
  "impls": {
    "b5d94e6ac10bc44dabb53f5cb7148cb4c7d8a3fdadb127953ac12a1a9eae5a0b": {
      "address": "0x0b84F276Ee85dD856Fb920dE270acF388688aeeA",
      "txHash": "0xa52e00f664162e872ecdd49cd2c15a025bb28b7265b05ddb5345718ba31dc04c",
      "layout": {
        "storage": [
          {
            "label": "_initialized",
            "offset": 0,
            "slot": "0",
            "type": "t_uint8",
            "contract": "Initializable",
            "src": "@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol:62",
            "retypedFrom": "bool"
          },
          {
            "label": "_initializing",
            "offset": 1,
            "slot": "0",
            "type": "t_bool",
            "contract": "Initializable",
            "src": "@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol:67"
          },
          {
            "label": "__gap",
            "offset": 0,
            "slot": "1",
            "type": "t_array(t_uint256)50_storage",
            "contract": "ContextUpgradeable",
            "src": "@openzeppelin/contracts-upgradeable/utils/ContextUpgradeable.sol:36"
          },
          {
            "label": "_paused",
            "offset": 0,
            "slot": "51",
            "type": "t_bool",
            "contract": "PausableUpgradeable",
            "src": "@openzeppelin/contracts-upgradeable/security/PausableUpgradeable.sol:29"
          },
          {
            "label": "__gap",
            "offset": 0,
            "slot": "52",
            "type": "t_array(t_uint256)49_storage",
            "contract": "PausableUpgradeable",
            "src": "@openzeppelin/contracts-upgradeable/security/PausableUpgradeable.sol:102"
          },
          {
            "label": "firstBlock",
            "offset": 0,
            "slot": "101",
            "type": "t_uint256",
            "contract": "EthereumLightClient",
            "src": "contracts/EthereumLightClient.sol:36"
          },
          {
            "label": "canonicalHead",
            "offset": 0,
            "slot": "102",
            "type": "t_uint256",
            "contract": "EthereumLightClient",
            "src": "contracts/EthereumLightClient.sol:39"
          },
          {
            "label": "canonicalBlocks",
            "offset": 0,
            "slot": "103",
            "type": "t_mapping(t_uint256,t_bool)",
            "contract": "EthereumLightClient",
            "src": "contracts/EthereumLightClient.sol:42"
          },
          {
            "label": "blocks",
            "offset": 0,
            "slot": "104",
            "type": "t_mapping(t_uint256,t_struct(StoredBlockHeader)2826_storage)",
            "contract": "EthereumLightClient",
            "src": "contracts/EthereumLightClient.sol:45"
          },
          {
            "label": "blockExisting",
            "offset": 0,
            "slot": "105",
            "type": "t_mapping(t_uint256,t_bool)",
            "contract": "EthereumLightClient",
            "src": "contracts/EthereumLightClient.sol:48"
          },
          {
            "label": "blocksByHeight",
            "offset": 0,
            "slot": "106",
            "type": "t_mapping(t_uint256,t_array(t_uint256)dyn_storage)",
            "contract": "EthereumLightClient",
            "src": "contracts/EthereumLightClient.sol:51"
          },
          {
            "label": "blocksByHeightExisting",
            "offset": 0,
            "slot": "107",
            "type": "t_mapping(t_uint256,t_bool)",
            "contract": "EthereumLightClient",
            "src": "contracts/EthereumLightClient.sol:54"
          },
          {
            "label": "blockHeightMax",
            "offset": 0,
            "slot": "108",
            "type": "t_uint256",
            "contract": "EthereumLightClient",
            "src": "contracts/EthereumLightClient.sol:57"
          },
          {
            "label": "longestBranchHead",
            "offset": 0,
            "slot": "109",
            "type": "t_mapping(t_uint256,t_uint256)",
            "contract": "EthereumLightClient",
            "src": "contracts/EthereumLightClient.sol:65"
          },
          {
            "label": "finalityConfirms",
            "offset": 0,
            "slot": "110",
            "type": "t_uint256",
            "contract": "EthereumLightClient",
            "src": "contracts/EthereumLightClient.sol:69"
          },
          {
            "label": "oldestBlockStored",
            "offset": 0,
            "slot": "111",
            "type": "t_uint256",
            "contract": "EthereumLightClient",
            "src": "contracts/EthereumLightClient.sol:72"
          }
        ],
        "types": {
          "t_array(t_uint256)49_storage": {
            "label": "uint256[49]",
            "numberOfBytes": "1568"
          },
          "t_array(t_uint256)50_storage": {
            "label": "uint256[50]",
            "numberOfBytes": "1600"
          },
          "t_array(t_uint256)dyn_storage": {
            "label": "uint256[]",
            "numberOfBytes": "32"
          },
          "t_bool": {
            "label": "bool",
            "numberOfBytes": "1"
          },
          "t_mapping(t_uint256,t_array(t_uint256)dyn_storage)": {
            "label": "mapping(uint256 => uint256[])",
            "numberOfBytes": "32"
          },
          "t_mapping(t_uint256,t_bool)": {
            "label": "mapping(uint256 => bool)",
            "numberOfBytes": "32"
          },
          "t_mapping(t_uint256,t_struct(StoredBlockHeader)2826_storage)": {
            "label": "mapping(uint256 => struct EthereumLightClient.StoredBlockHeader)",
            "numberOfBytes": "32"
          },
          "t_mapping(t_uint256,t_uint256)": {
            "label": "mapping(uint256 => uint256)",
            "numberOfBytes": "32"
          },
          "t_struct(StoredBlockHeader)2826_storage": {
            "label": "struct EthereumLightClient.StoredBlockHeader",
            "members": [
              {
                "label": "parentHash",
                "type": "t_uint256",
                "offset": 0,
                "slot": "0"
              },
              {
                "label": "stateRoot",
                "type": "t_uint256",
                "offset": 0,
                "slot": "1"
              },
              {
                "label": "transactionsRoot",
                "type": "t_uint256",
                "offset": 0,
                "slot": "2"
              },
              {
                "label": "receiptsRoot",
                "type": "t_uint256",
                "offset": 0,
                "slot": "3"
              },
              {
                "label": "number",
                "type": "t_uint256",
                "offset": 0,
                "slot": "4"
              },
              {
                "label": "difficulty",
                "type": "t_uint256",
                "offset": 0,
                "slot": "5"
              },
              {
                "label": "totalDifficulty",
                "type": "t_uint256",
                "offset": 0,
                "slot": "6"
              },
              {
                "label": "time",
                "type": "t_uint256",
                "offset": 0,
                "slot": "7"
              },
              {
                "label": "hash",
                "type": "t_uint256",
                "offset": 0,
                "slot": "8"
              }
            ],
            "numberOfBytes": "288"
          },
          "t_uint256": {
            "label": "uint256",
            "numberOfBytes": "32"
          },
          "t_uint8": {
            "label": "uint8",
            "numberOfBytes": "1"
          }
        }
      }
    },
    "bd6cbd01bb317ea0912303cc416cb095358e013400c2a462f1de1cea26ccc096": {
      "address": "0x76420bfC35CD4841C5dd3920f3a0f0aC4831208A",
      "txHash": "0x48ba68a8412778039436040151db5c534219d06a1a83c7ceb8eafe2e57bf2f15",
      "layout": {
        "storage": [
          {
            "label": "TxTokens",
            "offset": 0,
            "slot": "0",
            "type": "t_array(t_contract(IERC20Upgradeable)1478)dyn_storage",
            "contract": "TokenRegistry",
            "src": "contracts/TokenRegistry.sol:33"
          },
          {
            "label": "RxTokens",
            "offset": 0,
            "slot": "1",
            "type": "t_array(t_contract(BridgedToken)2788)dyn_storage",
            "contract": "TokenRegistry",
            "src": "contracts/TokenRegistry.sol:34"
          },
          {
            "label": "TxMapped",
            "offset": 0,
            "slot": "2",
            "type": "t_mapping(t_address,t_address)",
            "contract": "TokenRegistry",
            "src": "contracts/TokenRegistry.sol:37"
          },
          {
            "label": "TxMappedInv",
            "offset": 0,
            "slot": "3",
            "type": "t_mapping(t_address,t_contract(IERC20Upgradeable)1478)",
            "contract": "TokenRegistry",
            "src": "contracts/TokenRegistry.sol:38"
          },
          {
            "label": "RxMapped",
            "offset": 0,
            "slot": "4",
            "type": "t_mapping(t_address,t_contract(BridgedToken)2788)",
            "contract": "TokenRegistry",
            "src": "contracts/TokenRegistry.sol:41"
          },
          {
            "label": "RxMappedInv",
            "offset": 0,
            "slot": "5",
            "type": "t_mapping(t_address,t_address)",
            "contract": "TokenRegistry",
            "src": "contracts/TokenRegistry.sol:42"
          },
          {
            "label": "otherSideBridge",
            "offset": 0,
            "slot": "6",
            "type": "t_address",
            "contract": "TokenLocker",
            "src": "contracts/TokenLocker.sol:45"
          },
          {
            "label": "_initialized",
            "offset": 20,
            "slot": "6",
            "type": "t_uint8",
            "contract": "Initializable",
            "src": "@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol:62",
            "retypedFrom": "bool"
          },
          {
            "label": "_initializing",
            "offset": 21,
            "slot": "6",
            "type": "t_bool",
            "contract": "Initializable",
            "src": "@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol:67"
          },
          {
            "label": "__gap",
            "offset": 0,
            "slot": "7",
            "type": "t_array(t_uint256)50_storage",
            "contract": "ContextUpgradeable",
            "src": "@openzeppelin/contracts-upgradeable/utils/ContextUpgradeable.sol:36"
          },
          {
            "label": "_owner",
            "offset": 0,
            "slot": "57",
            "type": "t_address",
            "contract": "OwnableUpgradeable",
            "src": "@openzeppelin/contracts-upgradeable/access/OwnableUpgradeable.sol:22"
          },
          {
            "label": "__gap",
            "offset": 0,
            "slot": "58",
            "type": "t_array(t_uint256)49_storage",
            "contract": "OwnableUpgradeable",
            "src": "@openzeppelin/contracts-upgradeable/access/OwnableUpgradeable.sol:87"
          },
          {
            "label": "lightclient",
            "offset": 0,
            "slot": "107",
            "type": "t_contract(EthereumLightClient)3614",
            "contract": "TokenLockerOnHarmony",
            "src": "contracts/TokenLockerOnHarmony.sol:17"
          },
          {
            "label": "spentReceipt",
            "offset": 0,
            "slot": "108",
            "type": "t_mapping(t_bytes32,t_bool)",
            "contract": "TokenLockerOnHarmony",
            "src": "contracts/TokenLockerOnHarmony.sol:19"
          }
        ],
        "types": {
          "t_address": {
            "label": "address",
            "numberOfBytes": "20"
          },
          "t_array(t_contract(BridgedToken)2788)dyn_storage": {
            "label": "contract BridgedToken[]",
            "numberOfBytes": "32"
          },
          "t_array(t_contract(IERC20Upgradeable)1478)dyn_storage": {
            "label": "contract IERC20Upgradeable[]",
            "numberOfBytes": "32"
          },
          "t_array(t_uint256)49_storage": {
            "label": "uint256[49]",
            "numberOfBytes": "1568"
          },
          "t_array(t_uint256)50_storage": {
            "label": "uint256[50]",
            "numberOfBytes": "1600"
          },
          "t_bool": {
            "label": "bool",
            "numberOfBytes": "1"
          },
          "t_bytes32": {
            "label": "bytes32",
            "numberOfBytes": "32"
          },
          "t_contract(BridgedToken)2788": {
            "label": "contract BridgedToken",
            "numberOfBytes": "20"
          },
          "t_contract(EthereumLightClient)3614": {
            "label": "contract EthereumLightClient",
            "numberOfBytes": "20"
          },
          "t_contract(IERC20Upgradeable)1478": {
            "label": "contract IERC20Upgradeable",
            "numberOfBytes": "20"
          },
          "t_mapping(t_address,t_address)": {
            "label": "mapping(address => address)",
            "numberOfBytes": "32"
          },
          "t_mapping(t_address,t_contract(BridgedToken)2788)": {
            "label": "mapping(address => contract BridgedToken)",
            "numberOfBytes": "32"
          },
          "t_mapping(t_address,t_contract(IERC20Upgradeable)1478)": {
            "label": "mapping(address => contract IERC20Upgradeable)",
            "numberOfBytes": "32"
          },
          "t_mapping(t_bytes32,t_bool)": {
            "label": "mapping(bytes32 => bool)",
            "numberOfBytes": "32"
          },
          "t_uint256": {
            "label": "uint256",
            "numberOfBytes": "32"
          },
          "t_uint8": {
            "label": "uint8",
            "numberOfBytes": "1"
          }
        }
      }
    },
    "08827b0bbaf290a51d7d6b16bf4002e4f6a6b1a784436fac336f8700019a13de": {
      "address": "0x82305ac469bc60D88D66b7259e3789fB8CD54A88",
      "txHash": "0x419c522cda731c3b758febe2789f7b34d2ad10544e239003da7db05f12c7880b",
      "layout": {
        "storage": [
          {
            "label": "_initialized",
            "offset": 0,
            "slot": "0",
            "type": "t_uint8",
            "contract": "Initializable",
            "src": "@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol:62",
            "retypedFrom": "bool"
          },
          {
            "label": "_initializing",
            "offset": 1,
            "slot": "0",
            "type": "t_bool",
            "contract": "Initializable",
            "src": "@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol:67"
          },
          {
            "label": "__gap",
            "offset": 0,
            "slot": "1",
            "type": "t_array(t_uint256)50_storage",
            "contract": "ContextUpgradeable",
            "src": "@openzeppelin/contracts-upgradeable/utils/ContextUpgradeable.sol:36"
          },
          {
            "label": "_balances",
            "offset": 0,
            "slot": "51",
            "type": "t_mapping(t_address,t_uint256)",
            "contract": "ERC20Upgradeable",
            "src": "@openzeppelin/contracts-upgradeable/token/ERC20/ERC20Upgradeable.sol:37"
          },
          {
            "label": "_allowances",
            "offset": 0,
            "slot": "52",
            "type": "t_mapping(t_address,t_mapping(t_address,t_uint256))",
            "contract": "ERC20Upgradeable",
            "src": "@openzeppelin/contracts-upgradeable/token/ERC20/ERC20Upgradeable.sol:39"
          },
          {
            "label": "_totalSupply",
            "offset": 0,
            "slot": "53",
            "type": "t_uint256",
            "contract": "ERC20Upgradeable",
            "src": "@openzeppelin/contracts-upgradeable/token/ERC20/ERC20Upgradeable.sol:41"
          },
          {
            "label": "_name",
            "offset": 0,
            "slot": "54",
            "type": "t_string_storage",
            "contract": "ERC20Upgradeable",
            "src": "@openzeppelin/contracts-upgradeable/token/ERC20/ERC20Upgradeable.sol:43"
          },
          {
            "label": "_symbol",
            "offset": 0,
            "slot": "55",
            "type": "t_string_storage",
            "contract": "ERC20Upgradeable",
            "src": "@openzeppelin/contracts-upgradeable/token/ERC20/ERC20Upgradeable.sol:44"
          },
          {
            "label": "__gap",
            "offset": 0,
            "slot": "56",
            "type": "t_array(t_uint256)45_storage",
            "contract": "ERC20Upgradeable",
            "src": "@openzeppelin/contracts-upgradeable/token/ERC20/ERC20Upgradeable.sol:394"
          },
          {
            "label": "__gap",
            "offset": 0,
            "slot": "101",
            "type": "t_array(t_uint256)50_storage",
            "contract": "ERC20BurnableUpgradeable",
            "src": "@openzeppelin/contracts-upgradeable/token/ERC20/extensions/ERC20BurnableUpgradeable.sol:51"
          },
          {
            "label": "_paused",
            "offset": 0,
            "slot": "151",
            "type": "t_bool",
            "contract": "PausableUpgradeable",
            "src": "@openzeppelin/contracts-upgradeable/security/PausableUpgradeable.sol:29"
          },
          {
            "label": "__gap",
            "offset": 0,
            "slot": "152",
            "type": "t_array(t_uint256)49_storage",
            "contract": "PausableUpgradeable",
            "src": "@openzeppelin/contracts-upgradeable/security/PausableUpgradeable.sol:102"
          },
          {
            "label": "_owner",
            "offset": 0,
            "slot": "201",
            "type": "t_address",
            "contract": "OwnableUpgradeable",
            "src": "@openzeppelin/contracts-upgradeable/access/OwnableUpgradeable.sol:22"
          },
          {
            "label": "__gap",
            "offset": 0,
            "slot": "202",
            "type": "t_array(t_uint256)49_storage",
            "contract": "OwnableUpgradeable",
            "src": "@openzeppelin/contracts-upgradeable/access/OwnableUpgradeable.sol:87"
          }
        ],
        "types": {
          "t_address": {
            "label": "address",
            "numberOfBytes": "20"
          },
          "t_array(t_uint256)45_storage": {
            "label": "uint256[45]",
            "numberOfBytes": "1440"
          },
          "t_array(t_uint256)49_storage": {
            "label": "uint256[49]",
            "numberOfBytes": "1568"
          },
          "t_array(t_uint256)50_storage": {
            "label": "uint256[50]",
            "numberOfBytes": "1600"
          },
          "t_bool": {
            "label": "bool",
            "numberOfBytes": "1"
          },
          "t_mapping(t_address,t_mapping(t_address,t_uint256))": {
            "label": "mapping(address => mapping(address => uint256))",
            "numberOfBytes": "32"
          },
          "t_mapping(t_address,t_uint256)": {
            "label": "mapping(address => uint256)",
            "numberOfBytes": "32"
          },
          "t_string_storage": {
            "label": "string",
            "numberOfBytes": "32"
          },
          "t_uint256": {
            "label": "uint256",
            "numberOfBytes": "32"
          },
          "t_uint8": {
            "label": "uint8",
            "numberOfBytes": "1"
          }
        }
      }
    }
  }
}
