{
  "manifestVersion": "3.2",
  "admin": {
    "address": "0xe7f1725E7734CE288F8367e1Bb143E90bb3F0512",
    "txHash": "0x6ba4d735aaf19aa01ffbd225dc8b34a96ad16b882d338f56b1a27c3037cabb55"
  },
  "proxies": [
    {
      "address": "0x82305ac469bc60D88D66b7259e3789fB8CD54A88",
      "txHash": "0x1f1708be221a01ceecc30ccfe05270ad54eea5609c18b1c301dbde9968db0737",
      "kind": "transparent"
    },
    {
      "address": "0x9fE46736679d2D9a65F0992F2272dE9f3c7fa6e0",
      "txHash": "0x69f839e952371219313fe244cd49286f7ba859a52a042759c64fbf0cfba70399",
      "kind": "transparent"
    },
    {
      "address": "0xDc64a140Aa3E981100a9becA4E685f962f0cF6C9",
      "txHash": "0xa388de3bab6cb11cff43b0ca3f2413b0a09e6fbcb41dfd1b0d94a11515a7270b",
      "kind": "transparent"
    },
    {
      "address": "0x0165878A594ca255338adfa4d48449f69242Eb8F",
      "txHash": "0x82416ca94d28d7a8578d1ca5140d55be9ce66387cb19eec25c2b8b86371805f8",
      "kind": "transparent"
    }
  ],
  "impls": {
    "6f365f1e758e44a9908b7dfd1ed93bdaafe218b6ca0ab1e26c60441d3895042b": {
      "address": "0x017f8C7d1Cb04dE974B8aC1a6B8d3d74bC74E7E1",
      "txHash": "0xc511185c5ec6805f752c234d038d413746a6b5b10e0bfa00cd47b849136cfc12",
      "layout": {
        "storage": [
          {
            "label": "_initialized",
            "offset": 0,
            "slot": "0",
            "type": "t_uint8",
            "contract": "Initializable",
            "src": "@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol:62",
            "retypedFrom": "bool"
          },
          {
            "label": "_initializing",
            "offset": 1,
            "slot": "0",
            "type": "t_bool",
            "contract": "Initializable",
            "src": "@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol:67"
          },
          {
            "label": "__gap",
            "offset": 0,
            "slot": "1",
            "type": "t_array(t_uint256)50_storage",
            "contract": "ContextUpgradeable",
            "src": "@openzeppelin/contracts-upgradeable/utils/ContextUpgradeable.sol:36"
          },
          {
            "label": "_balances",
            "offset": 0,
            "slot": "51",
            "type": "t_mapping(t_address,t_uint256)",
            "contract": "ERC20Upgradeable",
            "src": "@openzeppelin/contracts-upgradeable/token/ERC20/ERC20Upgradeable.sol:37"
          },
          {
            "label": "_allowances",
            "offset": 0,
            "slot": "52",
            "type": "t_mapping(t_address,t_mapping(t_address,t_uint256))",
            "contract": "ERC20Upgradeable",
            "src": "@openzeppelin/contracts-upgradeable/token/ERC20/ERC20Upgradeable.sol:39"
          },
          {
            "label": "_totalSupply",
            "offset": 0,
            "slot": "53",
            "type": "t_uint256",
            "contract": "ERC20Upgradeable",
            "src": "@openzeppelin/contracts-upgradeable/token/ERC20/ERC20Upgradeable.sol:41"
          },
          {
            "label": "_name",
            "offset": 0,
            "slot": "54",
            "type": "t_string_storage",
            "contract": "ERC20Upgradeable",
            "src": "@openzeppelin/contracts-upgradeable/token/ERC20/ERC20Upgradeable.sol:43"
          },
          {
            "label": "_symbol",
            "offset": 0,
            "slot": "55",
            "type": "t_string_storage",
            "contract": "ERC20Upgradeable",
            "src": "@openzeppelin/contracts-upgradeable/token/ERC20/ERC20Upgradeable.sol:44"
          },
          {
            "label": "__gap",
            "offset": 0,
            "slot": "56",
            "type": "t_array(t_uint256)45_storage",
            "contract": "ERC20Upgradeable",
            "src": "@openzeppelin/contracts-upgradeable/token/ERC20/ERC20Upgradeable.sol:394"
          },
          {
            "label": "__gap",
            "offset": 0,
            "slot": "101",
            "type": "t_array(t_uint256)50_storage",
            "contract": "ERC20BurnableUpgradeable",
            "src": "@openzeppelin/contracts-upgradeable/token/ERC20/extensions/ERC20BurnableUpgradeable.sol:51"
          },
          {
            "label": "_paused",
            "offset": 0,
            "slot": "151",
            "type": "t_bool",
            "contract": "PausableUpgradeable",
            "src": "@openzeppelin/contracts-upgradeable/security/PausableUpgradeable.sol:29"
          },
          {
            "label": "__gap",
            "offset": 0,
            "slot": "152",
            "type": "t_array(t_uint256)49_storage",
            "contract": "PausableUpgradeable",
            "src": "@openzeppelin/contracts-upgradeable/security/PausableUpgradeable.sol:102"
          },
          {
            "label": "_owner",
            "offset": 0,
            "slot": "201",
            "type": "t_address",
            "contract": "OwnableUpgradeable",
            "src": "@openzeppelin/contracts-upgradeable/access/OwnableUpgradeable.sol:22"
          },
          {
            "label": "__gap",
            "offset": 0,
            "slot": "202",
            "type": "t_array(t_uint256)49_storage",
            "contract": "OwnableUpgradeable",
            "src": "@openzeppelin/contracts-upgradeable/access/OwnableUpgradeable.sol:87"
          }
        ],
        "types": {
          "t_address": {
            "label": "address",
            "numberOfBytes": "20"
          },
          "t_array(t_uint256)45_storage": {
            "label": "uint256[45]",
            "numberOfBytes": "1440"
          },
          "t_array(t_uint256)49_storage": {
            "label": "uint256[49]",
            "numberOfBytes": "1568"
          },
          "t_array(t_uint256)50_storage": {
            "label": "uint256[50]",
            "numberOfBytes": "1600"
          },
          "t_bool": {
            "label": "bool",
            "numberOfBytes": "1"
          },
          "t_mapping(t_address,t_mapping(t_address,t_uint256))": {
            "label": "mapping(address => mapping(address => uint256))",
            "numberOfBytes": "32"
          },
          "t_mapping(t_address,t_uint256)": {
            "label": "mapping(address => uint256)",
            "numberOfBytes": "32"
          },
          "t_string_storage": {
            "label": "string",
            "numberOfBytes": "32"
          },
          "t_uint256": {
            "label": "uint256",
            "numberOfBytes": "32"
          },
          "t_uint8": {
            "label": "uint8",
            "numberOfBytes": "1"
          }
        }
      }
    },
    "2c5c36016e81ad185a9e6deacb61248bb2f8c104369d2311f76ccafb43f43e47": {
      "address": "0xCf7Ed3AccA5a467e9e704C703E8D87F634fB0Fc9",
      "txHash": "0x78e7d266bdffe992a5e1921c41ddee05c26d98b67d2ca170f6a0dfd4e5a9cbc1",
      "layout": {
        "storage": [
          {
            "label": "TxTokens",
            "offset": 0,
            "slot": "0",
            "type": "t_array(t_contract(IERC20Upgradeable)1478)dyn_storage",
            "contract": "TokenRegistry",
            "src": "contracts/TokenRegistry.sol:33"
          },
          {
            "label": "RxTokens",
            "offset": 0,
            "slot": "1",
            "type": "t_array(t_contract(BridgedToken)2788)dyn_storage",
            "contract": "TokenRegistry",
            "src": "contracts/TokenRegistry.sol:34"
          },
          {
            "label": "TxMapped",
            "offset": 0,
            "slot": "2",
            "type": "t_mapping(t_address,t_address)",
            "contract": "TokenRegistry",
            "src": "contracts/TokenRegistry.sol:37"
          },
          {
            "label": "TxMappedInv",
            "offset": 0,
            "slot": "3",
            "type": "t_mapping(t_address,t_contract(IERC20Upgradeable)1478)",
            "contract": "TokenRegistry",
            "src": "contracts/TokenRegistry.sol:38"
          },
          {
            "label": "RxMapped",
            "offset": 0,
            "slot": "4",
            "type": "t_mapping(t_address,t_contract(BridgedToken)2788)",
            "contract": "TokenRegistry",
            "src": "contracts/TokenRegistry.sol:41"
          },
          {
            "label": "RxMappedInv",
            "offset": 0,
            "slot": "5",
            "type": "t_mapping(t_address,t_address)",
            "contract": "TokenRegistry",
            "src": "contracts/TokenRegistry.sol:42"
          },
          {
            "label": "otherSideBridge",
            "offset": 0,
            "slot": "6",
            "type": "t_address",
            "contract": "TokenLocker",
            "src": "contracts/TokenLocker.sol:45"
          },
          {
            "label": "_initialized",
            "offset": 20,
            "slot": "6",
            "type": "t_uint8",
            "contract": "Initializable",
            "src": "@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol:62",
            "retypedFrom": "bool"
          },
          {
            "label": "_initializing",
            "offset": 21,
            "slot": "6",
            "type": "t_bool",
            "contract": "Initializable",
            "src": "@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol:67"
          },
          {
            "label": "__gap",
            "offset": 0,
            "slot": "7",
            "type": "t_array(t_uint256)50_storage",
            "contract": "ContextUpgradeable",
            "src": "@openzeppelin/contracts-upgradeable/utils/ContextUpgradeable.sol:36"
          },
          {
            "label": "_owner",
            "offset": 0,
            "slot": "57",
            "type": "t_address",
            "contract": "OwnableUpgradeable",
            "src": "@openzeppelin/contracts-upgradeable/access/OwnableUpgradeable.sol:22"
          },
          {
            "label": "__gap",
            "offset": 0,
            "slot": "58",
            "type": "t_array(t_uint256)49_storage",
            "contract": "OwnableUpgradeable",
            "src": "@openzeppelin/contracts-upgradeable/access/OwnableUpgradeable.sol:87"
          },
          {
            "label": "lightclient",
            "offset": 0,
            "slot": "107",
            "type": "t_contract(HarmonyLightClient)5899",
            "contract": "TokenLockerOnEthereum",
            "src": "contracts/TokenLockerOnEthereum.sol:13"
          },
          {
            "label": "spentReceipt",
            "offset": 0,
            "slot": "108",
            "type": "t_mapping(t_bytes32,t_bool)",
            "contract": "TokenLockerOnEthereum",
            "src": "contracts/TokenLockerOnEthereum.sol:15"
          }
        ],
        "types": {
          "t_address": {
            "label": "address",
            "numberOfBytes": "20"
          },
          "t_array(t_contract(BridgedToken)2788)dyn_storage": {
            "label": "contract BridgedToken[]",
            "numberOfBytes": "32"
          },
          "t_array(t_contract(IERC20Upgradeable)1478)dyn_storage": {
            "label": "contract IERC20Upgradeable[]",
            "numberOfBytes": "32"
          },
          "t_array(t_uint256)49_storage": {
            "label": "uint256[49]",
            "numberOfBytes": "1568"
          },
          "t_array(t_uint256)50_storage": {
            "label": "uint256[50]",
            "numberOfBytes": "1600"
          },
          "t_bool": {
            "label": "bool",
            "numberOfBytes": "1"
          },
          "t_bytes32": {
            "label": "bytes32",
            "numberOfBytes": "32"
          },
          "t_contract(BridgedToken)2788": {
            "label": "contract BridgedToken",
            "numberOfBytes": "20"
          },
          "t_contract(HarmonyLightClient)5899": {
            "label": "contract HarmonyLightClient",
            "numberOfBytes": "20"
          },
          "t_contract(IERC20Upgradeable)1478": {
            "label": "contract IERC20Upgradeable",
            "numberOfBytes": "20"
          },
          "t_mapping(t_address,t_address)": {
            "label": "mapping(address => address)",
            "numberOfBytes": "32"
          },
          "t_mapping(t_address,t_contract(BridgedToken)2788)": {
            "label": "mapping(address => contract BridgedToken)",
            "numberOfBytes": "32"
          },
          "t_mapping(t_address,t_contract(IERC20Upgradeable)1478)": {
            "label": "mapping(address => contract IERC20Upgradeable)",
            "numberOfBytes": "32"
          },
          "t_mapping(t_bytes32,t_bool)": {
            "label": "mapping(bytes32 => bool)",
            "numberOfBytes": "32"
          },
          "t_uint256": {
            "label": "uint256",
            "numberOfBytes": "32"
          },
          "t_uint8": {
            "label": "uint8",
            "numberOfBytes": "1"
          }
        }
      }
    },
    "0d994f7237d1a9b318d2e06ad0bf7e62ffeb6851dff2c752a2a75c447226cab0": {
      "address": "0x5FbDB2315678afecb367f032d93F642f64180aa3",
      "txHash": "0x785bcdd7600ba700ace8d29388626faab5a0d175b636409fd5593204639739c1",
      "layout": {
        "storage": [
          {
            "label": "_initialized",
            "offset": 0,
            "slot": "0",
            "type": "t_uint8",
            "contract": "Initializable",
            "src": "@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol:62",
            "retypedFrom": "bool"
          },
          {
            "label": "_initializing",
            "offset": 1,
            "slot": "0",
            "type": "t_bool",
            "contract": "Initializable",
            "src": "@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol:67"
          },
          {
            "label": "__gap",
            "offset": 0,
            "slot": "1",
            "type": "t_array(t_uint256)50_storage",
            "contract": "ContextUpgradeable",
            "src": "@openzeppelin/contracts-upgradeable/utils/ContextUpgradeable.sol:36"
          },
          {
            "label": "_paused",
            "offset": 0,
            "slot": "51",
            "type": "t_bool",
            "contract": "PausableUpgradeable",
            "src": "@openzeppelin/contracts-upgradeable/security/PausableUpgradeable.sol:29"
          },
          {
            "label": "__gap",
            "offset": 0,
            "slot": "52",
            "type": "t_array(t_uint256)49_storage",
            "contract": "PausableUpgradeable",
            "src": "@openzeppelin/contracts-upgradeable/security/PausableUpgradeable.sol:102"
          },
          {
            "label": "firstBlock",
            "offset": 0,
            "slot": "101",
            "type": "t_uint256",
            "contract": "EthereumLightClient",
            "src": "contracts/EthereumLightClient.sol:40"
          },
          {
            "label": "canonicalHead",
            "offset": 0,
            "slot": "102",
            "type": "t_uint256",
            "contract": "EthereumLightClient",
            "src": "contracts/EthereumLightClient.sol:43"
          },
          {
            "label": "canonicalBlocks",
            "offset": 0,
            "slot": "103",
            "type": "t_mapping(t_uint256,t_bool)",
            "contract": "EthereumLightClient",
            "src": "contracts/EthereumLightClient.sol:46"
          },
          {
            "label": "blocks",
            "offset": 0,
            "slot": "104",
            "type": "t_mapping(t_uint256,t_struct(StoredBlockHeader)2882_storage)",
            "contract": "EthereumLightClient",
            "src": "contracts/EthereumLightClient.sol:49"
          },
          {
            "label": "blockExisting",
            "offset": 0,
            "slot": "105",
            "type": "t_mapping(t_uint256,t_bool)",
            "contract": "EthereumLightClient",
            "src": "contracts/EthereumLightClient.sol:52"
          },
          {
            "label": "blocksByHeight",
            "offset": 0,
            "slot": "106",
            "type": "t_mapping(t_uint256,t_array(t_uint256)dyn_storage)",
            "contract": "EthereumLightClient",
            "src": "contracts/EthereumLightClient.sol:55"
          },
          {
            "label": "blocksByHeightExisting",
            "offset": 0,
            "slot": "107",
            "type": "t_mapping(t_uint256,t_bool)",
            "contract": "EthereumLightClient",
            "src": "contracts/EthereumLightClient.sol:58"
          },
          {
            "label": "blockHeightMax",
            "offset": 0,
            "slot": "108",
            "type": "t_uint256",
            "contract": "EthereumLightClient",
            "src": "contracts/EthereumLightClient.sol:61"
          },
          {
            "label": "longestBranchHead",
            "offset": 0,
            "slot": "109",
            "type": "t_mapping(t_uint256,t_uint256)",
            "contract": "EthereumLightClient",
            "src": "contracts/EthereumLightClient.sol:69"
          },
          {
            "label": "finalityConfirms",
            "offset": 0,
            "slot": "110",
            "type": "t_uint256",
            "contract": "EthereumLightClient",
            "src": "contracts/EthereumLightClient.sol:73"
          },
          {
            "label": "oldestBlockStored",
            "offset": 0,
            "slot": "111",
            "type": "t_uint256",
            "contract": "EthereumLightClient",
            "src": "contracts/EthereumLightClient.sol:76"
          }
        ],
        "types": {
          "t_array(t_uint256)49_storage": {
            "label": "uint256[49]",
            "numberOfBytes": "1568"
          },
          "t_array(t_uint256)50_storage": {
            "label": "uint256[50]",
            "numberOfBytes": "1600"
          },
          "t_array(t_uint256)dyn_storage": {
            "label": "uint256[]",
            "numberOfBytes": "32"
          },
          "t_bool": {
            "label": "bool",
            "numberOfBytes": "1"
          },
          "t_mapping(t_uint256,t_array(t_uint256)dyn_storage)": {
            "label": "mapping(uint256 => uint256[])",
            "numberOfBytes": "32"
          },
          "t_mapping(t_uint256,t_bool)": {
            "label": "mapping(uint256 => bool)",
            "numberOfBytes": "32"
          },
          "t_mapping(t_uint256,t_struct(StoredBlockHeader)2882_storage)": {
            "label": "mapping(uint256 => struct EthereumLightClient.StoredBlockHeader)",
            "numberOfBytes": "32"
          },
          "t_mapping(t_uint256,t_uint256)": {
            "label": "mapping(uint256 => uint256)",
            "numberOfBytes": "32"
          },
          "t_struct(StoredBlockHeader)2882_storage": {
            "label": "struct EthereumLightClient.StoredBlockHeader",
            "members": [
              {
                "label": "parentHash",
                "type": "t_uint256",
                "offset": 0,
                "slot": "0"
              },
              {
                "label": "stateRoot",
                "type": "t_uint256",
                "offset": 0,
                "slot": "1"
              },
              {
                "label": "transactionsRoot",
                "type": "t_uint256",
                "offset": 0,
                "slot": "2"
              },
              {
                "label": "receiptsRoot",
                "type": "t_uint256",
                "offset": 0,
                "slot": "3"
              },
              {
                "label": "number",
                "type": "t_uint256",
                "offset": 0,
                "slot": "4"
              },
              {
                "label": "difficulty",
                "type": "t_uint256",
                "offset": 0,
                "slot": "5"
              },
              {
                "label": "totalDifficulty",
                "type": "t_uint256",
                "offset": 0,
                "slot": "6"
              },
              {
                "label": "time",
                "type": "t_uint256",
                "offset": 0,
                "slot": "7"
              },
              {
                "label": "hash",
                "type": "t_uint256",
                "offset": 0,
                "slot": "8"
              }
            ],
            "numberOfBytes": "288"
          },
          "t_uint256": {
            "label": "uint256",
            "numberOfBytes": "32"
          },
          "t_uint8": {
            "label": "uint8",
            "numberOfBytes": "1"
          }
        }
      }
    }
  }
}
