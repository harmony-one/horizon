{
  "address": "0x0b84F276Ee85dD856Fb920dE270acF388688aeeA",
  "abi": [
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "bytes32",
          "name": "stateRoot",
          "type": "bytes32"
        },
        {
          "indexed": false,
          "internalType": "bytes32",
          "name": "transactionsRoot",
          "type": "bytes32"
        },
        {
          "indexed": false,
          "internalType": "bytes32",
          "name": "receiptsRoot",
          "type": "bytes32"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "number",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "epoch",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "shard",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "time",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "bytes32",
          "name": "mmrRoot",
          "type": "bytes32"
        },
        {
          "indexed": false,
          "internalType": "bytes32",
          "name": "hash",
          "type": "bytes32"
        }
      ],
      "name": "CheckPoint",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "uint8",
          "name": "version",
          "type": "uint8"
        }
      ],
      "name": "Initialized",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "address",
          "name": "account",
          "type": "address"
        }
      ],
      "name": "Paused",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "address",
          "name": "relayer",
          "type": "address"
        }
      ],
      "name": "RelayerAdded",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "address",
          "name": "relayer",
          "type": "address"
        }
      ],
      "name": "RelayerRemoved",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "newThreshold",
          "type": "uint256"
        }
      ],
      "name": "RelayerThresholdChanged",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "bytes32",
          "name": "role",
          "type": "bytes32"
        },
        {
          "indexed": true,
          "internalType": "bytes32",
          "name": "previousAdminRole",
          "type": "bytes32"
        },
        {
          "indexed": true,
          "internalType": "bytes32",
          "name": "newAdminRole",
          "type": "bytes32"
        }
      ],
      "name": "RoleAdminChanged",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "bytes32",
          "name": "role",
          "type": "bytes32"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "account",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "sender",
          "type": "address"
        }
      ],
      "name": "RoleGranted",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "bytes32",
          "name": "role",
          "type": "bytes32"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "account",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "sender",
          "type": "address"
        }
      ],
      "name": "RoleRevoked",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "address",
          "name": "account",
          "type": "address"
        }
      ],
      "name": "Unpaused",
      "type": "event"
    },
    {
      "inputs": [],
      "name": "DEFAULT_ADMIN_ROLE",
      "outputs": [
        {
          "internalType": "bytes32",
          "name": "",
          "type": "bytes32"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "RELAYER_ROLE",
      "outputs": [
        {
          "internalType": "bytes32",
          "name": "",
          "type": "bytes32"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "relayerAddress",
          "type": "address"
        }
      ],
      "name": "adminAddRelayer",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "newThreshold",
          "type": "uint256"
        }
      ],
      "name": "adminChangeRelayerThreshold",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "adminPauseLightClient",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "relayerAddress",
          "type": "address"
        }
      ],
      "name": "adminRemoveRelayer",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "adminUnpauseLightClient",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "blockNumber",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "epoch",
          "type": "uint256"
        }
      ],
      "name": "getLatestCheckPoint",
      "outputs": [
        {
          "components": [
            {
              "internalType": "bytes32",
              "name": "parentHash",
              "type": "bytes32"
            },
            {
              "internalType": "bytes32",
              "name": "stateRoot",
              "type": "bytes32"
            },
            {
              "internalType": "bytes32",
              "name": "transactionsRoot",
              "type": "bytes32"
            },
            {
              "internalType": "bytes32",
              "name": "receiptsRoot",
              "type": "bytes32"
            },
            {
              "internalType": "uint256",
              "name": "number",
              "type": "uint256"
            },
            {
              "internalType": "uint256",
              "name": "epoch",
              "type": "uint256"
            },
            {
              "internalType": "uint256",
              "name": "shard",
              "type": "uint256"
            },
            {
              "internalType": "uint256",
              "name": "time",
              "type": "uint256"
            },
            {
              "internalType": "bytes32",
              "name": "mmrRoot",
              "type": "bytes32"
            },
            {
              "internalType": "bytes32",
              "name": "hash",
              "type": "bytes32"
            }
          ],
          "internalType": "struct HarmonyLightClient.BlockHeader",
          "name": "checkPointBlock",
          "type": "tuple"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "bytes32",
          "name": "role",
          "type": "bytes32"
        }
      ],
      "name": "getRoleAdmin",
      "outputs": [
        {
          "internalType": "bytes32",
          "name": "",
          "type": "bytes32"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "bytes32",
          "name": "role",
          "type": "bytes32"
        },
        {
          "internalType": "address",
          "name": "account",
          "type": "address"
        }
      ],
      "name": "grantRole",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "bytes32",
          "name": "role",
          "type": "bytes32"
        },
        {
          "internalType": "address",
          "name": "account",
          "type": "address"
        }
      ],
      "name": "hasRole",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "bytes",
          "name": "firstRlpHeader",
          "type": "bytes"
        },
        {
          "internalType": "address[]",
          "name": "initialRelayers",
          "type": "address[]"
        },
        {
          "internalType": "uint8",
          "name": "initialRelayerThreshold",
          "type": "uint8"
        }
      ],
      "name": "initialize",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "epoch",
          "type": "uint256"
        },
        {
          "internalType": "bytes32",
          "name": "mmrRoot",
          "type": "bytes32"
        }
      ],
      "name": "isValidCheckPoint",
      "outputs": [
        {
          "internalType": "bool",
          "name": "status",
          "type": "bool"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "oldestEpochStored",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "paused",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "newAdmin",
          "type": "address"
        }
      ],
      "name": "renounceAdmin",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "bytes32",
          "name": "role",
          "type": "bytes32"
        },
        {
          "internalType": "address",
          "name": "account",
          "type": "address"
        }
      ],
      "name": "renounceRole",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "bytes32",
          "name": "role",
          "type": "bytes32"
        },
        {
          "internalType": "address",
          "name": "account",
          "type": "address"
        }
      ],
      "name": "revokeRole",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "bytes",
          "name": "rlpHeader",
          "type": "bytes"
        }
      ],
      "name": "submitCheckpoint",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "bytes4",
          "name": "interfaceId",
          "type": "bytes4"
        }
      ],
      "name": "supportsInterface",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    }
  ],
  "transactionHash": "0x88ddcd0e2927bd919b2f49314a037ab19c9bb711479991c8f4264c0878ca5ef7",
  "receipt": {
    "to": null,
    "from": "0x9Cf3000a2f555607Ce330Bf70B0f67c7cBcd3be8",
    "contractAddress": "0x0b84F276Ee85dD856Fb920dE270acF388688aeeA",
    "transactionIndex": 0,
    "gasUsed": "2027734",
    "logsBloom": "0x
    "blockHash": "0xb2544d7569f0cbb8db9fd141559439fa5f87d2e4b1fd35c7bfde56bd8b0f6482",
    "transactionHash": "0x88ddcd0e2927bd919b2f49314a037ab19c9bb711479991c8f4264c0878ca5ef7",
    "logs": [],
    "blockNumber": 2199,
    "cumulativeGasUsed": "2027734",
    "status": 1,
    "byzantium": true
  },
  "args": [],
  "numDeployments": 1,
  "solcInputHash": "86432957dcf7303426f9d8474ed8507d",
  "metadata": "{\"compiler\":{\"version\":\"0.8.9+commit.e5eed63a\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"bytes32\",\"name\":\"stateRoot\",\"type\":\"bytes32\"},{\"indexed\":false,\"internalType\":\"bytes32\",\"name\":\"transactionsRoot\",\"type\":\"bytes32\"},{\"indexed\":false,\"internalType\":\"bytes32\",\"name\":\"receiptsRoot\",\"type\":\"bytes32\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"number\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"epoch\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"shard\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"time\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"bytes32\",\"name\":\"mmrRoot\",\"type\":\"bytes32\"},{\"indexed\":false,\"internalType\":\"bytes32\",\"name\":\"hash\",\"type\":\"bytes32\"}],\"name\":\"CheckPoint\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint8\",\"name\":\"version\",\"type\":\"uint8\"}],\"name\":\"Initialized\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"Paused\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"relayer\",\"type\":\"address\"}],\"name\":\"RelayerAdded\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"relayer\",\"type\":\"address\"}],\"name\":\"RelayerRemoved\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"newThreshold\",\"type\":\"uint256\"}],\"name\":\"RelayerThresholdChanged\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"bytes32\",\"name\":\"role\",\"type\":\"bytes32\"},{\"indexed\":true,\"internalType\":\"bytes32\",\"name\":\"previousAdminRole\",\"type\":\"bytes32\"},{\"indexed\":true,\"internalType\":\"bytes32\",\"name\":\"newAdminRole\",\"type\":\"bytes32\"}],\"name\":\"RoleAdminChanged\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"bytes32\",\"name\":\"role\",\"type\":\"bytes32\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"sender\",\"type\":\"address\"}],\"name\":\"RoleGranted\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"bytes32\",\"name\":\"role\",\"type\":\"bytes32\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"sender\",\"type\":\"address\"}],\"name\":\"RoleRevoked\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"Unpaused\",\"type\":\"event\"},{\"inputs\":[],\"name\":\"DEFAULT_ADMIN_ROLE\",\"outputs\":[{\"internalType\":\"bytes32\",\"name\":\"\",\"type\":\"bytes32\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"RELAYER_ROLE\",\"outputs\":[{\"internalType\":\"bytes32\",\"name\":\"\",\"type\":\"bytes32\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"relayerAddress\",\"type\":\"address\"}],\"name\":\"adminAddRelayer\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"newThreshold\",\"type\":\"uint256\"}],\"name\":\"adminChangeRelayerThreshold\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"adminPauseLightClient\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"relayerAddress\",\"type\":\"address\"}],\"name\":\"adminRemoveRelayer\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"adminUnpauseLightClient\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"blockNumber\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"epoch\",\"type\":\"uint256\"}],\"name\":\"getLatestCheckPoint\",\"outputs\":[{\"components\":[{\"internalType\":\"bytes32\",\"name\":\"parentHash\",\"type\":\"bytes32\"},{\"internalType\":\"bytes32\",\"name\":\"stateRoot\",\"type\":\"bytes32\"},{\"internalType\":\"bytes32\",\"name\":\"transactionsRoot\",\"type\":\"bytes32\"},{\"internalType\":\"bytes32\",\"name\":\"receiptsRoot\",\"type\":\"bytes32\"},{\"internalType\":\"uint256\",\"name\":\"number\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"epoch\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"shard\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"time\",\"type\":\"uint256\"},{\"internalType\":\"bytes32\",\"name\":\"mmrRoot\",\"type\":\"bytes32\"},{\"internalType\":\"bytes32\",\"name\":\"hash\",\"type\":\"bytes32\"}],\"internalType\":\"struct HarmonyLightClient.BlockHeader\",\"name\":\"checkPointBlock\",\"type\":\"tuple\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"role\",\"type\":\"bytes32\"}],\"name\":\"getRoleAdmin\",\"outputs\":[{\"internalType\":\"bytes32\",\"name\":\"\",\"type\":\"bytes32\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"role\",\"type\":\"bytes32\"},{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"grantRole\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"role\",\"type\":\"bytes32\"},{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"hasRole\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes\",\"name\":\"firstRlpHeader\",\"type\":\"bytes\"},{\"internalType\":\"address[]\",\"name\":\"initialRelayers\",\"type\":\"address[]\"},{\"internalType\":\"uint8\",\"name\":\"initialRelayerThreshold\",\"type\":\"uint8\"}],\"name\":\"initialize\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"epoch\",\"type\":\"uint256\"},{\"internalType\":\"bytes32\",\"name\":\"mmrRoot\",\"type\":\"bytes32\"}],\"name\":\"isValidCheckPoint\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"status\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"oldestEpochStored\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"paused\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"newAdmin\",\"type\":\"address\"}],\"name\":\"renounceAdmin\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"role\",\"type\":\"bytes32\"},{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"renounceRole\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"role\",\"type\":\"bytes32\"},{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"revokeRole\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes\",\"name\":\"rlpHeader\",\"type\":\"bytes\"}],\"name\":\"submitCheckpoint\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes4\",\"name\":\"interfaceId\",\"type\":\"bytes4\"}],\"name\":\"supportsInterface\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"}],\"devdoc\":{\"kind\":\"dev\",\"methods\":{\"getRoleAdmin(bytes32)\":{\"details\":\"Returns the admin role that controls `role`. See {grantRole} and {revokeRole}. To change a role's admin, use {_setRoleAdmin}.\"},\"grantRole(bytes32,address)\":{\"details\":\"Grants `role` to `account`. If `account` had not been already granted `role`, emits a {RoleGranted} event. Requirements: - the caller must have ``role``'s admin role.\"},\"hasRole(bytes32,address)\":{\"details\":\"Returns `true` if `account` has been granted `role`.\"},\"paused()\":{\"details\":\"Returns true if the contract is paused, and false otherwise.\"},\"renounceRole(bytes32,address)\":{\"details\":\"Revokes `role` from the calling account. Roles are often managed via {grantRole} and {revokeRole}: this function's purpose is to provide a mechanism for accounts to lose their privileges if they are compromised (such as when a trusted device is misplaced). If the calling account had been revoked `role`, emits a {RoleRevoked} event. Requirements: - the caller must be `account`.\"},\"revokeRole(bytes32,address)\":{\"details\":\"Revokes `role` from `account`. If `account` had been granted `role`, emits a {RoleRevoked} event. Requirements: - the caller must have ``role``'s admin role.\"},\"supportsInterface(bytes4)\":{\"details\":\"See {IERC165-supportsInterface}.\"}},\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{},\"version\":1}},\"settings\":{\"compilationTarget\":{\"contracts/HarmonyLightClient.sol\":\"HarmonyLightClient\"},\"evmVersion\":\"london\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\",\"useLiteralContent\":true},\"optimizer\":{\"enabled\":true,\"runs\":200},\"remappings\":[]},\"sources\":{\"@openzeppelin/contracts-upgradeable/access/AccessControlUpgradeable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.6.0) (access/AccessControl.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"./IAccessControlUpgradeable.sol\\\";\\nimport \\\"../utils/ContextUpgradeable.sol\\\";\\nimport \\\"../utils/StringsUpgradeable.sol\\\";\\nimport \\\"../utils/introspection/ERC165Upgradeable.sol\\\";\\nimport \\\"../proxy/utils/Initializable.sol\\\";\\n\\n/**\\n * @dev Contract module that allows children to implement role-based access\\n * control mechanisms. This is a lightweight version that doesn't allow enumerating role\\n * members except through off-chain means by accessing the contract event logs. Some\\n * applications may benefit from on-chain enumerability, for those cases see\\n * {AccessControlEnumerable}.\\n *\\n * Roles are referred to by their `bytes32` identifier. These should be exposed\\n * in the external API and be unique. The best way to achieve this is by\\n * using `public constant` hash digests:\\n *\\n * ```\\n * bytes32 public constant MY_ROLE = keccak256(\\\"MY_ROLE\\\");\\n * ```\\n *\\n * Roles can be used to represent a set of permissions. To restrict access to a\\n * function call, use {hasRole}:\\n *\\n * ```\\n * function foo() public {\\n *     require(hasRole(MY_ROLE, msg.sender));\\n *     ...\\n * }\\n * ```\\n *\\n * Roles can be granted and revoked dynamically via the {grantRole} and\\n * {revokeRole} functions. Each role has an associated admin role, and only\\n * accounts that have a role's admin role can call {grantRole} and {revokeRole}.\\n *\\n * By default, the admin role for all roles is `DEFAULT_ADMIN_ROLE`, which means\\n * that only accounts with this role will be able to grant or revoke other\\n * roles. More complex role relationships can be created by using\\n * {_setRoleAdmin}.\\n *\\n * WARNING: The `DEFAULT_ADMIN_ROLE` is also its own admin: it has permission to\\n * grant and revoke this role. Extra precautions should be taken to secure\\n * accounts that have been granted it.\\n */\\nabstract contract AccessControlUpgradeable is Initializable, ContextUpgradeable, IAccessControlUpgradeable, ERC165Upgradeable {\\n    function __AccessControl_init() internal onlyInitializing {\\n    }\\n\\n    function __AccessControl_init_unchained() internal onlyInitializing {\\n    }\\n    struct RoleData {\\n        mapping(address => bool) members;\\n        bytes32 adminRole;\\n    }\\n\\n    mapping(bytes32 => RoleData) private _roles;\\n\\n    bytes32 public constant DEFAULT_ADMIN_ROLE = 0x00;\\n\\n    /**\\n     * @dev Modifier that checks that an account has a specific role. Reverts\\n     * with a standardized message including the required role.\\n     *\\n     * The format of the revert reason is given by the following regular expression:\\n     *\\n     *  /^AccessControl: account (0x[0-9a-f]{40}) is missing role (0x[0-9a-f]{64})$/\\n     *\\n     * _Available since v4.1._\\n     */\\n    modifier onlyRole(bytes32 role) {\\n        _checkRole(role);\\n        _;\\n    }\\n\\n    /**\\n     * @dev See {IERC165-supportsInterface}.\\n     */\\n    function supportsInterface(bytes4 interfaceId) public view virtual override returns (bool) {\\n        return interfaceId == type(IAccessControlUpgradeable).interfaceId || super.supportsInterface(interfaceId);\\n    }\\n\\n    /**\\n     * @dev Returns `true` if `account` has been granted `role`.\\n     */\\n    function hasRole(bytes32 role, address account) public view virtual override returns (bool) {\\n        return _roles[role].members[account];\\n    }\\n\\n    /**\\n     * @dev Revert with a standard message if `_msgSender()` is missing `role`.\\n     * Overriding this function changes the behavior of the {onlyRole} modifier.\\n     *\\n     * Format of the revert message is described in {_checkRole}.\\n     *\\n     * _Available since v4.6._\\n     */\\n    function _checkRole(bytes32 role) internal view virtual {\\n        _checkRole(role, _msgSender());\\n    }\\n\\n    /**\\n     * @dev Revert with a standard message if `account` is missing `role`.\\n     *\\n     * The format of the revert reason is given by the following regular expression:\\n     *\\n     *  /^AccessControl: account (0x[0-9a-f]{40}) is missing role (0x[0-9a-f]{64})$/\\n     */\\n    function _checkRole(bytes32 role, address account) internal view virtual {\\n        if (!hasRole(role, account)) {\\n            revert(\\n                string(\\n                    abi.encodePacked(\\n                        \\\"AccessControl: account \\\",\\n                        StringsUpgradeable.toHexString(uint160(account), 20),\\n                        \\\" is missing role \\\",\\n                        StringsUpgradeable.toHexString(uint256(role), 32)\\n                    )\\n                )\\n            );\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the admin role that controls `role`. See {grantRole} and\\n     * {revokeRole}.\\n     *\\n     * To change a role's admin, use {_setRoleAdmin}.\\n     */\\n    function getRoleAdmin(bytes32 role) public view virtual override returns (bytes32) {\\n        return _roles[role].adminRole;\\n    }\\n\\n    /**\\n     * @dev Grants `role` to `account`.\\n     *\\n     * If `account` had not been already granted `role`, emits a {RoleGranted}\\n     * event.\\n     *\\n     * Requirements:\\n     *\\n     * - the caller must have ``role``'s admin role.\\n     */\\n    function grantRole(bytes32 role, address account) public virtual override onlyRole(getRoleAdmin(role)) {\\n        _grantRole(role, account);\\n    }\\n\\n    /**\\n     * @dev Revokes `role` from `account`.\\n     *\\n     * If `account` had been granted `role`, emits a {RoleRevoked} event.\\n     *\\n     * Requirements:\\n     *\\n     * - the caller must have ``role``'s admin role.\\n     */\\n    function revokeRole(bytes32 role, address account) public virtual override onlyRole(getRoleAdmin(role)) {\\n        _revokeRole(role, account);\\n    }\\n\\n    /**\\n     * @dev Revokes `role` from the calling account.\\n     *\\n     * Roles are often managed via {grantRole} and {revokeRole}: this function's\\n     * purpose is to provide a mechanism for accounts to lose their privileges\\n     * if they are compromised (such as when a trusted device is misplaced).\\n     *\\n     * If the calling account had been revoked `role`, emits a {RoleRevoked}\\n     * event.\\n     *\\n     * Requirements:\\n     *\\n     * - the caller must be `account`.\\n     */\\n    function renounceRole(bytes32 role, address account) public virtual override {\\n        require(account == _msgSender(), \\\"AccessControl: can only renounce roles for self\\\");\\n\\n        _revokeRole(role, account);\\n    }\\n\\n    /**\\n     * @dev Grants `role` to `account`.\\n     *\\n     * If `account` had not been already granted `role`, emits a {RoleGranted}\\n     * event. Note that unlike {grantRole}, this function doesn't perform any\\n     * checks on the calling account.\\n     *\\n     * [WARNING]\\n     * ====\\n     * This function should only be called from the constructor when setting\\n     * up the initial roles for the system.\\n     *\\n     * Using this function in any other way is effectively circumventing the admin\\n     * system imposed by {AccessControl}.\\n     * ====\\n     *\\n     * NOTE: This function is deprecated in favor of {_grantRole}.\\n     */\\n    function _setupRole(bytes32 role, address account) internal virtual {\\n        _grantRole(role, account);\\n    }\\n\\n    /**\\n     * @dev Sets `adminRole` as ``role``'s admin role.\\n     *\\n     * Emits a {RoleAdminChanged} event.\\n     */\\n    function _setRoleAdmin(bytes32 role, bytes32 adminRole) internal virtual {\\n        bytes32 previousAdminRole = getRoleAdmin(role);\\n        _roles[role].adminRole = adminRole;\\n        emit RoleAdminChanged(role, previousAdminRole, adminRole);\\n    }\\n\\n    /**\\n     * @dev Grants `role` to `account`.\\n     *\\n     * Internal function without access restriction.\\n     */\\n    function _grantRole(bytes32 role, address account) internal virtual {\\n        if (!hasRole(role, account)) {\\n            _roles[role].members[account] = true;\\n            emit RoleGranted(role, account, _msgSender());\\n        }\\n    }\\n\\n    /**\\n     * @dev Revokes `role` from `account`.\\n     *\\n     * Internal function without access restriction.\\n     */\\n    function _revokeRole(bytes32 role, address account) internal virtual {\\n        if (hasRole(role, account)) {\\n            _roles[role].members[account] = false;\\n            emit RoleRevoked(role, account, _msgSender());\\n        }\\n    }\\n\\n    /**\\n     * @dev This empty reserved space is put in place to allow future versions to add new\\n     * variables without shifting down storage in the inheritance chain.\\n     * See https://docs.openzeppelin.com/contracts/4.x/upgradeable#storage_gaps\\n     */\\n    uint256[49] private __gap;\\n}\\n\",\"keccak256\":\"0x5addc7dca2366b164c9befa35da22e9081c44bf6c4c8dce4269be43516f8916e\",\"license\":\"MIT\"},\"@openzeppelin/contracts-upgradeable/access/IAccessControlUpgradeable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (access/IAccessControl.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev External interface of AccessControl declared to support ERC165 detection.\\n */\\ninterface IAccessControlUpgradeable {\\n    /**\\n     * @dev Emitted when `newAdminRole` is set as ``role``'s admin role, replacing `previousAdminRole`\\n     *\\n     * `DEFAULT_ADMIN_ROLE` is the starting admin for all roles, despite\\n     * {RoleAdminChanged} not being emitted signaling this.\\n     *\\n     * _Available since v3.1._\\n     */\\n    event RoleAdminChanged(bytes32 indexed role, bytes32 indexed previousAdminRole, bytes32 indexed newAdminRole);\\n\\n    /**\\n     * @dev Emitted when `account` is granted `role`.\\n     *\\n     * `sender` is the account that originated the contract call, an admin role\\n     * bearer except when using {AccessControl-_setupRole}.\\n     */\\n    event RoleGranted(bytes32 indexed role, address indexed account, address indexed sender);\\n\\n    /**\\n     * @dev Emitted when `account` is revoked `role`.\\n     *\\n     * `sender` is the account that originated the contract call:\\n     *   - if using `revokeRole`, it is the admin role bearer\\n     *   - if using `renounceRole`, it is the role bearer (i.e. `account`)\\n     */\\n    event RoleRevoked(bytes32 indexed role, address indexed account, address indexed sender);\\n\\n    /**\\n     * @dev Returns `true` if `account` has been granted `role`.\\n     */\\n    function hasRole(bytes32 role, address account) external view returns (bool);\\n\\n    /**\\n     * @dev Returns the admin role that controls `role`. See {grantRole} and\\n     * {revokeRole}.\\n     *\\n     * To change a role's admin, use {AccessControl-_setRoleAdmin}.\\n     */\\n    function getRoleAdmin(bytes32 role) external view returns (bytes32);\\n\\n    /**\\n     * @dev Grants `role` to `account`.\\n     *\\n     * If `account` had not been already granted `role`, emits a {RoleGranted}\\n     * event.\\n     *\\n     * Requirements:\\n     *\\n     * - the caller must have ``role``'s admin role.\\n     */\\n    function grantRole(bytes32 role, address account) external;\\n\\n    /**\\n     * @dev Revokes `role` from `account`.\\n     *\\n     * If `account` had been granted `role`, emits a {RoleRevoked} event.\\n     *\\n     * Requirements:\\n     *\\n     * - the caller must have ``role``'s admin role.\\n     */\\n    function revokeRole(bytes32 role, address account) external;\\n\\n    /**\\n     * @dev Revokes `role` from the calling account.\\n     *\\n     * Roles are often managed via {grantRole} and {revokeRole}: this function's\\n     * purpose is to provide a mechanism for accounts to lose their privileges\\n     * if they are compromised (such as when a trusted device is misplaced).\\n     *\\n     * If the calling account had been granted `role`, emits a {RoleRevoked}\\n     * event.\\n     *\\n     * Requirements:\\n     *\\n     * - the caller must be `account`.\\n     */\\n    function renounceRole(bytes32 role, address account) external;\\n}\\n\",\"keccak256\":\"0xb8f5302f12138c5561362e88a78d061573e6298b7a1a5afe84a1e2c8d4d5aeaa\",\"license\":\"MIT\"},\"@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.6.0) (proxy/utils/Initializable.sol)\\n\\npragma solidity ^0.8.2;\\n\\nimport \\\"../../utils/AddressUpgradeable.sol\\\";\\n\\n/**\\n * @dev This is a base contract to aid in writing upgradeable contracts, or any kind of contract that will be deployed\\n * behind a proxy. Since proxied contracts do not make use of a constructor, it's common to move constructor logic to an\\n * external initializer function, usually called `initialize`. It then becomes necessary to protect this initializer\\n * function so it can only be called once. The {initializer} modifier provided by this contract will have this effect.\\n *\\n * The initialization functions use a version number. Once a version number is used, it is consumed and cannot be\\n * reused. This mechanism prevents re-execution of each \\\"step\\\" but allows the creation of new initialization steps in\\n * case an upgrade adds a module that needs to be initialized.\\n *\\n * For example:\\n *\\n * [.hljs-theme-light.nopadding]\\n * ```\\n * contract MyToken is ERC20Upgradeable {\\n *     function initialize() initializer public {\\n *         __ERC20_init(\\\"MyToken\\\", \\\"MTK\\\");\\n *     }\\n * }\\n * contract MyTokenV2 is MyToken, ERC20PermitUpgradeable {\\n *     function initializeV2() reinitializer(2) public {\\n *         __ERC20Permit_init(\\\"MyToken\\\");\\n *     }\\n * }\\n * ```\\n *\\n * TIP: To avoid leaving the proxy in an uninitialized state, the initializer function should be called as early as\\n * possible by providing the encoded function call as the `_data` argument to {ERC1967Proxy-constructor}.\\n *\\n * CAUTION: When used with inheritance, manual care must be taken to not invoke a parent initializer twice, or to ensure\\n * that all initializers are idempotent. This is not verified automatically as constructors are by Solidity.\\n *\\n * [CAUTION]\\n * ====\\n * Avoid leaving a contract uninitialized.\\n *\\n * An uninitialized contract can be taken over by an attacker. This applies to both a proxy and its implementation\\n * contract, which may impact the proxy. To prevent the implementation contract from being used, you should invoke\\n * the {_disableInitializers} function in the constructor to automatically lock it when it is deployed:\\n *\\n * [.hljs-theme-light.nopadding]\\n * ```\\n * /// @custom:oz-upgrades-unsafe-allow constructor\\n * constructor() {\\n *     _disableInitializers();\\n * }\\n * ```\\n * ====\\n */\\nabstract contract Initializable {\\n    /**\\n     * @dev Indicates that the contract has been initialized.\\n     * @custom:oz-retyped-from bool\\n     */\\n    uint8 private _initialized;\\n\\n    /**\\n     * @dev Indicates that the contract is in the process of being initialized.\\n     */\\n    bool private _initializing;\\n\\n    /**\\n     * @dev Triggered when the contract has been initialized or reinitialized.\\n     */\\n    event Initialized(uint8 version);\\n\\n    /**\\n     * @dev A modifier that defines a protected initializer function that can be invoked at most once. In its scope,\\n     * `onlyInitializing` functions can be used to initialize parent contracts. Equivalent to `reinitializer(1)`.\\n     */\\n    modifier initializer() {\\n        bool isTopLevelCall = _setInitializedVersion(1);\\n        if (isTopLevelCall) {\\n            _initializing = true;\\n        }\\n        _;\\n        if (isTopLevelCall) {\\n            _initializing = false;\\n            emit Initialized(1);\\n        }\\n    }\\n\\n    /**\\n     * @dev A modifier that defines a protected reinitializer function that can be invoked at most once, and only if the\\n     * contract hasn't been initialized to a greater version before. In its scope, `onlyInitializing` functions can be\\n     * used to initialize parent contracts.\\n     *\\n     * `initializer` is equivalent to `reinitializer(1)`, so a reinitializer may be used after the original\\n     * initialization step. This is essential to configure modules that are added through upgrades and that require\\n     * initialization.\\n     *\\n     * Note that versions can jump in increments greater than 1; this implies that if multiple reinitializers coexist in\\n     * a contract, executing them in the right order is up to the developer or operator.\\n     */\\n    modifier reinitializer(uint8 version) {\\n        bool isTopLevelCall = _setInitializedVersion(version);\\n        if (isTopLevelCall) {\\n            _initializing = true;\\n        }\\n        _;\\n        if (isTopLevelCall) {\\n            _initializing = false;\\n            emit Initialized(version);\\n        }\\n    }\\n\\n    /**\\n     * @dev Modifier to protect an initialization function so that it can only be invoked by functions with the\\n     * {initializer} and {reinitializer} modifiers, directly or indirectly.\\n     */\\n    modifier onlyInitializing() {\\n        require(_initializing, \\\"Initializable: contract is not initializing\\\");\\n        _;\\n    }\\n\\n    /**\\n     * @dev Locks the contract, preventing any future reinitialization. This cannot be part of an initializer call.\\n     * Calling this in the constructor of a contract will prevent that contract from being initialized or reinitialized\\n     * to any version. It is recommended to use this to lock implementation contracts that are designed to be called\\n     * through proxies.\\n     */\\n    function _disableInitializers() internal virtual {\\n        _setInitializedVersion(type(uint8).max);\\n    }\\n\\n    function _setInitializedVersion(uint8 version) private returns (bool) {\\n        // If the contract is initializing we ignore whether _initialized is set in order to support multiple\\n        // inheritance patterns, but we only do this in the context of a constructor, and for the lowest level\\n        // of initializers, because in other contexts the contract may have been reentered.\\n        if (_initializing) {\\n            require(\\n                version == 1 && !AddressUpgradeable.isContract(address(this)),\\n                \\\"Initializable: contract is already initialized\\\"\\n            );\\n            return false;\\n        } else {\\n            require(_initialized < version, \\\"Initializable: contract is already initialized\\\");\\n            _initialized = version;\\n            return true;\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0x7454006cccb737612b00104d2f606d728e2818b778e7e55542f063c614ce46ba\",\"license\":\"MIT\"},\"@openzeppelin/contracts-upgradeable/security/PausableUpgradeable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (security/Pausable.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../utils/ContextUpgradeable.sol\\\";\\nimport \\\"../proxy/utils/Initializable.sol\\\";\\n\\n/**\\n * @dev Contract module which allows children to implement an emergency stop\\n * mechanism that can be triggered by an authorized account.\\n *\\n * This module is used through inheritance. It will make available the\\n * modifiers `whenNotPaused` and `whenPaused`, which can be applied to\\n * the functions of your contract. Note that they will not be pausable by\\n * simply including this module, only once the modifiers are put in place.\\n */\\nabstract contract PausableUpgradeable is Initializable, ContextUpgradeable {\\n    /**\\n     * @dev Emitted when the pause is triggered by `account`.\\n     */\\n    event Paused(address account);\\n\\n    /**\\n     * @dev Emitted when the pause is lifted by `account`.\\n     */\\n    event Unpaused(address account);\\n\\n    bool private _paused;\\n\\n    /**\\n     * @dev Initializes the contract in unpaused state.\\n     */\\n    function __Pausable_init() internal onlyInitializing {\\n        __Pausable_init_unchained();\\n    }\\n\\n    function __Pausable_init_unchained() internal onlyInitializing {\\n        _paused = false;\\n    }\\n\\n    /**\\n     * @dev Returns true if the contract is paused, and false otherwise.\\n     */\\n    function paused() public view virtual returns (bool) {\\n        return _paused;\\n    }\\n\\n    /**\\n     * @dev Modifier to make a function callable only when the contract is not paused.\\n     *\\n     * Requirements:\\n     *\\n     * - The contract must not be paused.\\n     */\\n    modifier whenNotPaused() {\\n        require(!paused(), \\\"Pausable: paused\\\");\\n        _;\\n    }\\n\\n    /**\\n     * @dev Modifier to make a function callable only when the contract is paused.\\n     *\\n     * Requirements:\\n     *\\n     * - The contract must be paused.\\n     */\\n    modifier whenPaused() {\\n        require(paused(), \\\"Pausable: not paused\\\");\\n        _;\\n    }\\n\\n    /**\\n     * @dev Triggers stopped state.\\n     *\\n     * Requirements:\\n     *\\n     * - The contract must not be paused.\\n     */\\n    function _pause() internal virtual whenNotPaused {\\n        _paused = true;\\n        emit Paused(_msgSender());\\n    }\\n\\n    /**\\n     * @dev Returns to normal state.\\n     *\\n     * Requirements:\\n     *\\n     * - The contract must be paused.\\n     */\\n    function _unpause() internal virtual whenPaused {\\n        _paused = false;\\n        emit Unpaused(_msgSender());\\n    }\\n\\n    /**\\n     * @dev This empty reserved space is put in place to allow future versions to add new\\n     * variables without shifting down storage in the inheritance chain.\\n     * See https://docs.openzeppelin.com/contracts/4.x/upgradeable#storage_gaps\\n     */\\n    uint256[49] private __gap;\\n}\\n\",\"keccak256\":\"0x041af89e5e60b74e1203d5a34614c9de379726f52ecb8cf064cab78b9fdcdf9d\",\"license\":\"MIT\"},\"@openzeppelin/contracts-upgradeable/utils/AddressUpgradeable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.5.0) (utils/Address.sol)\\n\\npragma solidity ^0.8.1;\\n\\n/**\\n * @dev Collection of functions related to the address type\\n */\\nlibrary AddressUpgradeable {\\n    /**\\n     * @dev Returns true if `account` is a contract.\\n     *\\n     * [IMPORTANT]\\n     * ====\\n     * It is unsafe to assume that an address for which this function returns\\n     * false is an externally-owned account (EOA) and not a contract.\\n     *\\n     * Among others, `isContract` will return false for the following\\n     * types of addresses:\\n     *\\n     *  - an externally-owned account\\n     *  - a contract in construction\\n     *  - an address where a contract will be created\\n     *  - an address where a contract lived, but was destroyed\\n     * ====\\n     *\\n     * [IMPORTANT]\\n     * ====\\n     * You shouldn't rely on `isContract` to protect against flash loan attacks!\\n     *\\n     * Preventing calls from contracts is highly discouraged. It breaks composability, breaks support for smart wallets\\n     * like Gnosis Safe, and does not provide security since it can be circumvented by calling from a contract\\n     * constructor.\\n     * ====\\n     */\\n    function isContract(address account) internal view returns (bool) {\\n        // This method relies on extcodesize/address.code.length, which returns 0\\n        // for contracts in construction, since the code is only stored at the end\\n        // of the constructor execution.\\n\\n        return account.code.length > 0;\\n    }\\n\\n    /**\\n     * @dev Replacement for Solidity's `transfer`: sends `amount` wei to\\n     * `recipient`, forwarding all available gas and reverting on errors.\\n     *\\n     * https://eips.ethereum.org/EIPS/eip-1884[EIP1884] increases the gas cost\\n     * of certain opcodes, possibly making contracts go over the 2300 gas limit\\n     * imposed by `transfer`, making them unable to receive funds via\\n     * `transfer`. {sendValue} removes this limitation.\\n     *\\n     * https://diligence.consensys.net/posts/2019/09/stop-using-soliditys-transfer-now/[Learn more].\\n     *\\n     * IMPORTANT: because control is transferred to `recipient`, care must be\\n     * taken to not create reentrancy vulnerabilities. Consider using\\n     * {ReentrancyGuard} or the\\n     * https://solidity.readthedocs.io/en/v0.5.11/security-considerations.html#use-the-checks-effects-interactions-pattern[checks-effects-interactions pattern].\\n     */\\n    function sendValue(address payable recipient, uint256 amount) internal {\\n        require(address(this).balance >= amount, \\\"Address: insufficient balance\\\");\\n\\n        (bool success, ) = recipient.call{value: amount}(\\\"\\\");\\n        require(success, \\\"Address: unable to send value, recipient may have reverted\\\");\\n    }\\n\\n    /**\\n     * @dev Performs a Solidity function call using a low level `call`. A\\n     * plain `call` is an unsafe replacement for a function call: use this\\n     * function instead.\\n     *\\n     * If `target` reverts with a revert reason, it is bubbled up by this\\n     * function (like regular Solidity function calls).\\n     *\\n     * Returns the raw returned data. To convert to the expected return value,\\n     * use https://solidity.readthedocs.io/en/latest/units-and-global-variables.html?highlight=abi.decode#abi-encoding-and-decoding-functions[`abi.decode`].\\n     *\\n     * Requirements:\\n     *\\n     * - `target` must be a contract.\\n     * - calling `target` with `data` must not revert.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCall(address target, bytes memory data) internal returns (bytes memory) {\\n        return functionCall(target, data, \\\"Address: low-level call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`], but with\\n     * `errorMessage` as a fallback revert reason when `target` reverts.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, 0, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but also transferring `value` wei to `target`.\\n     *\\n     * Requirements:\\n     *\\n     * - the calling contract must have an ETH balance of at least `value`.\\n     * - the called Solidity function must be `payable`.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCallWithValue(\\n        address target,\\n        bytes memory data,\\n        uint256 value\\n    ) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, value, \\\"Address: low-level call with value failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCallWithValue-address-bytes-uint256-}[`functionCallWithValue`], but\\n     * with `errorMessage` as a fallback revert reason when `target` reverts.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCallWithValue(\\n        address target,\\n        bytes memory data,\\n        uint256 value,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        require(address(this).balance >= value, \\\"Address: insufficient balance for call\\\");\\n        require(isContract(target), \\\"Address: call to non-contract\\\");\\n\\n        (bool success, bytes memory returndata) = target.call{value: value}(data);\\n        return verifyCallResult(success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but performing a static call.\\n     *\\n     * _Available since v3.3._\\n     */\\n    function functionStaticCall(address target, bytes memory data) internal view returns (bytes memory) {\\n        return functionStaticCall(target, data, \\\"Address: low-level static call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\\n     * but performing a static call.\\n     *\\n     * _Available since v3.3._\\n     */\\n    function functionStaticCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal view returns (bytes memory) {\\n        require(isContract(target), \\\"Address: static call to non-contract\\\");\\n\\n        (bool success, bytes memory returndata) = target.staticcall(data);\\n        return verifyCallResult(success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Tool to verifies that a low level call was successful, and revert if it wasn't, either by bubbling the\\n     * revert reason using the provided one.\\n     *\\n     * _Available since v4.3._\\n     */\\n    function verifyCallResult(\\n        bool success,\\n        bytes memory returndata,\\n        string memory errorMessage\\n    ) internal pure returns (bytes memory) {\\n        if (success) {\\n            return returndata;\\n        } else {\\n            // Look for revert reason and bubble it up if present\\n            if (returndata.length > 0) {\\n                // The easiest way to bubble the revert reason is using memory via assembly\\n\\n                assembly {\\n                    let returndata_size := mload(returndata)\\n                    revert(add(32, returndata), returndata_size)\\n                }\\n            } else {\\n                revert(errorMessage);\\n            }\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0x55cf2bd9fc76704ddcdc19834cd288b7de00fc0f298a40ea16a954ae8991db2d\",\"license\":\"MIT\"},\"@openzeppelin/contracts-upgradeable/utils/ContextUpgradeable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (utils/Context.sol)\\n\\npragma solidity ^0.8.0;\\nimport \\\"../proxy/utils/Initializable.sol\\\";\\n\\n/**\\n * @dev Provides information about the current execution context, including the\\n * sender of the transaction and its data. While these are generally available\\n * via msg.sender and msg.data, they should not be accessed in such a direct\\n * manner, since when dealing with meta-transactions the account sending and\\n * paying for execution may not be the actual sender (as far as an application\\n * is concerned).\\n *\\n * This contract is only required for intermediate, library-like contracts.\\n */\\nabstract contract ContextUpgradeable is Initializable {\\n    function __Context_init() internal onlyInitializing {\\n    }\\n\\n    function __Context_init_unchained() internal onlyInitializing {\\n    }\\n    function _msgSender() internal view virtual returns (address) {\\n        return msg.sender;\\n    }\\n\\n    function _msgData() internal view virtual returns (bytes calldata) {\\n        return msg.data;\\n    }\\n\\n    /**\\n     * @dev This empty reserved space is put in place to allow future versions to add new\\n     * variables without shifting down storage in the inheritance chain.\\n     * See https://docs.openzeppelin.com/contracts/4.x/upgradeable#storage_gaps\\n     */\\n    uint256[50] private __gap;\\n}\\n\",\"keccak256\":\"0x963ea7f0b48b032eef72fe3a7582edf78408d6f834115b9feadd673a4d5bd149\",\"license\":\"MIT\"},\"@openzeppelin/contracts-upgradeable/utils/StringsUpgradeable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (utils/Strings.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev String operations.\\n */\\nlibrary StringsUpgradeable {\\n    bytes16 private constant _HEX_SYMBOLS = \\\"0123456789abcdef\\\";\\n\\n    /**\\n     * @dev Converts a `uint256` to its ASCII `string` decimal representation.\\n     */\\n    function toString(uint256 value) internal pure returns (string memory) {\\n        // Inspired by OraclizeAPI's implementation - MIT licence\\n        // https://github.com/oraclize/ethereum-api/blob/b42146b063c7d6ee1358846c198246239e9360e8/oraclizeAPI_0.4.25.sol\\n\\n        if (value == 0) {\\n            return \\\"0\\\";\\n        }\\n        uint256 temp = value;\\n        uint256 digits;\\n        while (temp != 0) {\\n            digits++;\\n            temp /= 10;\\n        }\\n        bytes memory buffer = new bytes(digits);\\n        while (value != 0) {\\n            digits -= 1;\\n            buffer[digits] = bytes1(uint8(48 + uint256(value % 10)));\\n            value /= 10;\\n        }\\n        return string(buffer);\\n    }\\n\\n    /**\\n     * @dev Converts a `uint256` to its ASCII `string` hexadecimal representation.\\n     */\\n    function toHexString(uint256 value) internal pure returns (string memory) {\\n        if (value == 0) {\\n            return \\\"0x00\\\";\\n        }\\n        uint256 temp = value;\\n        uint256 length = 0;\\n        while (temp != 0) {\\n            length++;\\n            temp >>= 8;\\n        }\\n        return toHexString(value, length);\\n    }\\n\\n    /**\\n     * @dev Converts a `uint256` to its ASCII `string` hexadecimal representation with fixed length.\\n     */\\n    function toHexString(uint256 value, uint256 length) internal pure returns (string memory) {\\n        bytes memory buffer = new bytes(2 * length + 2);\\n        buffer[0] = \\\"0\\\";\\n        buffer[1] = \\\"x\\\";\\n        for (uint256 i = 2 * length + 1; i > 1; --i) {\\n            buffer[i] = _HEX_SYMBOLS[value & 0xf];\\n            value >>= 4;\\n        }\\n        require(value == 0, \\\"Strings: hex length insufficient\\\");\\n        return string(buffer);\\n    }\\n}\\n\",\"keccak256\":\"0x398d3323c1932a5986bf36be7c57593e121e69d5db5b6574b4ee0d031443de37\",\"license\":\"MIT\"},\"@openzeppelin/contracts-upgradeable/utils/introspection/ERC165Upgradeable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (utils/introspection/ERC165.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"./IERC165Upgradeable.sol\\\";\\nimport \\\"../../proxy/utils/Initializable.sol\\\";\\n\\n/**\\n * @dev Implementation of the {IERC165} interface.\\n *\\n * Contracts that want to implement ERC165 should inherit from this contract and override {supportsInterface} to check\\n * for the additional interface id that will be supported. For example:\\n *\\n * ```solidity\\n * function supportsInterface(bytes4 interfaceId) public view virtual override returns (bool) {\\n *     return interfaceId == type(MyInterface).interfaceId || super.supportsInterface(interfaceId);\\n * }\\n * ```\\n *\\n * Alternatively, {ERC165Storage} provides an easier to use but more expensive implementation.\\n */\\nabstract contract ERC165Upgradeable is Initializable, IERC165Upgradeable {\\n    function __ERC165_init() internal onlyInitializing {\\n    }\\n\\n    function __ERC165_init_unchained() internal onlyInitializing {\\n    }\\n    /**\\n     * @dev See {IERC165-supportsInterface}.\\n     */\\n    function supportsInterface(bytes4 interfaceId) public view virtual override returns (bool) {\\n        return interfaceId == type(IERC165Upgradeable).interfaceId;\\n    }\\n\\n    /**\\n     * @dev This empty reserved space is put in place to allow future versions to add new\\n     * variables without shifting down storage in the inheritance chain.\\n     * See https://docs.openzeppelin.com/contracts/4.x/upgradeable#storage_gaps\\n     */\\n    uint256[50] private __gap;\\n}\\n\",\"keccak256\":\"0x9a3b990bd56d139df3e454a9edf1c64668530b5a77fc32eb063bc206f958274a\",\"license\":\"MIT\"},\"@openzeppelin/contracts-upgradeable/utils/introspection/IERC165Upgradeable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (utils/introspection/IERC165.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Interface of the ERC165 standard, as defined in the\\n * https://eips.ethereum.org/EIPS/eip-165[EIP].\\n *\\n * Implementers can declare support of contract interfaces, which can then be\\n * queried by others ({ERC165Checker}).\\n *\\n * For an implementation, see {ERC165}.\\n */\\ninterface IERC165Upgradeable {\\n    /**\\n     * @dev Returns true if this contract implements the interface defined by\\n     * `interfaceId`. See the corresponding\\n     * https://eips.ethereum.org/EIPS/eip-165#how-interfaces-are-identified[EIP section]\\n     * to learn more about how these ids are created.\\n     *\\n     * This function call must use less than 30 000 gas.\\n     */\\n    function supportsInterface(bytes4 interfaceId) external view returns (bool);\\n}\\n\",\"keccak256\":\"0xc6cef87559d0aeffdf0a99803de655938a7779ec0a3cd5d4383483ad85565a09\",\"license\":\"MIT\"},\"@openzeppelin/contracts-upgradeable/utils/math/SafeMathUpgradeable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.6.0) (utils/math/SafeMath.sol)\\n\\npragma solidity ^0.8.0;\\n\\n// CAUTION\\n// This version of SafeMath should only be used with Solidity 0.8 or later,\\n// because it relies on the compiler's built in overflow checks.\\n\\n/**\\n * @dev Wrappers over Solidity's arithmetic operations.\\n *\\n * NOTE: `SafeMath` is generally not needed starting with Solidity 0.8, since the compiler\\n * now has built in overflow checking.\\n */\\nlibrary SafeMathUpgradeable {\\n    /**\\n     * @dev Returns the addition of two unsigned integers, with an overflow flag.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function tryAdd(uint256 a, uint256 b) internal pure returns (bool, uint256) {\\n        unchecked {\\n            uint256 c = a + b;\\n            if (c < a) return (false, 0);\\n            return (true, c);\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the subtraction of two unsigned integers, with an overflow flag.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function trySub(uint256 a, uint256 b) internal pure returns (bool, uint256) {\\n        unchecked {\\n            if (b > a) return (false, 0);\\n            return (true, a - b);\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the multiplication of two unsigned integers, with an overflow flag.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function tryMul(uint256 a, uint256 b) internal pure returns (bool, uint256) {\\n        unchecked {\\n            // Gas optimization: this is cheaper than requiring 'a' not being zero, but the\\n            // benefit is lost if 'b' is also tested.\\n            // See: https://github.com/OpenZeppelin/openzeppelin-contracts/pull/522\\n            if (a == 0) return (true, 0);\\n            uint256 c = a * b;\\n            if (c / a != b) return (false, 0);\\n            return (true, c);\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the division of two unsigned integers, with a division by zero flag.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function tryDiv(uint256 a, uint256 b) internal pure returns (bool, uint256) {\\n        unchecked {\\n            if (b == 0) return (false, 0);\\n            return (true, a / b);\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the remainder of dividing two unsigned integers, with a division by zero flag.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function tryMod(uint256 a, uint256 b) internal pure returns (bool, uint256) {\\n        unchecked {\\n            if (b == 0) return (false, 0);\\n            return (true, a % b);\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the addition of two unsigned integers, reverting on\\n     * overflow.\\n     *\\n     * Counterpart to Solidity's `+` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - Addition cannot overflow.\\n     */\\n    function add(uint256 a, uint256 b) internal pure returns (uint256) {\\n        return a + b;\\n    }\\n\\n    /**\\n     * @dev Returns the subtraction of two unsigned integers, reverting on\\n     * overflow (when the result is negative).\\n     *\\n     * Counterpart to Solidity's `-` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - Subtraction cannot overflow.\\n     */\\n    function sub(uint256 a, uint256 b) internal pure returns (uint256) {\\n        return a - b;\\n    }\\n\\n    /**\\n     * @dev Returns the multiplication of two unsigned integers, reverting on\\n     * overflow.\\n     *\\n     * Counterpart to Solidity's `*` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - Multiplication cannot overflow.\\n     */\\n    function mul(uint256 a, uint256 b) internal pure returns (uint256) {\\n        return a * b;\\n    }\\n\\n    /**\\n     * @dev Returns the integer division of two unsigned integers, reverting on\\n     * division by zero. The result is rounded towards zero.\\n     *\\n     * Counterpart to Solidity's `/` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - The divisor cannot be zero.\\n     */\\n    function div(uint256 a, uint256 b) internal pure returns (uint256) {\\n        return a / b;\\n    }\\n\\n    /**\\n     * @dev Returns the remainder of dividing two unsigned integers. (unsigned integer modulo),\\n     * reverting when dividing by zero.\\n     *\\n     * Counterpart to Solidity's `%` operator. This function uses a `revert`\\n     * opcode (which leaves remaining gas untouched) while Solidity uses an\\n     * invalid opcode to revert (consuming all remaining gas).\\n     *\\n     * Requirements:\\n     *\\n     * - The divisor cannot be zero.\\n     */\\n    function mod(uint256 a, uint256 b) internal pure returns (uint256) {\\n        return a % b;\\n    }\\n\\n    /**\\n     * @dev Returns the subtraction of two unsigned integers, reverting with custom message on\\n     * overflow (when the result is negative).\\n     *\\n     * CAUTION: This function is deprecated because it requires allocating memory for the error\\n     * message unnecessarily. For custom revert reasons use {trySub}.\\n     *\\n     * Counterpart to Solidity's `-` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - Subtraction cannot overflow.\\n     */\\n    function sub(\\n        uint256 a,\\n        uint256 b,\\n        string memory errorMessage\\n    ) internal pure returns (uint256) {\\n        unchecked {\\n            require(b <= a, errorMessage);\\n            return a - b;\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the integer division of two unsigned integers, reverting with custom message on\\n     * division by zero. The result is rounded towards zero.\\n     *\\n     * Counterpart to Solidity's `/` operator. Note: this function uses a\\n     * `revert` opcode (which leaves remaining gas untouched) while Solidity\\n     * uses an invalid opcode to revert (consuming all remaining gas).\\n     *\\n     * Requirements:\\n     *\\n     * - The divisor cannot be zero.\\n     */\\n    function div(\\n        uint256 a,\\n        uint256 b,\\n        string memory errorMessage\\n    ) internal pure returns (uint256) {\\n        unchecked {\\n            require(b > 0, errorMessage);\\n            return a / b;\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the remainder of dividing two unsigned integers. (unsigned integer modulo),\\n     * reverting with custom message when dividing by zero.\\n     *\\n     * CAUTION: This function is deprecated because it requires allocating memory for the error\\n     * message unnecessarily. For custom revert reasons use {tryMod}.\\n     *\\n     * Counterpart to Solidity's `%` operator. This function uses a `revert`\\n     * opcode (which leaves remaining gas untouched) while Solidity uses an\\n     * invalid opcode to revert (consuming all remaining gas).\\n     *\\n     * Requirements:\\n     *\\n     * - The divisor cannot be zero.\\n     */\\n    function mod(\\n        uint256 a,\\n        uint256 b,\\n        string memory errorMessage\\n    ) internal pure returns (uint256) {\\n        unchecked {\\n            require(b > 0, errorMessage);\\n            return a % b;\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0xcaa8b7861115ea691c77ddbeac140a444e0edcd1d9812a43942c0f6b42b36a49\",\"license\":\"MIT\"},\"contracts/HarmonyLightClient.sol\":{\"content\":\"// SPDX-License-Identifier: UNLICENSED\\n\\npragma solidity ^0.8.0;\\npragma experimental ABIEncoderV2;\\n\\nimport \\\"./HarmonyParser.sol\\\";\\nimport \\\"./lib/SafeCast.sol\\\";\\nimport \\\"@openzeppelin/contracts-upgradeable/utils/math/SafeMathUpgradeable.sol\\\";\\nimport \\\"@openzeppelin/contracts-upgradeable/access/AccessControlUpgradeable.sol\\\";\\n// import \\\"openzeppelin-solidity/contracts/utils/Pausable.sol\\\";\\nimport \\\"@openzeppelin/contracts-upgradeable/security/PausableUpgradeable.sol\\\";\\n// import \\\"openzeppelin-solidity/contracts/proxy/Initializable.sol\\\";\\nimport \\\"@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol\\\";\\n\\ncontract HarmonyLightClient is\\n    Initializable,\\n    PausableUpgradeable,\\n    AccessControlUpgradeable\\n{\\n    using SafeCast for *;\\n    using SafeMathUpgradeable for uint256;\\n\\n    struct BlockHeader {\\n        bytes32 parentHash;\\n        bytes32 stateRoot;\\n        bytes32 transactionsRoot;\\n        bytes32 receiptsRoot;\\n        uint256 number;\\n        uint256 epoch;\\n        uint256 shard;\\n        uint256 time;\\n        bytes32 mmrRoot;\\n        bytes32 hash;\\n    }\\n\\n    event CheckPoint(\\n        bytes32 stateRoot,\\n        bytes32 transactionsRoot,\\n        bytes32 receiptsRoot,\\n        uint256 number,\\n        uint256 epoch,\\n        uint256 shard,\\n        uint256 time,\\n        bytes32 mmrRoot,\\n        bytes32 hash\\n    );\\n\\n    BlockHeader firstBlock;\\n    BlockHeader lastCheckPointBlock;\\n\\n    // epoch to block numbers, as there could be >=1 mmr entries per epoch\\n    mapping(uint256 => uint256[]) epochCheckPointBlockNumbers;\\n\\n    // block number to BlockHeader\\n    mapping(uint256 => BlockHeader) checkPointBlocks;\\n\\n    mapping(uint256 => mapping(bytes32 => bool)) epochMmrRoots;\\n\\n    uint8 relayerThreshold;\\n\\n    event RelayerThresholdChanged(uint256 newThreshold);\\n    event RelayerAdded(address relayer);\\n    event RelayerRemoved(address relayer);\\n\\n    bytes32 public constant RELAYER_ROLE = keccak256(\\\"RELAYER_ROLE\\\");\\n\\n    // number of the oldest epoch that stored, we use this to prune the expired epochs from state\\n    uint256 public oldestEpochStored;\\n    uint256 private constant BLOCK_EXPIRED = 30 days;\\n    uint256 private constant MAX_PRUNE_ONCE = 2;\\n\\n\\n    modifier onlyAdmin() {\\n        require(hasRole(DEFAULT_ADMIN_ROLE, msg.sender), \\\"sender doesn't have admin role\\\");\\n        _;\\n    }\\n\\n    modifier onlyRelayers() {\\n        require(hasRole(RELAYER_ROLE, msg.sender), \\\"sender doesn't have relayer role\\\");\\n        _;\\n    }\\n\\n    function adminPauseLightClient() external onlyAdmin {\\n        _pause();\\n    }\\n\\n    function adminUnpauseLightClient() external onlyAdmin {\\n        _unpause();\\n    }\\n\\n    function renounceAdmin(address newAdmin) external onlyAdmin {\\n        require(msg.sender != newAdmin, 'cannot renounce self');\\n        grantRole(DEFAULT_ADMIN_ROLE, newAdmin);\\n        renounceRole(DEFAULT_ADMIN_ROLE, msg.sender);\\n    }\\n\\n    function adminChangeRelayerThreshold(uint256 newThreshold) external onlyAdmin {\\n        relayerThreshold = newThreshold.toUint8();\\n        emit RelayerThresholdChanged(newThreshold);\\n    }\\n\\n    function adminAddRelayer(address relayerAddress) external onlyAdmin {\\n        require(!hasRole(RELAYER_ROLE, relayerAddress), \\\"addr already has relayer role!\\\");\\n        grantRole(RELAYER_ROLE, relayerAddress);\\n        emit RelayerAdded(relayerAddress);\\n    }\\n\\n    function adminRemoveRelayer(address relayerAddress) external onlyAdmin {\\n        require(hasRole(RELAYER_ROLE, relayerAddress), \\\"addr doesn't have relayer role!\\\");\\n        revokeRole(RELAYER_ROLE, relayerAddress);\\n        emit RelayerRemoved(relayerAddress);\\n    }\\n\\n    function initialize(\\n        bytes memory firstRlpHeader,\\n        address[] memory initialRelayers,\\n        uint8 initialRelayerThreshold\\n    ) external initializer {\\n        HarmonyParser.BlockHeader memory header = HarmonyParser.toBlockHeader(\\n            firstRlpHeader\\n        );\\n        \\n        firstBlock.parentHash = header.parentHash;\\n        firstBlock.stateRoot = header.stateRoot;\\n        firstBlock.transactionsRoot = header.transactionsRoot;\\n        firstBlock.receiptsRoot = header.receiptsRoot;\\n        firstBlock.number = header.number;\\n        firstBlock.epoch = header.epoch;\\n        firstBlock.shard = header.shardID;\\n        firstBlock.time = header.timestamp;\\n        firstBlock.mmrRoot = HarmonyParser.toBytes32(header.mmrRoot);\\n        firstBlock.hash = header.hash;\\n        oldestEpochStored = header.epoch;\\n        \\n        epochCheckPointBlockNumbers[header.epoch].push(header.number);\\n        checkPointBlocks[header.number] = firstBlock;\\n\\n        epochMmrRoots[header.epoch][firstBlock.mmrRoot] = true;\\n\\n        relayerThreshold = initialRelayerThreshold;\\n        _setupRole(DEFAULT_ADMIN_ROLE, msg.sender);\\n        for (uint256 i; i < initialRelayers.length; i++) {\\n            grantRole(RELAYER_ROLE, initialRelayers[i]);\\n        }\\n\\n    }\\n\\n    function _deleteEpoch(uint256 epochNo) private {\\n        uint256[] storage blockNumbers = epochCheckPointBlockNumbers[epochNo];\\n        for(uint256 i = 0; i < blockNumbers.length; i++) {\\n            uint256 blockNo = blockNumbers[i];\\n            bytes32 mmrRoot = checkPointBlocks[blockNo].mmrRoot;\\n            delete checkPointBlocks[blockNo];\\n            delete epochMmrRoots[epochNo][mmrRoot];\\n        }\\n        delete epochCheckPointBlockNumbers[epochNo];\\n    }\\n \\n    function _pruneEpochs(uint256 pruneTime) private {\\n        uint256 epochCur = oldestEpochStored;\\n        if (epochCheckPointBlockNumbers[epochCur].length == 0) return;\\n        for(uint256 i = 0; i < MAX_PRUNE_ONCE; i++) {\\n            uint256 epochNo = epochCur++;\\n            uint256[] storage epochBlockNumbers = epochCheckPointBlockNumbers[epochCur];\\n            uint256 epochBlockCount = epochBlockNumbers.length;\\n            if (epochBlockCount == 0) break;\\n            if (checkPointBlocks[epochBlockNumbers[epochBlockCount-1]].time > pruneTime) break;\\n            _deleteEpoch(epochNo);\\n        }\\n        if(epochCur > oldestEpochStored) oldestEpochStored = epochCur;\\n    }\\n\\n    function submitCheckpoint(bytes memory rlpHeader) external onlyRelayers whenNotPaused {\\n        _pruneEpochs(block.timestamp - BLOCK_EXPIRED);\\n        HarmonyParser.BlockHeader memory header = HarmonyParser.toBlockHeader(\\n            rlpHeader\\n        );\\n\\n        BlockHeader memory checkPointBlock;\\n        \\n        checkPointBlock.parentHash = header.parentHash;\\n        checkPointBlock.stateRoot = header.stateRoot;\\n        checkPointBlock.transactionsRoot = header.transactionsRoot;\\n        checkPointBlock.receiptsRoot = header.receiptsRoot;\\n        checkPointBlock.number = header.number;\\n        checkPointBlock.epoch = header.epoch;\\n        checkPointBlock.shard = header.shardID;\\n        checkPointBlock.time = header.timestamp;\\n        checkPointBlock.mmrRoot = HarmonyParser.toBytes32(header.mmrRoot);\\n        checkPointBlock.hash = header.hash;\\n        \\n        epochCheckPointBlockNumbers[header.epoch].push(header.number);\\n        checkPointBlocks[header.number] = checkPointBlock;\\n\\n        epochMmrRoots[header.epoch][checkPointBlock.mmrRoot] = true;\\n        emit CheckPoint(\\n            checkPointBlock.stateRoot,\\n            checkPointBlock.transactionsRoot,\\n            checkPointBlock.receiptsRoot,\\n            checkPointBlock.number,\\n            checkPointBlock.epoch,\\n            checkPointBlock.shard,\\n            checkPointBlock.time,\\n            checkPointBlock.mmrRoot,\\n            checkPointBlock.hash\\n        );\\n    }\\n\\n    function getLatestCheckPoint(uint256 blockNumber, uint256 epoch)\\n        public\\n        view\\n        returns (BlockHeader memory checkPointBlock)\\n    {\\n        require(\\n            epochCheckPointBlockNumbers[epoch].length > 0,\\n            \\\"no checkpoints for epoch\\\"\\n        );\\n        uint256[] memory checkPointBlockNumbers = epochCheckPointBlockNumbers[epoch];\\n        uint256 nearest = 0;\\n        for (uint256 i = 0; i < checkPointBlockNumbers.length; i++) {\\n            uint256 checkPointBlockNumber = checkPointBlockNumbers[i];\\n            if (\\n                checkPointBlockNumber > blockNumber &&\\n                checkPointBlockNumber < nearest\\n            ) {\\n                nearest = checkPointBlockNumber;\\n            }\\n        }\\n        checkPointBlock = checkPointBlocks[nearest];\\n    }\\n\\n    function isValidCheckPoint(uint256 epoch, bytes32 mmrRoot) public view returns (bool status) {\\n        return epochMmrRoots[epoch][mmrRoot];\\n    }\\n}\\n\",\"keccak256\":\"0x80d4bd94ad856871d0e2b907cc1afc6930210bb0ec274cad03956b1546142034\",\"license\":\"UNLICENSED\"},\"contracts/HarmonyParser.sol\":{\"content\":\"// SPDX-License-Identifier: UNLICENSED\\n\\npragma solidity ^0.8.0;\\npragma experimental ABIEncoderV2;\\n\\nimport \\\"./lib/RLPReader.sol\\\";\\nimport \\\"./lib/RLPEncode.sol\\\";\\n\\nlibrary HarmonyParser {\\n    using RLPReader for bytes;\\n    using RLPReader for uint256;\\n    using RLPReader for RLPReader.RLPItem;\\n    using RLPReader for RLPReader.Iterator;\\n\\n    using RLPEncode for bytes;\\n    using RLPEncode for bytes[];\\n\\n    struct BlockHeader {\\n        bytes32 hash;\\n        bytes32 parentHash;\\n        address miner;\\n        bytes32 stateRoot;\\n        bytes32 transactionsRoot;\\n        bytes32 receiptsRoot;\\n        bytes32 outgoingReceiptsRoot;\\n        bytes32 incomingReceiptsRoot;\\n        bytes logsBloom;\\n        uint256 number;\\n        uint256 gasLimit;\\n        uint256 gasUsed;\\n        uint256 timestamp;\\n        bytes extraData;\\n        bytes32 mixHash;\\n        uint256 viewID;\\n        uint256 epoch;\\n        uint256 shardID;\\n        bytes lastCommitSignature;\\n        bytes lastCommitBitmap;\\n        bytes vrf;\\n        bytes vdf;\\n        bytes shardState;\\n        bytes crossLink;\\n        bytes slashes;\\n        bytes mmrRoot;\\n    }\\n\\n    struct Account {\\n        uint256 nonce;\\n        uint256 balance;\\n        bytes32 storageRoot;\\n        bytes32 codeHash;\\n    }\\n\\n    struct Transaction {\\n        uint256 nonce;\\n        uint256 gasPrice;\\n        uint256 gas;\\n        uint256 shardID;\\n        uint256 toShardID;\\n        address to;\\n        uint256 value;\\n        bytes input;\\n        uint8 v;\\n        bytes32 r;\\n        bytes32 s;\\n    }\\n\\n    struct Log {\\n        address contractAddress;\\n        bytes32[] topics;\\n        bytes data;\\n    }\\n\\n    struct TransactionReceipt {\\n        bytes32 transactionHash;\\n        uint256 transactionIndex;\\n        bytes32 blockHash;\\n        uint256 blockNumber;\\n        address from;\\n        address to;\\n        uint256 gasUsed;\\n        uint256 cummulativeGasUsed;\\n        address contractAddress;\\n        Log[] logs;\\n        uint256 status; // root?\\n        bytes logsBloom;\\n        uint8 v;\\n        bytes32 r;\\n        bytes32 s;\\n    }\\n\\n    struct TransactionReceiptTrie {\\n        uint8 status;\\n        uint256 gasUsed;\\n        bytes logsBloom;\\n        Log[] logs;\\n    }\\n\\n    function getBlockRlpData(BlockHeader memory header)\\n        internal\\n        pure\\n        returns (bytes memory data)\\n    {\\n        bytes[] memory list = new bytes[](15);\\n\\n        list[0] = RLPEncode.encodeBytes(abi.encodePacked(header.parentHash));\\n        list[1] = RLPEncode.encodeAddress(header.miner);\\n        list[2] = RLPEncode.encodeBytes(abi.encodePacked(header.stateRoot));\\n        list[3] = RLPEncode.encodeBytes(\\n            abi.encodePacked(header.transactionsRoot)\\n        );\\n        list[4] = RLPEncode.encodeBytes(abi.encodePacked(header.receiptsRoot));\\n        list[5] = RLPEncode.encodeBytes(\\n            abi.encodePacked(header.outgoingReceiptsRoot)\\n        );\\n        list[6] = RLPEncode.encodeBytes(\\n            abi.encodePacked(header.incomingReceiptsRoot)\\n        );\\n        list[7] = RLPEncode.encodeBytes(header.logsBloom);\\n        list[8] = RLPEncode.encodeUint(header.number);\\n        list[9] = RLPEncode.encodeUint(header.gasLimit);\\n        list[10] = RLPEncode.encodeUint(header.gasUsed);\\n        list[11] = RLPEncode.encodeUint(header.timestamp);\\n        list[12] = RLPEncode.encodeBytes(header.extraData);\\n        list[13] = RLPEncode.encodeBytes(abi.encodePacked(header.mixHash));\\n\\n        list[14] = RLPEncode.encodeUint(header.viewID);\\n        list[15] = RLPEncode.encodeUint(header.epoch);\\n        list[16] = RLPEncode.encodeUint(header.shardID);\\n\\n        list[17] = RLPEncode.encodeBytes(header.lastCommitSignature);\\n        list[18] = RLPEncode.encodeBytes(header.lastCommitBitmap);\\n        list[19] = RLPEncode.encodeBytes(header.vrf);\\n        list[20] = RLPEncode.encodeBytes(header.vdf);\\n\\n        list[21] = RLPEncode.encodeBytes(header.shardState);\\n        list[22] = RLPEncode.encodeBytes(header.crossLink);\\n        list[23] = RLPEncode.encodeBytes(header.slashes);\\n        list[24] = RLPEncode.encodeBytes(header.mmrRoot);\\n\\n        data = RLPEncode.encodeList(list);\\n    }\\n\\n    /**\\n     * Parse RLP-encoded block header into BlockHeader data structure\\n     *  @param rlpHeader: RLP-encoded block header with data fields order as defined in the BlockHeader struct\\n     **/\\n    function toBlockHeader(bytes memory rlpHeader)\\n        internal\\n        pure\\n        returns (BlockHeader memory header)\\n    {\\n        RLPReader.Iterator memory it = rlpHeader.toRlpItem().iterator();\\n        // skip two dummy header fields\\n        it.next();\\n        it.next();\\n        it = it.next().iterator();\\n        uint256 idx;\\n        while (it.hasNext()) {\\n            if (idx == 0) header.parentHash = bytes32(it.next().toUint());\\n            else if (idx == 1) header.miner = it.next().toAddress();\\n            else if (idx == 2) header.stateRoot = bytes32(it.next().toUint());\\n            else if (idx == 3)\\n                header.transactionsRoot = bytes32(it.next().toUint());\\n            else if (idx == 4)\\n                header.receiptsRoot = bytes32(it.next().toUint());\\n            else if (idx == 5)\\n                header.outgoingReceiptsRoot = bytes32(it.next().toUint());\\n            else if (idx == 6)\\n                header.incomingReceiptsRoot = bytes32(it.next().toUint());\\n            else if (idx == 7) header.logsBloom = it.next().toBytes();\\n            else if (idx == 8) header.number = it.next().toUint();\\n            else if (idx == 9) header.gasLimit = it.next().toUint();\\n            else if (idx == 10) header.gasUsed = it.next().toUint();\\n            else if (idx == 11) header.timestamp = it.next().toUint();\\n            else if (idx == 12) header.extraData = it.next().toBytes();\\n            else if (idx == 13) header.mixHash = bytes32(it.next().toUint());\\n            else if (idx == 14) header.viewID = it.next().toUint();\\n            else if (idx == 15) header.epoch = it.next().toUint();\\n            else if (idx == 16) header.shardID = it.next().toUint();\\n            else if (idx == 17)\\n                header.lastCommitSignature = it.next().toBytes();\\n            else if (idx == 18) header.lastCommitBitmap = it.next().toBytes();\\n            else if (idx == 19) header.vrf = it.next().toBytes();\\n            else if (idx == 20) header.vdf = it.next().toBytes();\\n            else if (idx == 21) header.shardState = it.next().toBytes();\\n            else if (idx == 22) header.crossLink = it.next().toBytes();\\n            else if (idx == 23) header.slashes = it.next().toBytes();\\n            else if (idx == 24) header.mmrRoot = it.next().toBytes();\\n            else it.next();\\n\\n            idx++;\\n        }\\n        header.hash = keccak256(rlpHeader);\\n    }\\n\\n    function getFirstKey(bytes memory keys) public returns (bytes memory) {\\n        RLPReader.Iterator memory it = keys.toRlpItem().iterator();\\n        while (it.hasNext()) {\\n            bytes memory key = it.next().toBytes();\\n            return key;\\n        }\\n    }\\n\\n    function calcBlockHeaderHash(bytes memory rlpHeader)\\n        internal\\n        pure\\n        returns (uint256)\\n    {\\n        return uint256(keccak256(rlpHeader));\\n    }\\n\\n    function calcBlockSealHash(bytes memory rlpHeader)\\n        internal\\n        pure\\n        returns (uint256)\\n    {\\n        bytes[] memory rlpFields = new bytes[](13);\\n        RLPReader.Iterator memory it = rlpHeader.toRlpItem().iterator();\\n        uint256 idx = 0;\\n        while (it.hasNext() && idx < 13) {\\n            rlpFields[idx] = it.next().toRlpBytes();\\n            idx++;\\n        }\\n\\n        bytes memory toSealRlpData = rlpFields.encodeList();\\n        return uint256(keccak256(toSealRlpData));\\n    }\\n\\n    function getBlockHash(BlockHeader memory header)\\n        internal\\n        pure\\n        returns (bytes32 hash)\\n    {\\n        return keccak256(getBlockRlpData(header));\\n    }\\n\\n    function getLog(Log memory log) internal pure returns (bytes memory data) {\\n        bytes[] memory list = new bytes[](3);\\n        bytes[] memory topics = new bytes[](log.topics.length);\\n\\n        for (uint256 i = 0; i < log.topics.length; i++) {\\n            topics[i] = RLPEncode.encodeBytes(abi.encodePacked(log.topics[i]));\\n        }\\n\\n        list[0] = RLPEncode.encodeAddress(log.contractAddress);\\n        list[1] = RLPEncode.encodeList(topics);\\n        list[2] = RLPEncode.encodeBytes(log.data);\\n        data = RLPEncode.encodeList(list);\\n    }\\n\\n    function getReceiptRlpData(TransactionReceiptTrie memory receipt)\\n        internal\\n        pure\\n        returns (bytes memory data)\\n    {\\n        bytes[] memory list = new bytes[](4);\\n\\n        bytes[] memory logs = new bytes[](receipt.logs.length);\\n        for (uint256 i = 0; i < receipt.logs.length; i++) {\\n            logs[i] = getLog(receipt.logs[i]);\\n        }\\n\\n        list[0] = RLPEncode.encodeUint(receipt.status);\\n        list[1] = RLPEncode.encodeUint(receipt.gasUsed);\\n        list[2] = RLPEncode.encodeBytes(receipt.logsBloom);\\n        list[3] = RLPEncode.encodeList(logs);\\n        data = RLPEncode.encodeList(list);\\n    }\\n\\n    function toReceiptLog(bytes memory data)\\n        internal\\n        pure\\n        returns (Log memory log)\\n    {\\n        RLPReader.Iterator memory it = RLPReader.toRlpItem(data).iterator();\\n\\n        uint256 idx;\\n        while (it.hasNext()) {\\n            if (idx == 0) {\\n                log.contractAddress = it.next().toAddress();\\n            } else if (idx == 1) {\\n                RLPReader.RLPItem[] memory list = it.next().toList();\\n                log.topics = new bytes32[](list.length);\\n                for (uint256 i = 0; i < list.length; i++) {\\n                    bytes32 topic = bytes32(list[i].toUint());\\n                    log.topics[i] = topic;\\n                }\\n            } else if (idx == 2) log.data = it.next().toBytes();\\n            else it.next();\\n            idx++;\\n        }\\n    }\\n\\n    function toReceipt(bytes memory data)\\n        internal\\n        pure\\n        returns (TransactionReceiptTrie memory receipt)\\n    {\\n        RLPReader.Iterator memory it = RLPReader.toRlpItem(data).iterator();\\n\\n        uint256 idx;\\n        while (it.hasNext()) {\\n            if (idx == 0) receipt.status = uint8(it.next().toUint());\\n            else if (idx == 1) receipt.gasUsed = it.next().toUint();\\n            else if (idx == 2) receipt.logsBloom = it.next().toBytes();\\n            else if (idx == 3) {\\n                RLPReader.RLPItem[] memory list = it.next().toList();\\n                receipt.logs = new Log[](list.length);\\n                for (uint256 i = 0; i < list.length; i++) {\\n                    receipt.logs[i] = toReceiptLog(list[i].toRlpBytes());\\n                }\\n            } else it.next();\\n            idx++;\\n        }\\n    }\\n\\n    function getTransactionRaw(Transaction memory transaction, uint256 chainId)\\n        internal\\n        pure\\n        returns (bytes memory data)\\n    {\\n        bytes[] memory list = new bytes[](9);\\n\\n        list[0] = RLPEncode.encodeUint(transaction.nonce);\\n        list[1] = RLPEncode.encodeUint(transaction.gasPrice);\\n        list[2] = RLPEncode.encodeUint(transaction.gas);\\n        list[3] = RLPEncode.encodeUint(transaction.shardID);\\n        list[4] = RLPEncode.encodeUint(transaction.toShardID);\\n        list[5] = RLPEncode.encodeAddress(transaction.to);\\n        list[6] = RLPEncode.encodeUint(transaction.value);\\n        list[7] = RLPEncode.encodeBytes(transaction.input);\\n        list[8] = RLPEncode.encodeUint(chainId);\\n        list[9] = RLPEncode.encodeUint(0);\\n        list[10] = RLPEncode.encodeUint(0);\\n        data = RLPEncode.encodeList(list);\\n    }\\n\\n    /**\\n     * @param rlpTx: RLP-encoded tx with data fields order as defined in the Tx struct\\n     **/\\n    function toTransaction(bytes memory rlpTx)\\n        internal\\n        pure\\n        returns (Transaction memory transaction)\\n    {\\n        RLPReader.Iterator memory it = rlpTx.toRlpItem().iterator();\\n        uint256 idx;\\n        while (it.hasNext()) {\\n            if (idx == 0) transaction.nonce = it.next().toUint();\\n            else if (idx == 1) transaction.gasPrice = it.next().toUint();\\n            else if (idx == 2) transaction.gas = it.next().toUint();\\n            else if (idx == 3) transaction.shardID = it.next().toUint();\\n            else if (idx == 4) transaction.toShardID = it.next().toUint();\\n            else if (idx == 5) transaction.to = it.next().toAddress();\\n            else if (idx == 6) transaction.value = it.next().toUint();\\n            else if (idx == 7) transaction.input = it.next().toBytes();\\n            else if (idx == 8) transaction.v = uint8(it.next().toUint());\\n            else if (idx == 9) transaction.r = it.next().toBytes32();\\n            else if (idx == 10) transaction.s = it.next().toBytes32();\\n            else it.next();\\n            idx++;\\n        }\\n        return transaction;\\n    }\\n\\n    function toAccount(bytes memory data)\\n        internal\\n        pure\\n        returns (Account memory account)\\n    {\\n        RLPReader.Iterator memory it = RLPReader.toRlpItem(data).iterator();\\n\\n        uint256 idx;\\n        while (it.hasNext()) {\\n            if (idx == 0) account.nonce = it.next().toUint();\\n            else if (idx == 1) account.balance = it.next().toUint();\\n            else if (idx == 2)\\n                account.storageRoot = toBytes32(it.next().toBytes());\\n            else if (idx == 3)\\n                account.codeHash = toBytes32(it.next().toBytes());\\n            else it.next();\\n            idx++;\\n        }\\n    }\\n\\n    function toBytes32(bytes memory data)\\n        internal\\n        pure\\n        returns (bytes32 _data)\\n    {\\n        assembly {\\n            _data := mload(add(data, 32))\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0x31c79dd20aae7b23f420b93609ead77763f216b58e0e8bfbefcf3fcecdd1071c\",\"license\":\"UNLICENSED\"},\"contracts/lib/RLPEncode.sol\":{\"content\":\"// SPDX-License-Identifier: UNLICENSED\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @title RLPEncode\\n * @dev A simple RLP encoding library.\\n * @author Bakaoh\\n */\\nlibrary RLPEncode {\\n    /*\\n     * Internal functions\\n     */\\n\\n    /**\\n     * @dev RLP encodes a byte string.\\n     * @param self The byte string to encode.\\n     * @return The RLP encoded string in bytes.\\n     */\\n    function encodeBytes(bytes memory self)\\n        internal\\n        pure\\n        returns (bytes memory)\\n    {\\n        bytes memory encoded;\\n        if (self.length == 1 && uint8(self[0]) <= 128) {\\n            encoded = self;\\n        } else {\\n            encoded = concat(encodeLength(self.length, 128), self);\\n        }\\n        return encoded;\\n    }\\n\\n    /**\\n     * @dev RLP encodes a list of RLP encoded byte byte strings.\\n     * @param self The list of RLP encoded byte strings.\\n     * @return The RLP encoded list of items in bytes.\\n     */\\n    function encodeList(bytes[] memory self)\\n        internal\\n        pure\\n        returns (bytes memory)\\n    {\\n        bytes memory list = flatten(self);\\n        return concat(encodeLength(list.length, 192), list);\\n    }\\n\\n    /**\\n     * @dev RLP encodes a string.\\n     * @param self The string to encode.\\n     * @return The RLP encoded string in bytes.\\n     */\\n    function encodeString(string memory self)\\n        internal\\n        pure\\n        returns (bytes memory)\\n    {\\n        return encodeBytes(bytes(self));\\n    }\\n\\n    /**\\n     * @dev RLP encodes an address.\\n     * @param self The address to encode.\\n     * @return The RLP encoded address in bytes.\\n     */\\n    function encodeAddress(address self) internal pure returns (bytes memory) {\\n        bytes memory inputBytes;\\n        assembly {\\n            let m := mload(0x40)\\n            mstore(\\n                add(m, 20),\\n                xor(0x140000000000000000000000000000000000000000, self)\\n            )\\n            mstore(0x40, add(m, 52))\\n            inputBytes := m\\n        }\\n        return encodeBytes(inputBytes);\\n    }\\n\\n    /**\\n     * @dev RLP encodes a uint.\\n     * @param self The uint to encode.\\n     * @return The RLP encoded uint in bytes.\\n     */\\n    function encodeUint(uint256 self) internal pure returns (bytes memory) {\\n        return encodeBytes(toBinary(self));\\n    }\\n\\n    /**\\n     * @dev RLP encodes an int.\\n     * @param self The int to encode.\\n     * @return The RLP encoded int in bytes.\\n     */\\n    function encodeInt(int256 self) internal pure returns (bytes memory) {\\n        return encodeUint(uint256(self));\\n    }\\n\\n    /**\\n     * @dev RLP encodes a bool.\\n     * @param self The bool to encode.\\n     * @return The RLP encoded bool in bytes.\\n     */\\n    function encodeBool(bool self) internal pure returns (bytes memory) {\\n        bytes memory encoded = new bytes(1);\\n        encoded[0] = (self ? bytes1(0x01) : bytes1(0x80));\\n        return encoded;\\n    }\\n\\n    /*\\n     * Private functions\\n     */\\n\\n    /**\\n     * @dev Encode the first byte, followed by the `len` in binary form if `length` is more than 55.\\n     * @param len The length of the string or the payload.\\n     * @param offset 128 if item is string, 192 if item is list.\\n     * @return RLP encoded bytes.\\n     */\\n    function encodeLength(uint256 len, uint256 offset)\\n        private\\n        pure\\n        returns (bytes memory)\\n    {\\n        bytes memory encoded;\\n        if (len < 56) {\\n            encoded = new bytes(1);\\n            encoded[0] = bytes32(len + offset)[31];\\n        } else {\\n            uint256 lenLen;\\n            uint256 i = 1;\\n            while (len / i != 0) {\\n                lenLen++;\\n                i *= 256;\\n            }\\n\\n            encoded = new bytes(lenLen + 1);\\n            encoded[0] = bytes32(lenLen + offset + 55)[31];\\n            for (i = 1; i <= lenLen; i++) {\\n                encoded[i] = bytes32((len / (256**(lenLen - i))) % 256)[31];\\n            }\\n        }\\n        return encoded;\\n    }\\n\\n    /**\\n     * @dev Encode integer in big endian binary form with no leading zeroes.\\n     * @notice TODO: This should be optimized with assembly to save gas costs.\\n     * @param _x The integer to encode.\\n     * @return RLP encoded bytes.\\n     */\\n    function toBinary(uint256 _x) private pure returns (bytes memory) {\\n        bytes memory b = new bytes(32);\\n        assembly {\\n            mstore(add(b, 32), _x)\\n        }\\n        uint256 i = 0;\\n        for (; i < 32; i++) {\\n            if (b[i] != 0) {\\n                break;\\n            }\\n        }\\n        bytes memory res = new bytes(32 - i);\\n        for (uint256 j = 0; j < res.length; j++) {\\n            res[j] = b[i++];\\n        }\\n        return res;\\n    }\\n\\n    /**\\n     * @dev Copies a piece of memory to another location.\\n     * @notice From: https://github.com/Arachnid/solidity-stringutils/blob/master/src/strings.sol.\\n     * @param _dest Destination location.\\n     * @param _src Source location.\\n     * @param _len Length of memory to copy.\\n     */\\n    function memcpy(\\n        uint256 _dest,\\n        uint256 _src,\\n        uint256 _len\\n    ) private pure {\\n        uint256 dest = _dest;\\n        uint256 src = _src;\\n        uint256 len = _len;\\n\\n        for (; len >= 32; len -= 32) {\\n            assembly {\\n                mstore(dest, mload(src))\\n            }\\n            dest += 32;\\n            src += 32;\\n        }\\n\\n        uint256 mask = 256**(32 - len) - 1;\\n        assembly {\\n            let srcpart := and(mload(src), not(mask))\\n            let destpart := and(mload(dest), mask)\\n            mstore(dest, or(destpart, srcpart))\\n        }\\n    }\\n\\n    /**\\n     * @dev Flattens a list of byte strings into one byte string.\\n     * @notice From: https://github.com/sammayo/solidity-rlp-encoder/blob/master/RLPEncode.sol.\\n     * @param _list List of byte strings to flatten.\\n     * @return The flattened byte string.\\n     */\\n    function flatten(bytes[] memory _list) private pure returns (bytes memory) {\\n        if (_list.length == 0) {\\n            return new bytes(0);\\n        }\\n\\n        uint256 len;\\n        uint256 i = 0;\\n        for (; i < _list.length; i++) {\\n            len += _list[i].length;\\n        }\\n\\n        bytes memory flattened = new bytes(len);\\n        uint256 flattenedPtr;\\n        assembly {\\n            flattenedPtr := add(flattened, 0x20)\\n        }\\n\\n        for (i = 0; i < _list.length; i++) {\\n            bytes memory item = _list[i];\\n\\n            uint256 listPtr;\\n            assembly {\\n                listPtr := add(item, 0x20)\\n            }\\n\\n            memcpy(flattenedPtr, listPtr, item.length);\\n            flattenedPtr += _list[i].length;\\n        }\\n\\n        return flattened;\\n    }\\n\\n    /**\\n     * @dev Concatenates two bytes.\\n     * @notice From: https://github.com/GNSPS/solidity-bytes-utils/blob/master/contracts/BytesLib.sol.\\n     * @param _preBytes First byte string.\\n     * @param _postBytes Second byte string.\\n     * @return Both byte string combined.\\n     */\\n    function concat(bytes memory _preBytes, bytes memory _postBytes)\\n        private\\n        pure\\n        returns (bytes memory)\\n    {\\n        bytes memory tempBytes;\\n\\n        assembly {\\n            tempBytes := mload(0x40)\\n\\n            let length := mload(_preBytes)\\n            mstore(tempBytes, length)\\n\\n            let mc := add(tempBytes, 0x20)\\n            let end := add(mc, length)\\n\\n            for {\\n                let cc := add(_preBytes, 0x20)\\n            } lt(mc, end) {\\n                mc := add(mc, 0x20)\\n                cc := add(cc, 0x20)\\n            } {\\n                mstore(mc, mload(cc))\\n            }\\n\\n            length := mload(_postBytes)\\n            mstore(tempBytes, add(length, mload(tempBytes)))\\n\\n            mc := end\\n            end := add(mc, length)\\n\\n            for {\\n                let cc := add(_postBytes, 0x20)\\n            } lt(mc, end) {\\n                mc := add(mc, 0x20)\\n                cc := add(cc, 0x20)\\n            } {\\n                mstore(mc, mload(cc))\\n            }\\n\\n            mstore(\\n                0x40,\\n                and(\\n                    add(add(end, iszero(add(length, mload(_preBytes)))), 31),\\n                    not(31)\\n                )\\n            )\\n        }\\n\\n        return tempBytes;\\n    }\\n}\\n\",\"keccak256\":\"0xa0058a159fe705052d9b4eef67d83b892111fd0d3ce48174d2ace8474a144358\",\"license\":\"UNLICENSED\"},\"contracts/lib/RLPReader.sol\":{\"content\":\"// SPDX-License-Identifier: UNLICENSED\\n\\npragma solidity ^0.8.0;\\n\\n/*\\n * @author Hamdi Allam hamdi.allam97@gmail.com\\n *   Updated by Tuan Vu (tuanvd@gmail.com)\\n * Please reach out with any questions or concerns\\n */\\nlibrary RLPReader {\\n    uint8 constant STRING_SHORT_START = 0x80;\\n    uint8 constant STRING_LONG_START = 0xb8;\\n    uint8 constant LIST_SHORT_START = 0xc0;\\n    uint8 constant LIST_LONG_START = 0xf8;\\n    uint8 constant WORD_SIZE = 32;\\n\\n    struct RLPItem {\\n        uint256 len;\\n        uint256 memPtr;\\n    }\\n\\n    struct Iterator {\\n        RLPItem item; // Item that's being iterated over.\\n        uint256 nextPtr; // Position of the next item in the list.\\n    }\\n\\n    /*\\n     * @dev Returns the next element in the iteration. Reverts if it has not next element.\\n     * @param self The iterator.\\n     * @return The next element in the iteration.\\n     */\\n    function next(Iterator memory self) internal pure returns (RLPItem memory) {\\n        require(hasNext(self));\\n\\n        uint256 ptr = self.nextPtr;\\n        uint256 itemLength = _itemLength(ptr);\\n        self.nextPtr = ptr + itemLength;\\n\\n        return RLPItem(itemLength, ptr);\\n    }\\n\\n    /*\\n     * @dev Returns true if the iteration has more elements.\\n     * @param self The iterator.\\n     * @return true if the iteration has more elements.\\n     */\\n    function hasNext(Iterator memory self) internal pure returns (bool) {\\n        RLPItem memory item = self.item;\\n        return self.nextPtr < item.memPtr + item.len;\\n    }\\n\\n    /*\\n     * @param item RLP encoded bytes\\n     */\\n    function toRlpItem(bytes memory item)\\n        internal\\n        pure\\n        returns (RLPItem memory)\\n    {\\n        uint256 memPtr;\\n        assembly {\\n            memPtr := add(item, 0x20)\\n        }\\n\\n        return RLPItem(item.length, memPtr);\\n    }\\n\\n    /*\\n     * @dev Create an iterator. Reverts if item is not a list.\\n     * @param self The RLP item.\\n     * @return An 'Iterator' over the item.\\n     */\\n    function iterator(RLPItem memory self)\\n        internal\\n        pure\\n        returns (Iterator memory)\\n    {\\n        require(isList(self));\\n\\n        uint256 ptr = self.memPtr + _payloadOffset(self.memPtr);\\n        return Iterator(self, ptr);\\n    }\\n\\n    /*\\n     * @param item RLP encoded bytes\\n     */\\n    function rlpLen(RLPItem memory item) internal pure returns (uint256) {\\n        return item.len;\\n    }\\n\\n    /*\\n     * @param item RLP encoded bytes\\n     */\\n    function payloadLen(RLPItem memory item) internal pure returns (uint256) {\\n        return item.len - _payloadOffset(item.memPtr);\\n    }\\n\\n    /*\\n     * @param item RLP encoded list in bytes\\n     */\\n    function toList(RLPItem memory item)\\n        internal\\n        pure\\n        returns (RLPItem[] memory)\\n    {\\n        require(isList(item));\\n\\n        uint256 items = numItems(item);\\n        RLPItem[] memory result = new RLPItem[](items);\\n\\n        uint256 memPtr = item.memPtr + _payloadOffset(item.memPtr);\\n        uint256 dataLen;\\n        for (uint256 i = 0; i < items; i++) {\\n            dataLen = _itemLength(memPtr);\\n            result[i] = RLPItem(dataLen, memPtr);\\n            memPtr = memPtr + dataLen;\\n        }\\n\\n        return result;\\n    }\\n\\n    // @return indicator whether encoded payload is a list. negate this function call for isData.\\n    function isList(RLPItem memory item) internal pure returns (bool) {\\n        if (item.len == 0) return false;\\n\\n        uint8 byte0;\\n        uint256 memPtr = item.memPtr;\\n        assembly {\\n            byte0 := byte(0, mload(memPtr))\\n        }\\n\\n        if (byte0 < LIST_SHORT_START) return false;\\n        return true;\\n    }\\n\\n    /** RLPItem conversions into data types **/\\n\\n    // @returns raw rlp encoding in bytes\\n    function toRlpBytes(RLPItem memory item)\\n        internal\\n        pure\\n        returns (bytes memory)\\n    {\\n        bytes memory result = new bytes(item.len);\\n        if (result.length == 0) return result;\\n\\n        uint256 ptr;\\n        assembly {\\n            ptr := add(0x20, result)\\n        }\\n\\n        copy(item.memPtr, ptr, item.len);\\n        return result;\\n    }\\n\\n    // any non-zero byte is considered true\\n    function toBoolean(RLPItem memory item) internal pure returns (bool) {\\n        require(item.len == 1);\\n        uint256 result;\\n        uint256 memPtr = item.memPtr;\\n        assembly {\\n            result := byte(0, mload(memPtr))\\n        }\\n\\n        return result == 0 ? false : true;\\n    }\\n\\n    function toAddress(RLPItem memory item) internal pure returns (address) {\\n        // 1 byte for the length prefix\\n        require(item.len == 21);\\n\\n        return address(uint160(toUint(item)));\\n        // return address(toUint(item));\\n    }\\n\\n    function toUint(RLPItem memory item) internal pure returns (uint256) {\\n        require(item.len > 0 && item.len <= 33);\\n\\n        uint256 offset = _payloadOffset(item.memPtr);\\n        uint256 len = item.len - offset;\\n\\n        uint256 result;\\n        uint256 memPtr = item.memPtr + offset;\\n        assembly {\\n            result := mload(memPtr)\\n\\n            // shfit to the correct location if neccesary\\n            if lt(len, 32) {\\n                result := div(result, exp(256, sub(32, len)))\\n            }\\n        }\\n\\n        return result;\\n    }\\n\\n    // enforces 32 byte length\\n    function toUintStrict(RLPItem memory item) internal pure returns (uint256) {\\n        // one byte prefix\\n        require(item.len == 33);\\n\\n        uint256 result;\\n        uint256 memPtr = item.memPtr + 1;\\n        assembly {\\n            result := mload(memPtr)\\n        }\\n\\n        return result;\\n    }\\n\\n    function toBytes(RLPItem memory item) internal pure returns (bytes memory) {\\n        require(item.len > 0);\\n\\n        uint256 offset = _payloadOffset(item.memPtr);\\n        uint256 len = item.len - offset;\\n        // data length\\n        bytes memory result = new bytes(len);\\n\\n        uint256 destPtr;\\n        assembly {\\n            destPtr := add(0x20, result)\\n        }\\n\\n        copy(item.memPtr + offset, destPtr, len);\\n        return result;\\n    }\\n\\n    function toRlpBytesHash(RLPItem memory item)\\n        internal\\n        pure\\n        returns (bytes32 _hash)\\n    {\\n        require(item.len > 0);\\n        uint256 len = item.len;\\n        uint256 ptr = item.memPtr;\\n        assembly {\\n            _hash := keccak256(ptr, len)\\n        }\\n    }\\n\\n    function toBytes32(RLPItem memory item) internal pure returns (bytes32) {\\n        return _bytesToBytes32(toBytes(item), 0);\\n    }\\n\\n    /*\\n     * Private Helpers\\n     */\\n\\n    // @return number of payload items inside an encoded list.\\n    function numItems(RLPItem memory item) internal pure returns (uint256) {\\n        if (item.len == 0) return 0;\\n\\n        uint256 count = 0;\\n        uint256 currPtr = item.memPtr + _payloadOffset(item.memPtr);\\n        uint256 endPtr = item.memPtr + item.len;\\n        while (currPtr < endPtr) {\\n            currPtr = currPtr + _itemLength(currPtr);\\n            // skip over an item\\n            count++;\\n        }\\n\\n        return count;\\n    }\\n\\n    // @return entire rlp item byte length\\n    function _itemLength(uint256 memPtr) private pure returns (uint256) {\\n        uint256 itemLen;\\n        uint256 byte0;\\n        assembly {\\n            byte0 := byte(0, mload(memPtr))\\n        }\\n\\n        if (byte0 < STRING_SHORT_START) itemLen = 1;\\n        else if (byte0 < STRING_LONG_START)\\n            itemLen = byte0 - STRING_SHORT_START + 1;\\n        else if (byte0 < LIST_SHORT_START) {\\n            assembly {\\n                let byteLen := sub(byte0, 0xb7) // # of bytes the actual length is\\n                memPtr := add(memPtr, 1) // skip over the first byte\\n\\n                /* 32 byte word size */\\n                let dataLen := div(mload(memPtr), exp(256, sub(32, byteLen))) // right shifting to get the len\\n                itemLen := add(dataLen, add(byteLen, 1))\\n            }\\n        } else if (byte0 < LIST_LONG_START) {\\n            itemLen = byte0 - LIST_SHORT_START + 1;\\n        } else {\\n            assembly {\\n                let byteLen := sub(byte0, 0xf7)\\n                memPtr := add(memPtr, 1)\\n\\n                let dataLen := div(mload(memPtr), exp(256, sub(32, byteLen))) // right shifting to the correct length\\n                itemLen := add(dataLen, add(byteLen, 1))\\n            }\\n        }\\n\\n        return itemLen;\\n    }\\n\\n    // @return number of bytes until the data\\n    function _payloadOffset(uint256 memPtr) private pure returns (uint256) {\\n        uint256 byte0;\\n        assembly {\\n            byte0 := byte(0, mload(memPtr))\\n        }\\n\\n        if (byte0 < STRING_SHORT_START) return 0;\\n        else if (\\n            byte0 < STRING_LONG_START ||\\n            (byte0 >= LIST_SHORT_START && byte0 < LIST_LONG_START)\\n        ) return 1;\\n        else if (byte0 < LIST_SHORT_START)\\n            // being explicit\\n            return byte0 - (STRING_LONG_START - 1) + 1;\\n        else return byte0 - (LIST_LONG_START - 1) + 1;\\n    }\\n\\n    /*\\n     * @param src Pointer to source\\n     * @param dest Pointer to destination\\n     * @param len Amount of memory to copy from the source\\n     */\\n    function copy(\\n        uint256 src,\\n        uint256 dest,\\n        uint256 len\\n    ) private pure {\\n        if (len == 0) return;\\n\\n        // copy as many word sizes as possible\\n        for (; len >= WORD_SIZE; len -= WORD_SIZE) {\\n            assembly {\\n                mstore(dest, mload(src))\\n            }\\n\\n            src += WORD_SIZE;\\n            dest += WORD_SIZE;\\n        }\\n\\n        // left over bytes. Mask is used to remove unwanted bytes from the word\\n        if (len > 0) {\\n            if (len >= WORD_SIZE) {\\n                len = WORD_SIZE - 1;\\n            }\\n            uint256 mask = 256**(WORD_SIZE - len) - 1;\\n            assembly {\\n                let srcpart := and(mload(src), not(mask)) // zero out src\\n                let destpart := and(mload(dest), mask) // retrieve the bytes\\n                mstore(dest, or(destpart, srcpart))\\n            }\\n        }\\n    }\\n\\n    /*\\n     * @param convert a memory bytes to byte32\\n     */\\n    function _bytesToBytes32(bytes memory b, uint256 offset)\\n        private\\n        pure\\n        returns (bytes32)\\n    {\\n        bytes32 out;\\n\\n        for (uint256 i = 0; i < 32; i++) {\\n            out |= bytes32(b[offset + i] & 0xFF) >> (i * 8);\\n        }\\n        return out;\\n    }\\n\\n    /*\\n     * @param get the RLP item by index. save gas.\\n     */\\n    function safeGetItemByIndex(RLPItem memory item, uint256 idx)\\n        internal\\n        pure\\n        returns (RLPItem memory)\\n    {\\n        require(isList(item), \\\"RLPDecoder iterator is not a list\\\");\\n\\n        uint256 endPtr = item.memPtr + item.len;\\n\\n        uint256 memPtr = item.memPtr + _payloadOffset(item.memPtr);\\n        uint256 dataLen;\\n        for (uint256 i = 0; i < idx; i++) {\\n            dataLen = _itemLength(memPtr);\\n            memPtr = memPtr + dataLen;\\n        }\\n        dataLen = _itemLength(memPtr);\\n\\n        require(memPtr + dataLen <= endPtr, \\\"RLP item overflow\\\");\\n        return RLPItem(dataLen, memPtr);\\n    }\\n}\\n\",\"keccak256\":\"0x4ef97d3cceff98778c4f0e140aa73550fed8eeed0d926b958ac08a94bde546b7\",\"license\":\"UNLICENSED\"},\"contracts/lib/SafeCast.sol\":{\"content\":\"// SPDX-License-Identifier: UNLICENSED\\n\\npragma solidity ^0.8.0;\\n\\nlibrary SafeCast {\\n    function toUint200(uint256 value) internal pure returns (uint200) {\\n        require(value < 2**200, \\\"value does not fit in 200 bits\\\");\\n        return uint200(value);\\n    }\\n\\n    function toUint128(uint256 value) internal pure returns (uint128) {\\n        require(value < 2**128, \\\"value does not fit in 128 bits\\\");\\n        return uint128(value);\\n    }\\n\\n    function toUint40(uint256 value) internal pure returns (uint40) {\\n        require(value < 2**40, \\\"value does not fit in 40 bits\\\");\\n        return uint40(value);\\n    }\\n\\n    function toUint8(uint256 value) internal pure returns (uint8) {\\n        require(value < 2**8, \\\"value does not fit in 8 bits\\\");\\n        return uint8(value);\\n    }\\n}\",\"keccak256\":\"0x23de991c1e5ae0b798c07fdcf5a326e8b8ef596d2ba9d9b940064cb07f6ed9db\",\"license\":\"UNLICENSED\"}},\"version\":1}",
  "bytecode": "0x608060405234801561001057600080fd5b506123b8806100206000396000f3fe608060405234801561001057600080fd5b506004361061012c5760003560e01c806391d14854116100ad578063b0b731ed11610071578063b0b731ed146102e0578063cdb0f73a146102e9578063d03684d0146102fc578063d547741f14610304578063f38918401461031757600080fd5b806391d1485414610211578063926d7d7f146102245780639d82dd6314610239578063a05ee81b1461024c578063a217fddf146102d857600080fd5b806336568abe116100f457806336568abe146101ba5780634628fdcd146101cd5780634e056005146101e05780635c975abb146101f35780635e1fab0f146101fe57600080fd5b806301ffc9a71461013157806306220d7514610159578063242e39701461016e578063248a9ca3146101765780632f2ff15d146101a7575b600080fd5b61014461013f366004611da1565b610345565b60405190151581526020015b60405180910390f35b61016c610167366004611eaa565b61037c565b005b61016c61056b565b610199610184366004611f8b565b60009081526097602052604090206001015490565b604051908152602001610150565b61016c6101b5366004611fa4565b6105a5565b61016c6101c8366004611fa4565b6105cf565b61016c6101db366004611fd0565b61064d565b61016c6101ee366004611f8b565b6108d6565b60335460ff16610144565b61016c61020c36600461200d565b610951565b61014461021f366004611fa4565b6109e1565b61019960008051602061236383398151915281565b61016c61024736600461200d565b610a0c565b61025f61025a366004612028565b610ae8565b6040516101509190600061014082019050825182526020830151602083015260408301516040830152606083015160608301526080830151608083015260a083015160a083015260c083015160c083015260e083015160e083015261010080840151818401525061012080840151818401525092915050565b610199600081565b61019960e15481565b61016c6102f736600461200d565b610c86565b61016c610d63565b61016c610312366004611fa4565b610d92565b610144610325366004612028565b600091825260df6020908152604080842092845291905290205460ff1690565b60006001600160e01b03198216637965db0b60e01b148061037657506301ffc9a760e01b6001600160e01b03198316145b92915050565b60006103886001610db7565b905080156103a0576000805461ff0019166101001790555b60006103ab85610e44565b60208181015160c955606082015160ca55608082015160cb5560a082015160cc5561012082015160cd5561020082015160ce5561022082015160cf5561018082015160d055610320820151015190915060d1908155815160d29081556102008301805160e1819055600090815260dd6020908152604080832061012088018051825460018082018555938752858720015551845260de835281842060c954815560ca548183015560cb54600282015560cc54600382015560cd54600482015560ce54600582015560cf54600682015560d05460078201558754600882015595546009909601959095559251825260df815282822094548252939093528220805460ff19908116909217905560e0805490911660ff86161790556104ce90336112f7565b60005b845181101561051d5761050b6000805160206123638339815191528683815181106104fe576104fe61204a565b60200260200101516105a5565b8061051581612076565b9150506104d1565b50508015610565576000805461ff0019169055604051600181527f7f26b83ff96e1f2b6a682f133852f6798a09c465da95921460cefb38474024989060200160405180910390a15b50505050565b6105766000336109e1565b61059b5760405162461bcd60e51b815260040161059290612091565b60405180910390fd5b6105a3611301565b565b6000828152609760205260409020600101546105c081611399565b6105ca83836113a3565b505050565b6001600160a01b038116331461063f5760405162461bcd60e51b815260206004820152602f60248201527f416363657373436f6e74726f6c3a2063616e206f6e6c792072656e6f756e636560448201526e103937b632b9903337b91039b2b63360891b6064820152608401610592565b6106498282611429565b5050565b610665600080516020612363833981519152336109e1565b6106b15760405162461bcd60e51b815260206004820181905260248201527f73656e64657220646f65736e277420686176652072656c6179657220726f6c656044820152606401610592565b60335460ff16156106f75760405162461bcd60e51b815260206004820152601060248201526f14185d5cd8589b194e881c185d5cd95960821b6044820152606401610592565b61070c61070762278d00426120c8565b611490565b600061071782610e44565b9050610721611d1f565b602082810151825260608084015183830152608080850151604085015260a08086015192850192909252610120850151908401526102008401519083015261022083015160c083015261018083015160e083015261032083015101516101008201908152825161012080840191825261020085018051600090815260dd602090815260408083209489018051865460018181018955978652848620015551835260de825280832088518155828901805182880155828a018051600284015560608b018051600385015560808c018051600486015560a08d018051600587015560c08e018051600688015560e08f01805160078901558e5160088901558d516009909801979097559951895260df88528689208d518a5290975296859020805460ff191690991790985590519051965194519351955191519851975192517ed0e403b7c92f922cadd67ebdffb53f40b9d84bca356c7a3f641a589e64fab4996108c99992989794909291988952602089019790975260408801959095526060870193909352608086019190915260a085015260c084015260e08301526101008201526101200190565b60405180910390a1505050565b6108e16000336109e1565b6108fd5760405162461bcd60e51b815260040161059290612091565b61090681611561565b60e0805460ff191660ff929092169190911790556040518181527fa20d6b84cd798a24038be305eff8a45ca82ef54a2aa2082005d8e14c0a4746c8906020015b60405180910390a150565b61095c6000336109e1565b6109785760405162461bcd60e51b815260040161059290612091565b336001600160a01b03821614156109c85760405162461bcd60e51b815260206004820152601460248201527331b0b73737ba103932b737bab731b29039b2b63360611b6044820152606401610592565b6109d36000826105a5565b6109de6000336105cf565b50565b60009182526097602090815260408084206001600160a01b0393909316845291905290205460ff1690565b610a176000336109e1565b610a335760405162461bcd60e51b815260040161059290612091565b610a4b600080516020612363833981519152826109e1565b610a975760405162461bcd60e51b815260206004820152601f60248201527f6164647220646f65736e277420686176652072656c6179657220726f6c6521006044820152606401610592565b610aaf60008051602061236383398151915282610d92565b6040516001600160a01b03821681527f10e1f7ce9fd7d1b90a66d13a2ab3cb8dd7f29f3f8d520b143b063ccfbab6906b90602001610946565b610af0611d1f565b600082815260dd6020526040902054610b4b5760405162461bcd60e51b815260206004820152601860248201527f6e6f20636865636b706f696e747320666f722065706f636800000000000000006044820152606401610592565b600082815260dd6020908152604080832080548251818502810185019093528083529192909190830182828015610ba157602002820191906000526020600020905b815481526020019060010190808311610b8d575b505050505090506000805b8251811015610bfd576000838281518110610bc957610bc961204a565b602002602001015190508681118015610be157508281105b15610bea578092505b5080610bf581612076565b915050610bac565b50600090815260de6020908152604091829020825161014081018452815481526001820154928101929092526002810154928201929092526003820154606082015260048201546080820152600582015460a0820152600682015460c0820152600782015460e08201526008820154610100820152600990910154610120820152949350505050565b610c916000336109e1565b610cad5760405162461bcd60e51b815260040161059290612091565b610cc5600080516020612363833981519152826109e1565b15610d125760405162461bcd60e51b815260206004820152601e60248201527f6164647220616c7265616479206861732072656c6179657220726f6c652100006044820152606401610592565b610d2a600080516020612363833981519152826105a5565b6040516001600160a01b03821681527f03580ee9f53a62b7cb409a2cb56f9be87747dd15017afc5cef6eef321e4fb2c590602001610946565b610d6e6000336109e1565b610d8a5760405162461bcd60e51b815260040161059290612091565b6105a36115b8565b600082815260976020526040902060010154610dad81611399565b6105ca8383611429565b60008054610100900460ff1615610dfe578160ff166001148015610dda5750303b155b610df65760405162461bcd60e51b8152600401610592906120df565b506000919050565b60005460ff808416911610610e255760405162461bcd60e51b8152600401610592906120df565b506000805460ff191660ff92909216919091179055600190565b919050565b610f2b604051806103400160405280600080191681526020016000801916815260200160006001600160a01b0316815260200160008019168152602001600080191681526020016000801916815260200160008019168152602001600080191681526020016060815260200160008152602001600081526020016000815260200160008152602001606081526020016000801916815260200160008152602001600081526020016000815260200160608152602001606081526020016060815260200160608152602001606081526020016060815260200160608152602001606081525090565b6000610f66610f618460408051808201825260008082526020918201528151808301909252825182529182019181019190915290565b611632565b9050610f718161169e565b50610f7b8161169e565b50610f88610f618261169e565b905060005b610f96826116fb565b156112e55780610fbb57610fb1610fac8361169e565b61171f565b60208401526112d3565b8060011415610fe857610fd5610fd08361169e565b61179a565b6001600160a01b031660408401526112d3565b806002141561100757610ffd610fac8361169e565b60608401526112d3565b80600314156110265761101c610fac8361169e565b60808401526112d3565b80600414156110455761103b610fac8361169e565b60a08401526112d3565b80600514156110645761105a610fac8361169e565b60c08401526112d3565b806006141561108357611079610fac8361169e565b60e08401526112d3565b80600714156110a85761109d6110988361169e565b6117b4565b6101008401526112d3565b80600814156110c8576110bd610fac8361169e565b6101208401526112d3565b80600914156110e8576110dd610fac8361169e565b6101408401526112d3565b80600a1415611108576110fd610fac8361169e565b6101608401526112d3565b80600b14156111285761111d610fac8361169e565b6101808401526112d3565b80600c14156111485761113d6110988361169e565b6101a08401526112d3565b80600d14156111685761115d610fac8361169e565b6101c08401526112d3565b80600e14156111885761117d610fac8361169e565b6101e08401526112d3565b80600f14156111a85761119d610fac8361169e565b6102008401526112d3565b80601014156111c8576111bd610fac8361169e565b6102208401526112d3565b80601114156111e8576111dd6110988361169e565b6102408401526112d3565b8060121415611208576111fd6110988361169e565b6102608401526112d3565b80601314156112285761121d6110988361169e565b6102808401526112d3565b80601414156112485761123d6110988361169e565b6102a08401526112d3565b80601514156112685761125d6110988361169e565b6102c08401526112d3565b80601614156112885761127d6110988361169e565b6102e08401526112d3565b80601714156112a85761129d6110988361169e565b6103008401526112d3565b80601814156112c8576112bd6110988361169e565b6103208401526112d3565b6112d18261169e565b505b806112dd81612076565b915050610f8d565b50508151602090920191909120815290565b61064982826113a3565b60335460ff16156113475760405162461bcd60e51b815260206004820152601060248201526f14185d5cd8589b194e881c185d5cd95960821b6044820152606401610592565b6033805460ff191660011790557f62e78cea01bee320cd4e420270b5ea74000d11b0c9f74754ebdbfc544b05a25861137c3390565b6040516001600160a01b03909116815260200160405180910390a1565b6109de8133611851565b6113ad82826109e1565b6106495760008281526097602090815260408083206001600160a01b03851684529091529020805460ff191660011790556113e53390565b6001600160a01b0316816001600160a01b0316837f2f8788117e7eff1d82e926ec794901d17c78024a50270940304540a733656f0d60405160405180910390a45050565b61143382826109e1565b156106495760008281526097602090815260408083206001600160a01b0385168085529252808320805460ff1916905551339285917ff6391f5c32d9c69d2a47ea670b442974b53935d1edc7fd64eb21e047a839171b9190a45050565b60e154600081815260dd60205260409020546114aa575050565b60005b6002811015611550576000826114c281612076565b600081815260dd602052604090208054919550919250806114e557505050611550565b8560de6000846114f66001866120c8565b815481106115065761150661204a565b9060005260206000200154815260200190815260200160002060070154111561153157505050611550565b61153a836118b5565b505050808061154890612076565b9150506114ad565b5060e1548111156106495760e15550565b600061010082106115b45760405162461bcd60e51b815260206004820152601c60248201527f76616c756520646f6573206e6f742066697420696e20382062697473000000006044820152606401610592565b5090565b60335460ff166116015760405162461bcd60e51b815260206004820152601460248201527314185d5cd8589b194e881b9bdd081c185d5cd95960621b6044820152606401610592565b6033805460ff191690557f5db9ee0a495bf2e6ff9c91a7834c1ba4fdd244a5e8aa4e537bd38aeae4b073aa3361137c565b604080516080810182526000918101828152606082018390528152602081019190915261165e82611986565b61166757600080fd5b600061167683602001516119bf565b8360200151611685919061212d565b6040805180820190915293845260208401525090919050565b60408051808201909152600080825260208201526116bb826116fb565b6116c457600080fd5b602082015160006116d482611a41565b90506116e0818361212d565b60209485015260408051808201909152908152928301525090565b805180516020820151600092916117119161212d565b836020015110915050919050565b80516000901580159061173457508151602110155b61173d57600080fd5b600061174c83602001516119bf565b9050600081846000015161176091906120c8565b9050600080838660200151611775919061212d565b905080519150602083101561179157826020036101000a820491505b50949350505050565b80516000906015146117ab57600080fd5b6103768261171f565b80516060906117c257600080fd5b60006117d183602001516119bf565b905060008184600001516117e591906120c8565b905060008167ffffffffffffffff81111561180257611802611dcb565b6040519080825280601f01601f19166020018201604052801561182c576020820181803683370190505b509050600081602001905061179184876020015161184a919061212d565b8285611aea565b61185b82826109e1565b61064957611873816001600160a01b03166014611b83565b61187e836020611b83565b60405160200161188f929190612171565b60408051601f198184030181529082905262461bcd60e51b8252610592916004016121e6565b600081815260dd60205260408120905b815481101561196e5760008282815481106118e2576118e261204a565b6000918252602080832090910154825260de815260408083206008810180548583556001830186905560028301869055600383018690556004830186905560058301869055600683018690556007830186905590859055600990910184905587845260df83528184209084529091529020805460ff19169055508061196681612076565b9150506118c5565b50600082815260dd6020526040812061064991611d73565b805160009061199757506000919050565b6020820151805160001a9060c08210156119b5575060009392505050565b5060019392505050565b8051600090811a60808110156119d85750600092915050565b60b88110806119f3575060c081108015906119f3575060f881105b15611a015750600192915050565b60c0811015611a3557611a16600160b8612219565b611a239060ff16826120c8565b611a2e90600161212d565b9392505050565b611a16600160f8612219565b80516000908190811a6080811015611a5c5760019150611ae3565b60b8811015611a8257611a706080826120c8565b611a7b90600161212d565b9150611ae3565b60c0811015611aaf5760b78103600185019450806020036101000a85510460018201810193505050611ae3565b60f8811015611ac357611a7060c0826120c8565b60f78103600185019450806020036101000a855104600182018101935050505b5092915050565b80611af457505050565b60208110611b2c5782518252611b0b60208461212d565b9250611b1860208361212d565b9150611b256020826120c8565b9050611af4565b80156105ca5760208110611b4c57611b4660016020612219565b60ff1690505b60006001611b5b8360206120c8565b611b6790610100612320565b611b7191906120c8565b84518451821691191617835250505050565b60606000611b9283600261232c565b611b9d90600261212d565b67ffffffffffffffff811115611bb557611bb5611dcb565b6040519080825280601f01601f191660200182016040528015611bdf576020820181803683370190505b509050600360fc1b81600081518110611bfa57611bfa61204a565b60200101906001600160f81b031916908160001a905350600f60fb1b81600181518110611c2957611c2961204a565b60200101906001600160f81b031916908160001a9053506000611c4d84600261232c565b611c5890600161212d565b90505b6001811115611cd0576f181899199a1a9b1b9c1cb0b131b232b360811b85600f1660108110611c8c57611c8c61204a565b1a60f81b828281518110611ca257611ca261204a565b60200101906001600160f81b031916908160001a90535060049490941c93611cc98161234b565b9050611c5b565b508315611a2e5760405162461bcd60e51b815260206004820181905260248201527f537472696e67733a20686578206c656e67746820696e73756666696369656e746044820152606401610592565b6040805161014081018252600080825260208201819052918101829052606081018290526080810182905260a0810182905260c0810182905260e08101829052610100810182905261012081019190915290565b50805460008255906000526020600020908101906109de91905b808211156115b45760008155600101611d8d565b600060208284031215611db357600080fd5b81356001600160e01b031981168114611a2e57600080fd5b634e487b7160e01b600052604160045260246000fd5b604051601f8201601f1916810167ffffffffffffffff81118282101715611e0a57611e0a611dcb565b604052919050565b600082601f830112611e2357600080fd5b813567ffffffffffffffff811115611e3d57611e3d611dcb565b611e50601f8201601f1916602001611de1565b818152846020838601011115611e6557600080fd5b816020850160208301376000918101602001919091529392505050565b80356001600160a01b0381168114610e3f57600080fd5b803560ff81168114610e3f57600080fd5b600080600060608486031215611ebf57600080fd5b833567ffffffffffffffff80821115611ed757600080fd5b611ee387838801611e12565b9450602091508186013581811115611efa57600080fd5b8601601f81018813611f0b57600080fd5b803582811115611f1d57611f1d611dcb565b8060051b9250611f2e848401611de1565b818152928201840192848101908a851115611f4857600080fd5b928501925b84841015611f6d57611f5e84611e82565b82529285019290850190611f4d565b809750505050505050611f8260408501611e99565b90509250925092565b600060208284031215611f9d57600080fd5b5035919050565b60008060408385031215611fb757600080fd5b82359150611fc760208401611e82565b90509250929050565b600060208284031215611fe257600080fd5b813567ffffffffffffffff811115611ff957600080fd5b61200584828501611e12565b949350505050565b60006020828403121561201f57600080fd5b611a2e82611e82565b6000806040838503121561203b57600080fd5b50508035926020909101359150565b634e487b7160e01b600052603260045260246000fd5b634e487b7160e01b600052601160045260246000fd5b600060001982141561208a5761208a612060565b5060010190565b6020808252601e908201527f73656e64657220646f65736e277420686176652061646d696e20726f6c650000604082015260600190565b6000828210156120da576120da612060565b500390565b6020808252602e908201527f496e697469616c697a61626c653a20636f6e747261637420697320616c72656160408201526d191e481a5b9a5d1a585b1a5e995960921b606082015260800190565b6000821982111561214057612140612060565b500190565b60005b83811015612160578181015183820152602001612148565b838111156105655750506000910152565b7f416363657373436f6e74726f6c3a206163636f756e74200000000000000000008152600083516121a9816017850160208801612145565b7001034b99036b4b9b9b4b733903937b6329607d1b60179184019182015283516121da816028840160208801612145565b01602801949350505050565b6020815260008251806020840152612205816040850160208701612145565b601f01601f19169190910160400192915050565b600060ff821660ff84168082101561223357612233612060565b90039392505050565b600181815b8085111561227757816000190482111561225d5761225d612060565b8085161561226a57918102915b93841c9390800290612241565b509250929050565b60008261228e57506001610376565b8161229b57506000610376565b81600181146122b157600281146122bb576122d7565b6001915050610376565b60ff8411156122cc576122cc612060565b50506001821b610376565b5060208310610133831016604e8410600b84101617156122fa575081810a610376565b612304838361223c565b806000190482111561231857612318612060565b029392505050565b6000611a2e838361227f565b600081600019048311821515161561234657612346612060565b500290565b60008161235a5761235a612060565b50600019019056fee2b7fb3b832174769106daebcfd6d1970523240dda11281102db9363b83b0dc4a2646970667358221220b8849597694078f675fa039402a589afa6d7aad9db6f6c35030a60c35ec7f7f764736f6c63430008090033",
  "deployedBytecode": "0x608060405234801561001057600080fd5b506004361061012c5760003560e01c806391d14854116100ad578063b0b731ed11610071578063b0b731ed146102e0578063cdb0f73a146102e9578063d03684d0146102fc578063d547741f14610304578063f38918401461031757600080fd5b806391d1485414610211578063926d7d7f146102245780639d82dd6314610239578063a05ee81b1461024c578063a217fddf146102d857600080fd5b806336568abe116100f457806336568abe146101ba5780634628fdcd146101cd5780634e056005146101e05780635c975abb146101f35780635e1fab0f146101fe57600080fd5b806301ffc9a71461013157806306220d7514610159578063242e39701461016e578063248a9ca3146101765780632f2ff15d146101a7575b600080fd5b61014461013f366004611da1565b610345565b60405190151581526020015b60405180910390f35b61016c610167366004611eaa565b61037c565b005b61016c61056b565b610199610184366004611f8b565b60009081526097602052604090206001015490565b604051908152602001610150565b61016c6101b5366004611fa4565b6105a5565b61016c6101c8366004611fa4565b6105cf565b61016c6101db366004611fd0565b61064d565b61016c6101ee366004611f8b565b6108d6565b60335460ff16610144565b61016c61020c36600461200d565b610951565b61014461021f366004611fa4565b6109e1565b61019960008051602061236383398151915281565b61016c61024736600461200d565b610a0c565b61025f61025a366004612028565b610ae8565b6040516101509190600061014082019050825182526020830151602083015260408301516040830152606083015160608301526080830151608083015260a083015160a083015260c083015160c083015260e083015160e083015261010080840151818401525061012080840151818401525092915050565b610199600081565b61019960e15481565b61016c6102f736600461200d565b610c86565b61016c610d63565b61016c610312366004611fa4565b610d92565b610144610325366004612028565b600091825260df6020908152604080842092845291905290205460ff1690565b60006001600160e01b03198216637965db0b60e01b148061037657506301ffc9a760e01b6001600160e01b03198316145b92915050565b60006103886001610db7565b905080156103a0576000805461ff0019166101001790555b60006103ab85610e44565b60208181015160c955606082015160ca55608082015160cb5560a082015160cc5561012082015160cd5561020082015160ce5561022082015160cf5561018082015160d055610320820151015190915060d1908155815160d29081556102008301805160e1819055600090815260dd6020908152604080832061012088018051825460018082018555938752858720015551845260de835281842060c954815560ca548183015560cb54600282015560cc54600382015560cd54600482015560ce54600582015560cf54600682015560d05460078201558754600882015595546009909601959095559251825260df815282822094548252939093528220805460ff19908116909217905560e0805490911660ff86161790556104ce90336112f7565b60005b845181101561051d5761050b6000805160206123638339815191528683815181106104fe576104fe61204a565b60200260200101516105a5565b8061051581612076565b9150506104d1565b50508015610565576000805461ff0019169055604051600181527f7f26b83ff96e1f2b6a682f133852f6798a09c465da95921460cefb38474024989060200160405180910390a15b50505050565b6105766000336109e1565b61059b5760405162461bcd60e51b815260040161059290612091565b60405180910390fd5b6105a3611301565b565b6000828152609760205260409020600101546105c081611399565b6105ca83836113a3565b505050565b6001600160a01b038116331461063f5760405162461bcd60e51b815260206004820152602f60248201527f416363657373436f6e74726f6c3a2063616e206f6e6c792072656e6f756e636560448201526e103937b632b9903337b91039b2b63360891b6064820152608401610592565b6106498282611429565b5050565b610665600080516020612363833981519152336109e1565b6106b15760405162461bcd60e51b815260206004820181905260248201527f73656e64657220646f65736e277420686176652072656c6179657220726f6c656044820152606401610592565b60335460ff16156106f75760405162461bcd60e51b815260206004820152601060248201526f14185d5cd8589b194e881c185d5cd95960821b6044820152606401610592565b61070c61070762278d00426120c8565b611490565b600061071782610e44565b9050610721611d1f565b602082810151825260608084015183830152608080850151604085015260a08086015192850192909252610120850151908401526102008401519083015261022083015160c083015261018083015160e083015261032083015101516101008201908152825161012080840191825261020085018051600090815260dd602090815260408083209489018051865460018181018955978652848620015551835260de825280832088518155828901805182880155828a018051600284015560608b018051600385015560808c018051600486015560a08d018051600587015560c08e018051600688015560e08f01805160078901558e5160088901558d516009909801979097559951895260df88528689208d518a5290975296859020805460ff191690991790985590519051965194519351955191519851975192517ed0e403b7c92f922cadd67ebdffb53f40b9d84bca356c7a3f641a589e64fab4996108c99992989794909291988952602089019790975260408801959095526060870193909352608086019190915260a085015260c084015260e08301526101008201526101200190565b60405180910390a1505050565b6108e16000336109e1565b6108fd5760405162461bcd60e51b815260040161059290612091565b61090681611561565b60e0805460ff191660ff929092169190911790556040518181527fa20d6b84cd798a24038be305eff8a45ca82ef54a2aa2082005d8e14c0a4746c8906020015b60405180910390a150565b61095c6000336109e1565b6109785760405162461bcd60e51b815260040161059290612091565b336001600160a01b03821614156109c85760405162461bcd60e51b815260206004820152601460248201527331b0b73737ba103932b737bab731b29039b2b63360611b6044820152606401610592565b6109d36000826105a5565b6109de6000336105cf565b50565b60009182526097602090815260408084206001600160a01b0393909316845291905290205460ff1690565b610a176000336109e1565b610a335760405162461bcd60e51b815260040161059290612091565b610a4b600080516020612363833981519152826109e1565b610a975760405162461bcd60e51b815260206004820152601f60248201527f6164647220646f65736e277420686176652072656c6179657220726f6c6521006044820152606401610592565b610aaf60008051602061236383398151915282610d92565b6040516001600160a01b03821681527f10e1f7ce9fd7d1b90a66d13a2ab3cb8dd7f29f3f8d520b143b063ccfbab6906b90602001610946565b610af0611d1f565b600082815260dd6020526040902054610b4b5760405162461bcd60e51b815260206004820152601860248201527f6e6f20636865636b706f696e747320666f722065706f636800000000000000006044820152606401610592565b600082815260dd6020908152604080832080548251818502810185019093528083529192909190830182828015610ba157602002820191906000526020600020905b815481526020019060010190808311610b8d575b505050505090506000805b8251811015610bfd576000838281518110610bc957610bc961204a565b602002602001015190508681118015610be157508281105b15610bea578092505b5080610bf581612076565b915050610bac565b50600090815260de6020908152604091829020825161014081018452815481526001820154928101929092526002810154928201929092526003820154606082015260048201546080820152600582015460a0820152600682015460c0820152600782015460e08201526008820154610100820152600990910154610120820152949350505050565b610c916000336109e1565b610cad5760405162461bcd60e51b815260040161059290612091565b610cc5600080516020612363833981519152826109e1565b15610d125760405162461bcd60e51b815260206004820152601e60248201527f6164647220616c7265616479206861732072656c6179657220726f6c652100006044820152606401610592565b610d2a600080516020612363833981519152826105a5565b6040516001600160a01b03821681527f03580ee9f53a62b7cb409a2cb56f9be87747dd15017afc5cef6eef321e4fb2c590602001610946565b610d6e6000336109e1565b610d8a5760405162461bcd60e51b815260040161059290612091565b6105a36115b8565b600082815260976020526040902060010154610dad81611399565b6105ca8383611429565b60008054610100900460ff1615610dfe578160ff166001148015610dda5750303b155b610df65760405162461bcd60e51b8152600401610592906120df565b506000919050565b60005460ff808416911610610e255760405162461bcd60e51b8152600401610592906120df565b506000805460ff191660ff92909216919091179055600190565b919050565b610f2b604051806103400160405280600080191681526020016000801916815260200160006001600160a01b0316815260200160008019168152602001600080191681526020016000801916815260200160008019168152602001600080191681526020016060815260200160008152602001600081526020016000815260200160008152602001606081526020016000801916815260200160008152602001600081526020016000815260200160608152602001606081526020016060815260200160608152602001606081526020016060815260200160608152602001606081525090565b6000610f66610f618460408051808201825260008082526020918201528151808301909252825182529182019181019190915290565b611632565b9050610f718161169e565b50610f7b8161169e565b50610f88610f618261169e565b905060005b610f96826116fb565b156112e55780610fbb57610fb1610fac8361169e565b61171f565b60208401526112d3565b8060011415610fe857610fd5610fd08361169e565b61179a565b6001600160a01b031660408401526112d3565b806002141561100757610ffd610fac8361169e565b60608401526112d3565b80600314156110265761101c610fac8361169e565b60808401526112d3565b80600414156110455761103b610fac8361169e565b60a08401526112d3565b80600514156110645761105a610fac8361169e565b60c08401526112d3565b806006141561108357611079610fac8361169e565b60e08401526112d3565b80600714156110a85761109d6110988361169e565b6117b4565b6101008401526112d3565b80600814156110c8576110bd610fac8361169e565b6101208401526112d3565b80600914156110e8576110dd610fac8361169e565b6101408401526112d3565b80600a1415611108576110fd610fac8361169e565b6101608401526112d3565b80600b14156111285761111d610fac8361169e565b6101808401526112d3565b80600c14156111485761113d6110988361169e565b6101a08401526112d3565b80600d14156111685761115d610fac8361169e565b6101c08401526112d3565b80600e14156111885761117d610fac8361169e565b6101e08401526112d3565b80600f14156111a85761119d610fac8361169e565b6102008401526112d3565b80601014156111c8576111bd610fac8361169e565b6102208401526112d3565b80601114156111e8576111dd6110988361169e565b6102408401526112d3565b8060121415611208576111fd6110988361169e565b6102608401526112d3565b80601314156112285761121d6110988361169e565b6102808401526112d3565b80601414156112485761123d6110988361169e565b6102a08401526112d3565b80601514156112685761125d6110988361169e565b6102c08401526112d3565b80601614156112885761127d6110988361169e565b6102e08401526112d3565b80601714156112a85761129d6110988361169e565b6103008401526112d3565b80601814156112c8576112bd6110988361169e565b6103208401526112d3565b6112d18261169e565b505b806112dd81612076565b915050610f8d565b50508151602090920191909120815290565b61064982826113a3565b60335460ff16156113475760405162461bcd60e51b815260206004820152601060248201526f14185d5cd8589b194e881c185d5cd95960821b6044820152606401610592565b6033805460ff191660011790557f62e78cea01bee320cd4e420270b5ea74000d11b0c9f74754ebdbfc544b05a25861137c3390565b6040516001600160a01b03909116815260200160405180910390a1565b6109de8133611851565b6113ad82826109e1565b6106495760008281526097602090815260408083206001600160a01b03851684529091529020805460ff191660011790556113e53390565b6001600160a01b0316816001600160a01b0316837f2f8788117e7eff1d82e926ec794901d17c78024a50270940304540a733656f0d60405160405180910390a45050565b61143382826109e1565b156106495760008281526097602090815260408083206001600160a01b0385168085529252808320805460ff1916905551339285917ff6391f5c32d9c69d2a47ea670b442974b53935d1edc7fd64eb21e047a839171b9190a45050565b60e154600081815260dd60205260409020546114aa575050565b60005b6002811015611550576000826114c281612076565b600081815260dd602052604090208054919550919250806114e557505050611550565b8560de6000846114f66001866120c8565b815481106115065761150661204a565b9060005260206000200154815260200190815260200160002060070154111561153157505050611550565b61153a836118b5565b505050808061154890612076565b9150506114ad565b5060e1548111156106495760e15550565b600061010082106115b45760405162461bcd60e51b815260206004820152601c60248201527f76616c756520646f6573206e6f742066697420696e20382062697473000000006044820152606401610592565b5090565b60335460ff166116015760405162461bcd60e51b815260206004820152601460248201527314185d5cd8589b194e881b9bdd081c185d5cd95960621b6044820152606401610592565b6033805460ff191690557f5db9ee0a495bf2e6ff9c91a7834c1ba4fdd244a5e8aa4e537bd38aeae4b073aa3361137c565b604080516080810182526000918101828152606082018390528152602081019190915261165e82611986565b61166757600080fd5b600061167683602001516119bf565b8360200151611685919061212d565b6040805180820190915293845260208401525090919050565b60408051808201909152600080825260208201526116bb826116fb565b6116c457600080fd5b602082015160006116d482611a41565b90506116e0818361212d565b60209485015260408051808201909152908152928301525090565b805180516020820151600092916117119161212d565b836020015110915050919050565b80516000901580159061173457508151602110155b61173d57600080fd5b600061174c83602001516119bf565b9050600081846000015161176091906120c8565b9050600080838660200151611775919061212d565b905080519150602083101561179157826020036101000a820491505b50949350505050565b80516000906015146117ab57600080fd5b6103768261171f565b80516060906117c257600080fd5b60006117d183602001516119bf565b905060008184600001516117e591906120c8565b905060008167ffffffffffffffff81111561180257611802611dcb565b6040519080825280601f01601f19166020018201604052801561182c576020820181803683370190505b509050600081602001905061179184876020015161184a919061212d565b8285611aea565b61185b82826109e1565b61064957611873816001600160a01b03166014611b83565b61187e836020611b83565b60405160200161188f929190612171565b60408051601f198184030181529082905262461bcd60e51b8252610592916004016121e6565b600081815260dd60205260408120905b815481101561196e5760008282815481106118e2576118e261204a565b6000918252602080832090910154825260de815260408083206008810180548583556001830186905560028301869055600383018690556004830186905560058301869055600683018690556007830186905590859055600990910184905587845260df83528184209084529091529020805460ff19169055508061196681612076565b9150506118c5565b50600082815260dd6020526040812061064991611d73565b805160009061199757506000919050565b6020820151805160001a9060c08210156119b5575060009392505050565b5060019392505050565b8051600090811a60808110156119d85750600092915050565b60b88110806119f3575060c081108015906119f3575060f881105b15611a015750600192915050565b60c0811015611a3557611a16600160b8612219565b611a239060ff16826120c8565b611a2e90600161212d565b9392505050565b611a16600160f8612219565b80516000908190811a6080811015611a5c5760019150611ae3565b60b8811015611a8257611a706080826120c8565b611a7b90600161212d565b9150611ae3565b60c0811015611aaf5760b78103600185019450806020036101000a85510460018201810193505050611ae3565b60f8811015611ac357611a7060c0826120c8565b60f78103600185019450806020036101000a855104600182018101935050505b5092915050565b80611af457505050565b60208110611b2c5782518252611b0b60208461212d565b9250611b1860208361212d565b9150611b256020826120c8565b9050611af4565b80156105ca5760208110611b4c57611b4660016020612219565b60ff1690505b60006001611b5b8360206120c8565b611b6790610100612320565b611b7191906120c8565b84518451821691191617835250505050565b60606000611b9283600261232c565b611b9d90600261212d565b67ffffffffffffffff811115611bb557611bb5611dcb565b6040519080825280601f01601f191660200182016040528015611bdf576020820181803683370190505b509050600360fc1b81600081518110611bfa57611bfa61204a565b60200101906001600160f81b031916908160001a905350600f60fb1b81600181518110611c2957611c2961204a565b60200101906001600160f81b031916908160001a9053506000611c4d84600261232c565b611c5890600161212d565b90505b6001811115611cd0576f181899199a1a9b1b9c1cb0b131b232b360811b85600f1660108110611c8c57611c8c61204a565b1a60f81b828281518110611ca257611ca261204a565b60200101906001600160f81b031916908160001a90535060049490941c93611cc98161234b565b9050611c5b565b508315611a2e5760405162461bcd60e51b815260206004820181905260248201527f537472696e67733a20686578206c656e67746820696e73756666696369656e746044820152606401610592565b6040805161014081018252600080825260208201819052918101829052606081018290526080810182905260a0810182905260c0810182905260e08101829052610100810182905261012081019190915290565b50805460008255906000526020600020908101906109de91905b808211156115b45760008155600101611d8d565b600060208284031215611db357600080fd5b81356001600160e01b031981168114611a2e57600080fd5b634e487b7160e01b600052604160045260246000fd5b604051601f8201601f1916810167ffffffffffffffff81118282101715611e0a57611e0a611dcb565b604052919050565b600082601f830112611e2357600080fd5b813567ffffffffffffffff811115611e3d57611e3d611dcb565b611e50601f8201601f1916602001611de1565b818152846020838601011115611e6557600080fd5b816020850160208301376000918101602001919091529392505050565b80356001600160a01b0381168114610e3f57600080fd5b803560ff81168114610e3f57600080fd5b600080600060608486031215611ebf57600080fd5b833567ffffffffffffffff80821115611ed757600080fd5b611ee387838801611e12565b9450602091508186013581811115611efa57600080fd5b8601601f81018813611f0b57600080fd5b803582811115611f1d57611f1d611dcb565b8060051b9250611f2e848401611de1565b818152928201840192848101908a851115611f4857600080fd5b928501925b84841015611f6d57611f5e84611e82565b82529285019290850190611f4d565b809750505050505050611f8260408501611e99565b90509250925092565b600060208284031215611f9d57600080fd5b5035919050565b60008060408385031215611fb757600080fd5b82359150611fc760208401611e82565b90509250929050565b600060208284031215611fe257600080fd5b813567ffffffffffffffff811115611ff957600080fd5b61200584828501611e12565b949350505050565b60006020828403121561201f57600080fd5b611a2e82611e82565b6000806040838503121561203b57600080fd5b50508035926020909101359150565b634e487b7160e01b600052603260045260246000fd5b634e487b7160e01b600052601160045260246000fd5b600060001982141561208a5761208a612060565b5060010190565b6020808252601e908201527f73656e64657220646f65736e277420686176652061646d696e20726f6c650000604082015260600190565b6000828210156120da576120da612060565b500390565b6020808252602e908201527f496e697469616c697a61626c653a20636f6e747261637420697320616c72656160408201526d191e481a5b9a5d1a585b1a5e995960921b606082015260800190565b6000821982111561214057612140612060565b500190565b60005b83811015612160578181015183820152602001612148565b838111156105655750506000910152565b7f416363657373436f6e74726f6c3a206163636f756e74200000000000000000008152600083516121a9816017850160208801612145565b7001034b99036b4b9b9b4b733903937b6329607d1b60179184019182015283516121da816028840160208801612145565b01602801949350505050565b6020815260008251806020840152612205816040850160208701612145565b601f01601f19169190910160400192915050565b600060ff821660ff84168082101561223357612233612060565b90039392505050565b600181815b8085111561227757816000190482111561225d5761225d612060565b8085161561226a57918102915b93841c9390800290612241565b509250929050565b60008261228e57506001610376565b8161229b57506000610376565b81600181146122b157600281146122bb576122d7565b6001915050610376565b60ff8411156122cc576122cc612060565b50506001821b610376565b5060208310610133831016604e8410600b84101617156122fa575081810a610376565b612304838361223c565b806000190482111561231857612318612060565b029392505050565b6000611a2e838361227f565b600081600019048311821515161561234657612346612060565b500290565b60008161235a5761235a612060565b50600019019056fee2b7fb3b832174769106daebcfd6d1970523240dda11281102db9363b83b0dc4a2646970667358221220b8849597694078f675fa039402a589afa6d7aad9db6f6c35030a60c35ec7f7f764736f6c63430008090033",
  "devdoc": {
    "kind": "dev",
    "methods": {
      "getRoleAdmin(bytes32)": {
        "details": "Returns the admin role that controls `role`. See {grantRole} and {revokeRole}. To change a role's admin, use {_setRoleAdmin}."
      },
      "grantRole(bytes32,address)": {
        "details": "Grants `role` to `account`. If `account` had not been already granted `role`, emits a {RoleGranted} event. Requirements: - the caller must have ``role``'s admin role."
      },
      "hasRole(bytes32,address)": {
        "details": "Returns `true` if `account` has been granted `role`."
      },
      "paused()": {
        "details": "Returns true if the contract is paused, and false otherwise."
      },
      "renounceRole(bytes32,address)": {
        "details": "Revokes `role` from the calling account. Roles are often managed via {grantRole} and {revokeRole}: this function's purpose is to provide a mechanism for accounts to lose their privileges if they are compromised (such as when a trusted device is misplaced). If the calling account had been revoked `role`, emits a {RoleRevoked} event. Requirements: - the caller must be `account`."
      },
      "revokeRole(bytes32,address)": {
        "details": "Revokes `role` from `account`. If `account` had been granted `role`, emits a {RoleRevoked} event. Requirements: - the caller must have ``role``'s admin role."
      },
      "supportsInterface(bytes4)": {
        "details": "See {IERC165-supportsInterface}."
      }
    },
    "version": 1
  },
  "userdoc": {
    "kind": "user",
    "methods": {},
    "version": 1
  },
  "storageLayout": {
    "storage": [
      {
        "astId": 543,
        "contract": "contracts/HarmonyLightClient.sol:HarmonyLightClient",
        "label": "_initialized",
        "offset": 0,
        "slot": "0",
        "type": "t_uint8"
      },
      {
        "astId": 546,
        "contract": "contracts/HarmonyLightClient.sol:HarmonyLightClient",
        "label": "_initializing",
        "offset": 1,
        "slot": "0",
        "type": "t_bool"
      },
      {
        "astId": 2075,
        "contract": "contracts/HarmonyLightClient.sol:HarmonyLightClient",
        "label": "__gap",
        "offset": 0,
        "slot": "1",
        "type": "t_array(t_uint256)50_storage"
      },
      {
        "astId": 699,
        "contract": "contracts/HarmonyLightClient.sol:HarmonyLightClient",
        "label": "_paused",
        "offset": 0,
        "slot": "51",
        "type": "t_bool"
      },
      {
        "astId": 788,
        "contract": "contracts/HarmonyLightClient.sol:HarmonyLightClient",
        "label": "__gap",
        "offset": 0,
        "slot": "52",
        "type": "t_array(t_uint256)49_storage"
      },
      {
        "astId": 2415,
        "contract": "contracts/HarmonyLightClient.sol:HarmonyLightClient",
        "label": "__gap",
        "offset": 0,
        "slot": "101",
        "type": "t_array(t_uint256)50_storage"
      },
      {
        "astId": 39,
        "contract": "contracts/HarmonyLightClient.sol:HarmonyLightClient",
        "label": "_roles",
        "offset": 0,
        "slot": "151",
        "type": "t_mapping(t_bytes32,t_struct(RoleData)34_storage)"
      },
      {
        "astId": 338,
        "contract": "contracts/HarmonyLightClient.sol:HarmonyLightClient",
        "label": "__gap",
        "offset": 0,
        "slot": "152",
        "type": "t_array(t_uint256)49_storage"
      },
      {
        "astId": 5181,
        "contract": "contracts/HarmonyLightClient.sol:HarmonyLightClient",
        "label": "firstBlock",
        "offset": 0,
        "slot": "201",
        "type": "t_struct(BlockHeader)5158_storage"
      },
      {
        "astId": 5184,
        "contract": "contracts/HarmonyLightClient.sol:HarmonyLightClient",
        "label": "lastCheckPointBlock",
        "offset": 0,
        "slot": "211",
        "type": "t_struct(BlockHeader)5158_storage"
      },
      {
        "astId": 5189,
        "contract": "contracts/HarmonyLightClient.sol:HarmonyLightClient",
        "label": "epochCheckPointBlockNumbers",
        "offset": 0,
        "slot": "221",
        "type": "t_mapping(t_uint256,t_array(t_uint256)dyn_storage)"
      },
      {
        "astId": 5194,
        "contract": "contracts/HarmonyLightClient.sol:HarmonyLightClient",
        "label": "checkPointBlocks",
        "offset": 0,
        "slot": "222",
        "type": "t_mapping(t_uint256,t_struct(BlockHeader)5158_storage)"
      },
      {
        "astId": 5200,
        "contract": "contracts/HarmonyLightClient.sol:HarmonyLightClient",
        "label": "epochMmrRoots",
        "offset": 0,
        "slot": "223",
        "type": "t_mapping(t_uint256,t_mapping(t_bytes32,t_bool))"
      },
      {
        "astId": 5202,
        "contract": "contracts/HarmonyLightClient.sol:HarmonyLightClient",
        "label": "relayerThreshold",
        "offset": 0,
        "slot": "224",
        "type": "t_uint8"
      },
      {
        "astId": 5221,
        "contract": "contracts/HarmonyLightClient.sol:HarmonyLightClient",
        "label": "oldestEpochStored",
        "offset": 0,
        "slot": "225",
        "type": "t_uint256"
      }
    ],
    "types": {
      "t_address": {
        "encoding": "inplace",
        "label": "address",
        "numberOfBytes": "20"
      },
      "t_array(t_uint256)49_storage": {
        "base": "t_uint256",
        "encoding": "inplace",
        "label": "uint256[49]",
        "numberOfBytes": "1568"
      },
      "t_array(t_uint256)50_storage": {
        "base": "t_uint256",
        "encoding": "inplace",
        "label": "uint256[50]",
        "numberOfBytes": "1600"
      },
      "t_array(t_uint256)dyn_storage": {
        "base": "t_uint256",
        "encoding": "dynamic_array",
        "label": "uint256[]",
        "numberOfBytes": "32"
      },
      "t_bool": {
        "encoding": "inplace",
        "label": "bool",
        "numberOfBytes": "1"
      },
      "t_bytes32": {
        "encoding": "inplace",
        "label": "bytes32",
        "numberOfBytes": "32"
      },
      "t_mapping(t_address,t_bool)": {
        "encoding": "mapping",
        "key": "t_address",
        "label": "mapping(address => bool)",
        "numberOfBytes": "32",
        "value": "t_bool"
      },
      "t_mapping(t_bytes32,t_bool)": {
        "encoding": "mapping",
        "key": "t_bytes32",
        "label": "mapping(bytes32 => bool)",
        "numberOfBytes": "32",
        "value": "t_bool"
      },
      "t_mapping(t_bytes32,t_struct(RoleData)34_storage)": {
        "encoding": "mapping",
        "key": "t_bytes32",
        "label": "mapping(bytes32 => struct AccessControlUpgradeable.RoleData)",
        "numberOfBytes": "32",
        "value": "t_struct(RoleData)34_storage"
      },
      "t_mapping(t_uint256,t_array(t_uint256)dyn_storage)": {
        "encoding": "mapping",
        "key": "t_uint256",
        "label": "mapping(uint256 => uint256[])",
        "numberOfBytes": "32",
        "value": "t_array(t_uint256)dyn_storage"
      },
      "t_mapping(t_uint256,t_mapping(t_bytes32,t_bool))": {
        "encoding": "mapping",
        "key": "t_uint256",
        "label": "mapping(uint256 => mapping(bytes32 => bool))",
        "numberOfBytes": "32",
        "value": "t_mapping(t_bytes32,t_bool)"
      },
      "t_mapping(t_uint256,t_struct(BlockHeader)5158_storage)": {
        "encoding": "mapping",
        "key": "t_uint256",
        "label": "mapping(uint256 => struct HarmonyLightClient.BlockHeader)",
        "numberOfBytes": "32",
        "value": "t_struct(BlockHeader)5158_storage"
      },
      "t_struct(BlockHeader)5158_storage": {
        "encoding": "inplace",
        "label": "struct HarmonyLightClient.BlockHeader",
        "members": [
          {
            "astId": 5139,
            "contract": "contracts/HarmonyLightClient.sol:HarmonyLightClient",
            "label": "parentHash",
            "offset": 0,
            "slot": "0",
            "type": "t_bytes32"
          },
          {
            "astId": 5141,
            "contract": "contracts/HarmonyLightClient.sol:HarmonyLightClient",
            "label": "stateRoot",
            "offset": 0,
            "slot": "1",
            "type": "t_bytes32"
          },
          {
            "astId": 5143,
            "contract": "contracts/HarmonyLightClient.sol:HarmonyLightClient",
            "label": "transactionsRoot",
            "offset": 0,
            "slot": "2",
            "type": "t_bytes32"
          },
          {
            "astId": 5145,
            "contract": "contracts/HarmonyLightClient.sol:HarmonyLightClient",
            "label": "receiptsRoot",
            "offset": 0,
            "slot": "3",
            "type": "t_bytes32"
          },
          {
            "astId": 5147,
            "contract": "contracts/HarmonyLightClient.sol:HarmonyLightClient",
            "label": "number",
            "offset": 0,
            "slot": "4",
            "type": "t_uint256"
          },
          {
            "astId": 5149,
            "contract": "contracts/HarmonyLightClient.sol:HarmonyLightClient",
            "label": "epoch",
            "offset": 0,
            "slot": "5",
            "type": "t_uint256"
          },
          {
            "astId": 5151,
            "contract": "contracts/HarmonyLightClient.sol:HarmonyLightClient",
            "label": "shard",
            "offset": 0,
            "slot": "6",
            "type": "t_uint256"
          },
          {
            "astId": 5153,
            "contract": "contracts/HarmonyLightClient.sol:HarmonyLightClient",
            "label": "time",
            "offset": 0,
            "slot": "7",
            "type": "t_uint256"
          },
          {
            "astId": 5155,
            "contract": "contracts/HarmonyLightClient.sol:HarmonyLightClient",
            "label": "mmrRoot",
            "offset": 0,
            "slot": "8",
            "type": "t_bytes32"
          },
          {
            "astId": 5157,
            "contract": "contracts/HarmonyLightClient.sol:HarmonyLightClient",
            "label": "hash",
            "offset": 0,
            "slot": "9",
            "type": "t_bytes32"
          }
        ],
        "numberOfBytes": "320"
      },
      "t_struct(RoleData)34_storage": {
        "encoding": "inplace",
        "label": "struct AccessControlUpgradeable.RoleData",
        "members": [
          {
            "astId": 31,
            "contract": "contracts/HarmonyLightClient.sol:HarmonyLightClient",
            "label": "members",
            "offset": 0,
            "slot": "0",
            "type": "t_mapping(t_address,t_bool)"
          },
          {
            "astId": 33,
            "contract": "contracts/HarmonyLightClient.sol:HarmonyLightClient",
            "label": "adminRole",
            "offset": 0,
            "slot": "1",
            "type": "t_bytes32"
          }
        ],
        "numberOfBytes": "64"
      },
      "t_uint256": {
        "encoding": "inplace",
        "label": "uint256",
        "numberOfBytes": "32"
      },
      "t_uint8": {
        "encoding": "inplace",
        "label": "uint8",
        "numberOfBytes": "1"
      }
    }
  }
}