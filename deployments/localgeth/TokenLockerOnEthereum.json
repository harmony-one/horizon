{
  "address": "0x9fE46736679d2D9a65F0992F2272dE9f3c7fa6e0",
  "abi": [
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "token",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "sender",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "amount",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "address",
          "name": "recipient",
          "type": "address"
        }
      ],
      "name": "Burn",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "uint8",
          "name": "version",
          "type": "uint8"
        }
      ],
      "name": "Initialized",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "token",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "sender",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "amount",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "address",
          "name": "recipient",
          "type": "address"
        }
      ],
      "name": "Locked",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "previousOwner",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "newOwner",
          "type": "address"
        }
      ],
      "name": "OwnershipTransferred",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "tokenReq",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "tokenAck",
          "type": "address"
        }
      ],
      "name": "TokenMapAck",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "tokenReq",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "uint8",
          "name": "decimals",
          "type": "uint8"
        },
        {
          "indexed": false,
          "internalType": "string",
          "name": "name",
          "type": "string"
        },
        {
          "indexed": false,
          "internalType": "string",
          "name": "symbol",
          "type": "string"
        }
      ],
      "name": "TokenMapReq",
      "type": "event"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "name": "RxMapped",
      "outputs": [
        {
          "internalType": "contract BridgedToken",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "name": "RxMappedInv",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "name": "RxTokens",
      "outputs": [
        {
          "internalType": "contract BridgedToken",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "name": "TxMapped",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "name": "TxMappedInv",
      "outputs": [
        {
          "internalType": "contract IERC20Upgradeable",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "name": "TxTokens",
      "outputs": [
        {
          "internalType": "contract IERC20Upgradeable",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "otherSide",
          "type": "address"
        }
      ],
      "name": "bind",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "contract HarmonyLightClient",
          "name": "newClient",
          "type": "address"
        }
      ],
      "name": "changeLightClient",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "initialize",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "contract ERC20Upgradeable",
          "name": "thisSideToken",
          "type": "address"
        }
      ],
      "name": "issueTokenMapReq",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "lightclient",
      "outputs": [
        {
          "internalType": "contract HarmonyLightClient",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "contract IERC20Upgradeable",
          "name": "token",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "recipient",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "amount",
          "type": "uint256"
        }
      ],
      "name": "lock",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "otherSideBridge",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "owner",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "renounceOwnership",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "bytes32",
          "name": "",
          "type": "bytes32"
        }
      ],
      "name": "spentReceipt",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "totalBridgedTokens",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "newOwner",
          "type": "address"
        }
      ],
      "name": "transferOwnership",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "contract BridgedToken",
          "name": "token",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "recipient",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "amount",
          "type": "uint256"
        }
      ],
      "name": "unlock",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "components": [
            {
              "internalType": "bytes32",
              "name": "hash",
              "type": "bytes32"
            },
            {
              "internalType": "bytes32",
              "name": "parentHash",
              "type": "bytes32"
            },
            {
              "internalType": "address",
              "name": "miner",
              "type": "address"
            },
            {
              "internalType": "bytes32",
              "name": "stateRoot",
              "type": "bytes32"
            },
            {
              "internalType": "bytes32",
              "name": "transactionsRoot",
              "type": "bytes32"
            },
            {
              "internalType": "bytes32",
              "name": "receiptsRoot",
              "type": "bytes32"
            },
            {
              "internalType": "bytes32",
              "name": "outgoingReceiptsRoot",
              "type": "bytes32"
            },
            {
              "internalType": "bytes32",
              "name": "incomingReceiptsRoot",
              "type": "bytes32"
            },
            {
              "internalType": "bytes",
              "name": "logsBloom",
              "type": "bytes"
            },
            {
              "internalType": "uint256",
              "name": "number",
              "type": "uint256"
            },
            {
              "internalType": "uint256",
              "name": "gasLimit",
              "type": "uint256"
            },
            {
              "internalType": "uint256",
              "name": "gasUsed",
              "type": "uint256"
            },
            {
              "internalType": "uint256",
              "name": "timestamp",
              "type": "uint256"
            },
            {
              "internalType": "bytes",
              "name": "extraData",
              "type": "bytes"
            },
            {
              "internalType": "bytes32",
              "name": "mixHash",
              "type": "bytes32"
            },
            {
              "internalType": "uint256",
              "name": "viewID",
              "type": "uint256"
            },
            {
              "internalType": "uint256",
              "name": "epoch",
              "type": "uint256"
            },
            {
              "internalType": "uint256",
              "name": "shardID",
              "type": "uint256"
            },
            {
              "internalType": "bytes",
              "name": "lastCommitSignature",
              "type": "bytes"
            },
            {
              "internalType": "bytes",
              "name": "lastCommitBitmap",
              "type": "bytes"
            },
            {
              "internalType": "bytes",
              "name": "vrf",
              "type": "bytes"
            },
            {
              "internalType": "bytes",
              "name": "vdf",
              "type": "bytes"
            },
            {
              "internalType": "bytes",
              "name": "shardState",
              "type": "bytes"
            },
            {
              "internalType": "bytes",
              "name": "crossLink",
              "type": "bytes"
            },
            {
              "internalType": "bytes",
              "name": "slashes",
              "type": "bytes"
            },
            {
              "internalType": "bytes",
              "name": "mmrRoot",
              "type": "bytes"
            }
          ],
          "internalType": "struct HarmonyParser.BlockHeader",
          "name": "header",
          "type": "tuple"
        },
        {
          "components": [
            {
              "internalType": "bytes32",
              "name": "root",
              "type": "bytes32"
            },
            {
              "internalType": "uint256",
              "name": "width",
              "type": "uint256"
            },
            {
              "internalType": "uint256",
              "name": "index",
              "type": "uint256"
            },
            {
              "internalType": "bytes32[]",
              "name": "peaks",
              "type": "bytes32[]"
            },
            {
              "internalType": "bytes32[]",
              "name": "siblings",
              "type": "bytes32[]"
            }
          ],
          "internalType": "struct MMRVerifier.MMRProof",
          "name": "mmrProof",
          "type": "tuple"
        },
        {
          "components": [
            {
              "internalType": "bytes32",
              "name": "root",
              "type": "bytes32"
            },
            {
              "internalType": "uint256",
              "name": "paths",
              "type": "uint256"
            },
            {
              "internalType": "bytes",
              "name": "proof",
              "type": "bytes"
            }
          ],
          "internalType": "struct HarmonyProver.MerkleProof",
          "name": "receiptdata",
          "type": "tuple"
        }
      ],
      "name": "validateAndExecuteProof",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    }
  ],
  "transactionHash": "0x28c3a59edd914e6c16d3b4f4f10d090dcd2b81f4094efc410d1764ce2990ac65",
  "receipt": {
    "to": null,
    "from": "0xf39Fd6e51aad88F6F4ce6aB8827279cffFb92266",
    "contractAddress": "0x9fE46736679d2D9a65F0992F2272dE9f3c7fa6e0",
    "transactionIndex": 0,
    "gasUsed": "5723348",
    "logsBloom": "0x
    "blockHash": "0xf165a9d15e4b2975ca9f9b8eb2147cab52e0758ad9ba6b1d1d4f74bbda216ca7",
    "transactionHash": "0x28c3a59edd914e6c16d3b4f4f10d090dcd2b81f4094efc410d1764ce2990ac65",
    "logs": [],
    "blockNumber": 573,
    "cumulativeGasUsed": "5723348",
    "status": 1,
    "byzantium": true
  },
  "args": [],
  "numDeployments": 1,
  "solcInputHash": "56d31fe3045434843aeef6e823a5eaad",
  "metadata": "{\"compiler\":{\"version\":\"0.8.9+commit.e5eed63a\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"token\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"sender\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"recipient\",\"type\":\"address\"}],\"name\":\"Burn\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint8\",\"name\":\"version\",\"type\":\"uint8\"}],\"name\":\"Initialized\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"token\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"sender\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"recipient\",\"type\":\"address\"}],\"name\":\"Locked\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"previousOwner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"OwnershipTransferred\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"tokenReq\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"tokenAck\",\"type\":\"address\"}],\"name\":\"TokenMapAck\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"tokenReq\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"uint8\",\"name\":\"decimals\",\"type\":\"uint8\"},{\"indexed\":false,\"internalType\":\"string\",\"name\":\"name\",\"type\":\"string\"},{\"indexed\":false,\"internalType\":\"string\",\"name\":\"symbol\",\"type\":\"string\"}],\"name\":\"TokenMapReq\",\"type\":\"event\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"RxMapped\",\"outputs\":[{\"internalType\":\"contract BridgedToken\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"RxMappedInv\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"RxTokens\",\"outputs\":[{\"internalType\":\"contract BridgedToken\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"TxMapped\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"TxMappedInv\",\"outputs\":[{\"internalType\":\"contract IERC20Upgradeable\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"TxTokens\",\"outputs\":[{\"internalType\":\"contract IERC20Upgradeable\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"otherSide\",\"type\":\"address\"}],\"name\":\"bind\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"contract HarmonyLightClient\",\"name\":\"newClient\",\"type\":\"address\"}],\"name\":\"changeLightClient\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"initialize\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"contract ERC20Upgradeable\",\"name\":\"thisSideToken\",\"type\":\"address\"}],\"name\":\"issueTokenMapReq\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"lightclient\",\"outputs\":[{\"internalType\":\"contract HarmonyLightClient\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"contract IERC20Upgradeable\",\"name\":\"token\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"recipient\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"lock\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"otherSideBridge\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"renounceOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"\",\"type\":\"bytes32\"}],\"name\":\"spentReceipt\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"totalBridgedTokens\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"transferOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"contract BridgedToken\",\"name\":\"token\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"recipient\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"unlock\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"components\":[{\"internalType\":\"bytes32\",\"name\":\"hash\",\"type\":\"bytes32\"},{\"internalType\":\"bytes32\",\"name\":\"parentHash\",\"type\":\"bytes32\"},{\"internalType\":\"address\",\"name\":\"miner\",\"type\":\"address\"},{\"internalType\":\"bytes32\",\"name\":\"stateRoot\",\"type\":\"bytes32\"},{\"internalType\":\"bytes32\",\"name\":\"transactionsRoot\",\"type\":\"bytes32\"},{\"internalType\":\"bytes32\",\"name\":\"receiptsRoot\",\"type\":\"bytes32\"},{\"internalType\":\"bytes32\",\"name\":\"outgoingReceiptsRoot\",\"type\":\"bytes32\"},{\"internalType\":\"bytes32\",\"name\":\"incomingReceiptsRoot\",\"type\":\"bytes32\"},{\"internalType\":\"bytes\",\"name\":\"logsBloom\",\"type\":\"bytes\"},{\"internalType\":\"uint256\",\"name\":\"number\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"gasLimit\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"gasUsed\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"timestamp\",\"type\":\"uint256\"},{\"internalType\":\"bytes\",\"name\":\"extraData\",\"type\":\"bytes\"},{\"internalType\":\"bytes32\",\"name\":\"mixHash\",\"type\":\"bytes32\"},{\"internalType\":\"uint256\",\"name\":\"viewID\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"epoch\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"shardID\",\"type\":\"uint256\"},{\"internalType\":\"bytes\",\"name\":\"lastCommitSignature\",\"type\":\"bytes\"},{\"internalType\":\"bytes\",\"name\":\"lastCommitBitmap\",\"type\":\"bytes\"},{\"internalType\":\"bytes\",\"name\":\"vrf\",\"type\":\"bytes\"},{\"internalType\":\"bytes\",\"name\":\"vdf\",\"type\":\"bytes\"},{\"internalType\":\"bytes\",\"name\":\"shardState\",\"type\":\"bytes\"},{\"internalType\":\"bytes\",\"name\":\"crossLink\",\"type\":\"bytes\"},{\"internalType\":\"bytes\",\"name\":\"slashes\",\"type\":\"bytes\"},{\"internalType\":\"bytes\",\"name\":\"mmrRoot\",\"type\":\"bytes\"}],\"internalType\":\"struct HarmonyParser.BlockHeader\",\"name\":\"header\",\"type\":\"tuple\"},{\"components\":[{\"internalType\":\"bytes32\",\"name\":\"root\",\"type\":\"bytes32\"},{\"internalType\":\"uint256\",\"name\":\"width\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"index\",\"type\":\"uint256\"},{\"internalType\":\"bytes32[]\",\"name\":\"peaks\",\"type\":\"bytes32[]\"},{\"internalType\":\"bytes32[]\",\"name\":\"siblings\",\"type\":\"bytes32[]\"}],\"internalType\":\"struct MMRVerifier.MMRProof\",\"name\":\"mmrProof\",\"type\":\"tuple\"},{\"components\":[{\"internalType\":\"bytes32\",\"name\":\"root\",\"type\":\"bytes32\"},{\"internalType\":\"uint256\",\"name\":\"paths\",\"type\":\"uint256\"},{\"internalType\":\"bytes\",\"name\":\"proof\",\"type\":\"bytes\"}],\"internalType\":\"struct HarmonyProver.MerkleProof\",\"name\":\"receiptdata\",\"type\":\"tuple\"}],\"name\":\"validateAndExecuteProof\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"}],\"devdoc\":{\"kind\":\"dev\",\"methods\":{\"owner()\":{\"details\":\"Returns the address of the current owner.\"},\"renounceOwnership()\":{\"details\":\"Leaves the contract without owner. It will not be possible to call `onlyOwner` functions anymore. Can only be called by the current owner. NOTE: Renouncing ownership will leave the contract without an owner, thereby removing any functionality that is only available to the owner.\"},\"transferOwnership(address)\":{\"details\":\"Transfers ownership of the contract to a new account (`newOwner`). Can only be called by the current owner.\"}},\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{},\"version\":1}},\"settings\":{\"compilationTarget\":{\"contracts/TokenLockerOnEthereum.sol\":\"TokenLockerOnEthereum\"},\"evmVersion\":\"london\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\",\"useLiteralContent\":true},\"optimizer\":{\"enabled\":true,\"runs\":200},\"remappings\":[]},\"sources\":{\"@openzeppelin/contracts-upgradeable/access/AccessControlUpgradeable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.6.0) (access/AccessControl.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"./IAccessControlUpgradeable.sol\\\";\\nimport \\\"../utils/ContextUpgradeable.sol\\\";\\nimport \\\"../utils/StringsUpgradeable.sol\\\";\\nimport \\\"../utils/introspection/ERC165Upgradeable.sol\\\";\\nimport \\\"../proxy/utils/Initializable.sol\\\";\\n\\n/**\\n * @dev Contract module that allows children to implement role-based access\\n * control mechanisms. This is a lightweight version that doesn't allow enumerating role\\n * members except through off-chain means by accessing the contract event logs. Some\\n * applications may benefit from on-chain enumerability, for those cases see\\n * {AccessControlEnumerable}.\\n *\\n * Roles are referred to by their `bytes32` identifier. These should be exposed\\n * in the external API and be unique. The best way to achieve this is by\\n * using `public constant` hash digests:\\n *\\n * ```\\n * bytes32 public constant MY_ROLE = keccak256(\\\"MY_ROLE\\\");\\n * ```\\n *\\n * Roles can be used to represent a set of permissions. To restrict access to a\\n * function call, use {hasRole}:\\n *\\n * ```\\n * function foo() public {\\n *     require(hasRole(MY_ROLE, msg.sender));\\n *     ...\\n * }\\n * ```\\n *\\n * Roles can be granted and revoked dynamically via the {grantRole} and\\n * {revokeRole} functions. Each role has an associated admin role, and only\\n * accounts that have a role's admin role can call {grantRole} and {revokeRole}.\\n *\\n * By default, the admin role for all roles is `DEFAULT_ADMIN_ROLE`, which means\\n * that only accounts with this role will be able to grant or revoke other\\n * roles. More complex role relationships can be created by using\\n * {_setRoleAdmin}.\\n *\\n * WARNING: The `DEFAULT_ADMIN_ROLE` is also its own admin: it has permission to\\n * grant and revoke this role. Extra precautions should be taken to secure\\n * accounts that have been granted it.\\n */\\nabstract contract AccessControlUpgradeable is Initializable, ContextUpgradeable, IAccessControlUpgradeable, ERC165Upgradeable {\\n    function __AccessControl_init() internal onlyInitializing {\\n    }\\n\\n    function __AccessControl_init_unchained() internal onlyInitializing {\\n    }\\n    struct RoleData {\\n        mapping(address => bool) members;\\n        bytes32 adminRole;\\n    }\\n\\n    mapping(bytes32 => RoleData) private _roles;\\n\\n    bytes32 public constant DEFAULT_ADMIN_ROLE = 0x00;\\n\\n    /**\\n     * @dev Modifier that checks that an account has a specific role. Reverts\\n     * with a standardized message including the required role.\\n     *\\n     * The format of the revert reason is given by the following regular expression:\\n     *\\n     *  /^AccessControl: account (0x[0-9a-f]{40}) is missing role (0x[0-9a-f]{64})$/\\n     *\\n     * _Available since v4.1._\\n     */\\n    modifier onlyRole(bytes32 role) {\\n        _checkRole(role);\\n        _;\\n    }\\n\\n    /**\\n     * @dev See {IERC165-supportsInterface}.\\n     */\\n    function supportsInterface(bytes4 interfaceId) public view virtual override returns (bool) {\\n        return interfaceId == type(IAccessControlUpgradeable).interfaceId || super.supportsInterface(interfaceId);\\n    }\\n\\n    /**\\n     * @dev Returns `true` if `account` has been granted `role`.\\n     */\\n    function hasRole(bytes32 role, address account) public view virtual override returns (bool) {\\n        return _roles[role].members[account];\\n    }\\n\\n    /**\\n     * @dev Revert with a standard message if `_msgSender()` is missing `role`.\\n     * Overriding this function changes the behavior of the {onlyRole} modifier.\\n     *\\n     * Format of the revert message is described in {_checkRole}.\\n     *\\n     * _Available since v4.6._\\n     */\\n    function _checkRole(bytes32 role) internal view virtual {\\n        _checkRole(role, _msgSender());\\n    }\\n\\n    /**\\n     * @dev Revert with a standard message if `account` is missing `role`.\\n     *\\n     * The format of the revert reason is given by the following regular expression:\\n     *\\n     *  /^AccessControl: account (0x[0-9a-f]{40}) is missing role (0x[0-9a-f]{64})$/\\n     */\\n    function _checkRole(bytes32 role, address account) internal view virtual {\\n        if (!hasRole(role, account)) {\\n            revert(\\n                string(\\n                    abi.encodePacked(\\n                        \\\"AccessControl: account \\\",\\n                        StringsUpgradeable.toHexString(uint160(account), 20),\\n                        \\\" is missing role \\\",\\n                        StringsUpgradeable.toHexString(uint256(role), 32)\\n                    )\\n                )\\n            );\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the admin role that controls `role`. See {grantRole} and\\n     * {revokeRole}.\\n     *\\n     * To change a role's admin, use {_setRoleAdmin}.\\n     */\\n    function getRoleAdmin(bytes32 role) public view virtual override returns (bytes32) {\\n        return _roles[role].adminRole;\\n    }\\n\\n    /**\\n     * @dev Grants `role` to `account`.\\n     *\\n     * If `account` had not been already granted `role`, emits a {RoleGranted}\\n     * event.\\n     *\\n     * Requirements:\\n     *\\n     * - the caller must have ``role``'s admin role.\\n     */\\n    function grantRole(bytes32 role, address account) public virtual override onlyRole(getRoleAdmin(role)) {\\n        _grantRole(role, account);\\n    }\\n\\n    /**\\n     * @dev Revokes `role` from `account`.\\n     *\\n     * If `account` had been granted `role`, emits a {RoleRevoked} event.\\n     *\\n     * Requirements:\\n     *\\n     * - the caller must have ``role``'s admin role.\\n     */\\n    function revokeRole(bytes32 role, address account) public virtual override onlyRole(getRoleAdmin(role)) {\\n        _revokeRole(role, account);\\n    }\\n\\n    /**\\n     * @dev Revokes `role` from the calling account.\\n     *\\n     * Roles are often managed via {grantRole} and {revokeRole}: this function's\\n     * purpose is to provide a mechanism for accounts to lose their privileges\\n     * if they are compromised (such as when a trusted device is misplaced).\\n     *\\n     * If the calling account had been revoked `role`, emits a {RoleRevoked}\\n     * event.\\n     *\\n     * Requirements:\\n     *\\n     * - the caller must be `account`.\\n     */\\n    function renounceRole(bytes32 role, address account) public virtual override {\\n        require(account == _msgSender(), \\\"AccessControl: can only renounce roles for self\\\");\\n\\n        _revokeRole(role, account);\\n    }\\n\\n    /**\\n     * @dev Grants `role` to `account`.\\n     *\\n     * If `account` had not been already granted `role`, emits a {RoleGranted}\\n     * event. Note that unlike {grantRole}, this function doesn't perform any\\n     * checks on the calling account.\\n     *\\n     * [WARNING]\\n     * ====\\n     * This function should only be called from the constructor when setting\\n     * up the initial roles for the system.\\n     *\\n     * Using this function in any other way is effectively circumventing the admin\\n     * system imposed by {AccessControl}.\\n     * ====\\n     *\\n     * NOTE: This function is deprecated in favor of {_grantRole}.\\n     */\\n    function _setupRole(bytes32 role, address account) internal virtual {\\n        _grantRole(role, account);\\n    }\\n\\n    /**\\n     * @dev Sets `adminRole` as ``role``'s admin role.\\n     *\\n     * Emits a {RoleAdminChanged} event.\\n     */\\n    function _setRoleAdmin(bytes32 role, bytes32 adminRole) internal virtual {\\n        bytes32 previousAdminRole = getRoleAdmin(role);\\n        _roles[role].adminRole = adminRole;\\n        emit RoleAdminChanged(role, previousAdminRole, adminRole);\\n    }\\n\\n    /**\\n     * @dev Grants `role` to `account`.\\n     *\\n     * Internal function without access restriction.\\n     */\\n    function _grantRole(bytes32 role, address account) internal virtual {\\n        if (!hasRole(role, account)) {\\n            _roles[role].members[account] = true;\\n            emit RoleGranted(role, account, _msgSender());\\n        }\\n    }\\n\\n    /**\\n     * @dev Revokes `role` from `account`.\\n     *\\n     * Internal function without access restriction.\\n     */\\n    function _revokeRole(bytes32 role, address account) internal virtual {\\n        if (hasRole(role, account)) {\\n            _roles[role].members[account] = false;\\n            emit RoleRevoked(role, account, _msgSender());\\n        }\\n    }\\n\\n    /**\\n     * @dev This empty reserved space is put in place to allow future versions to add new\\n     * variables without shifting down storage in the inheritance chain.\\n     * See https://docs.openzeppelin.com/contracts/4.x/upgradeable#storage_gaps\\n     */\\n    uint256[49] private __gap;\\n}\\n\",\"keccak256\":\"0x5addc7dca2366b164c9befa35da22e9081c44bf6c4c8dce4269be43516f8916e\",\"license\":\"MIT\"},\"@openzeppelin/contracts-upgradeable/access/IAccessControlUpgradeable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (access/IAccessControl.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev External interface of AccessControl declared to support ERC165 detection.\\n */\\ninterface IAccessControlUpgradeable {\\n    /**\\n     * @dev Emitted when `newAdminRole` is set as ``role``'s admin role, replacing `previousAdminRole`\\n     *\\n     * `DEFAULT_ADMIN_ROLE` is the starting admin for all roles, despite\\n     * {RoleAdminChanged} not being emitted signaling this.\\n     *\\n     * _Available since v3.1._\\n     */\\n    event RoleAdminChanged(bytes32 indexed role, bytes32 indexed previousAdminRole, bytes32 indexed newAdminRole);\\n\\n    /**\\n     * @dev Emitted when `account` is granted `role`.\\n     *\\n     * `sender` is the account that originated the contract call, an admin role\\n     * bearer except when using {AccessControl-_setupRole}.\\n     */\\n    event RoleGranted(bytes32 indexed role, address indexed account, address indexed sender);\\n\\n    /**\\n     * @dev Emitted when `account` is revoked `role`.\\n     *\\n     * `sender` is the account that originated the contract call:\\n     *   - if using `revokeRole`, it is the admin role bearer\\n     *   - if using `renounceRole`, it is the role bearer (i.e. `account`)\\n     */\\n    event RoleRevoked(bytes32 indexed role, address indexed account, address indexed sender);\\n\\n    /**\\n     * @dev Returns `true` if `account` has been granted `role`.\\n     */\\n    function hasRole(bytes32 role, address account) external view returns (bool);\\n\\n    /**\\n     * @dev Returns the admin role that controls `role`. See {grantRole} and\\n     * {revokeRole}.\\n     *\\n     * To change a role's admin, use {AccessControl-_setRoleAdmin}.\\n     */\\n    function getRoleAdmin(bytes32 role) external view returns (bytes32);\\n\\n    /**\\n     * @dev Grants `role` to `account`.\\n     *\\n     * If `account` had not been already granted `role`, emits a {RoleGranted}\\n     * event.\\n     *\\n     * Requirements:\\n     *\\n     * - the caller must have ``role``'s admin role.\\n     */\\n    function grantRole(bytes32 role, address account) external;\\n\\n    /**\\n     * @dev Revokes `role` from `account`.\\n     *\\n     * If `account` had been granted `role`, emits a {RoleRevoked} event.\\n     *\\n     * Requirements:\\n     *\\n     * - the caller must have ``role``'s admin role.\\n     */\\n    function revokeRole(bytes32 role, address account) external;\\n\\n    /**\\n     * @dev Revokes `role` from the calling account.\\n     *\\n     * Roles are often managed via {grantRole} and {revokeRole}: this function's\\n     * purpose is to provide a mechanism for accounts to lose their privileges\\n     * if they are compromised (such as when a trusted device is misplaced).\\n     *\\n     * If the calling account had been granted `role`, emits a {RoleRevoked}\\n     * event.\\n     *\\n     * Requirements:\\n     *\\n     * - the caller must be `account`.\\n     */\\n    function renounceRole(bytes32 role, address account) external;\\n}\\n\",\"keccak256\":\"0xb8f5302f12138c5561362e88a78d061573e6298b7a1a5afe84a1e2c8d4d5aeaa\",\"license\":\"MIT\"},\"@openzeppelin/contracts-upgradeable/access/OwnableUpgradeable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (access/Ownable.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../utils/ContextUpgradeable.sol\\\";\\nimport \\\"../proxy/utils/Initializable.sol\\\";\\n\\n/**\\n * @dev Contract module which provides a basic access control mechanism, where\\n * there is an account (an owner) that can be granted exclusive access to\\n * specific functions.\\n *\\n * By default, the owner account will be the one that deploys the contract. This\\n * can later be changed with {transferOwnership}.\\n *\\n * This module is used through inheritance. It will make available the modifier\\n * `onlyOwner`, which can be applied to your functions to restrict their use to\\n * the owner.\\n */\\nabstract contract OwnableUpgradeable is Initializable, ContextUpgradeable {\\n    address private _owner;\\n\\n    event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\\n\\n    /**\\n     * @dev Initializes the contract setting the deployer as the initial owner.\\n     */\\n    function __Ownable_init() internal onlyInitializing {\\n        __Ownable_init_unchained();\\n    }\\n\\n    function __Ownable_init_unchained() internal onlyInitializing {\\n        _transferOwnership(_msgSender());\\n    }\\n\\n    /**\\n     * @dev Returns the address of the current owner.\\n     */\\n    function owner() public view virtual returns (address) {\\n        return _owner;\\n    }\\n\\n    /**\\n     * @dev Throws if called by any account other than the owner.\\n     */\\n    modifier onlyOwner() {\\n        require(owner() == _msgSender(), \\\"Ownable: caller is not the owner\\\");\\n        _;\\n    }\\n\\n    /**\\n     * @dev Leaves the contract without owner. It will not be possible to call\\n     * `onlyOwner` functions anymore. Can only be called by the current owner.\\n     *\\n     * NOTE: Renouncing ownership will leave the contract without an owner,\\n     * thereby removing any functionality that is only available to the owner.\\n     */\\n    function renounceOwnership() public virtual onlyOwner {\\n        _transferOwnership(address(0));\\n    }\\n\\n    /**\\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\\n     * Can only be called by the current owner.\\n     */\\n    function transferOwnership(address newOwner) public virtual onlyOwner {\\n        require(newOwner != address(0), \\\"Ownable: new owner is the zero address\\\");\\n        _transferOwnership(newOwner);\\n    }\\n\\n    /**\\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\\n     * Internal function without access restriction.\\n     */\\n    function _transferOwnership(address newOwner) internal virtual {\\n        address oldOwner = _owner;\\n        _owner = newOwner;\\n        emit OwnershipTransferred(oldOwner, newOwner);\\n    }\\n\\n    /**\\n     * @dev This empty reserved space is put in place to allow future versions to add new\\n     * variables without shifting down storage in the inheritance chain.\\n     * See https://docs.openzeppelin.com/contracts/4.x/upgradeable#storage_gaps\\n     */\\n    uint256[49] private __gap;\\n}\\n\",\"keccak256\":\"0x652fee292f698d8dba81bf287cb71f1682f6483b67ebe601a5f7387dcfc30b34\",\"license\":\"MIT\"},\"@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.6.0) (proxy/utils/Initializable.sol)\\n\\npragma solidity ^0.8.2;\\n\\nimport \\\"../../utils/AddressUpgradeable.sol\\\";\\n\\n/**\\n * @dev This is a base contract to aid in writing upgradeable contracts, or any kind of contract that will be deployed\\n * behind a proxy. Since proxied contracts do not make use of a constructor, it's common to move constructor logic to an\\n * external initializer function, usually called `initialize`. It then becomes necessary to protect this initializer\\n * function so it can only be called once. The {initializer} modifier provided by this contract will have this effect.\\n *\\n * The initialization functions use a version number. Once a version number is used, it is consumed and cannot be\\n * reused. This mechanism prevents re-execution of each \\\"step\\\" but allows the creation of new initialization steps in\\n * case an upgrade adds a module that needs to be initialized.\\n *\\n * For example:\\n *\\n * [.hljs-theme-light.nopadding]\\n * ```\\n * contract MyToken is ERC20Upgradeable {\\n *     function initialize() initializer public {\\n *         __ERC20_init(\\\"MyToken\\\", \\\"MTK\\\");\\n *     }\\n * }\\n * contract MyTokenV2 is MyToken, ERC20PermitUpgradeable {\\n *     function initializeV2() reinitializer(2) public {\\n *         __ERC20Permit_init(\\\"MyToken\\\");\\n *     }\\n * }\\n * ```\\n *\\n * TIP: To avoid leaving the proxy in an uninitialized state, the initializer function should be called as early as\\n * possible by providing the encoded function call as the `_data` argument to {ERC1967Proxy-constructor}.\\n *\\n * CAUTION: When used with inheritance, manual care must be taken to not invoke a parent initializer twice, or to ensure\\n * that all initializers are idempotent. This is not verified automatically as constructors are by Solidity.\\n *\\n * [CAUTION]\\n * ====\\n * Avoid leaving a contract uninitialized.\\n *\\n * An uninitialized contract can be taken over by an attacker. This applies to both a proxy and its implementation\\n * contract, which may impact the proxy. To prevent the implementation contract from being used, you should invoke\\n * the {_disableInitializers} function in the constructor to automatically lock it when it is deployed:\\n *\\n * [.hljs-theme-light.nopadding]\\n * ```\\n * /// @custom:oz-upgrades-unsafe-allow constructor\\n * constructor() {\\n *     _disableInitializers();\\n * }\\n * ```\\n * ====\\n */\\nabstract contract Initializable {\\n    /**\\n     * @dev Indicates that the contract has been initialized.\\n     * @custom:oz-retyped-from bool\\n     */\\n    uint8 private _initialized;\\n\\n    /**\\n     * @dev Indicates that the contract is in the process of being initialized.\\n     */\\n    bool private _initializing;\\n\\n    /**\\n     * @dev Triggered when the contract has been initialized or reinitialized.\\n     */\\n    event Initialized(uint8 version);\\n\\n    /**\\n     * @dev A modifier that defines a protected initializer function that can be invoked at most once. In its scope,\\n     * `onlyInitializing` functions can be used to initialize parent contracts. Equivalent to `reinitializer(1)`.\\n     */\\n    modifier initializer() {\\n        bool isTopLevelCall = _setInitializedVersion(1);\\n        if (isTopLevelCall) {\\n            _initializing = true;\\n        }\\n        _;\\n        if (isTopLevelCall) {\\n            _initializing = false;\\n            emit Initialized(1);\\n        }\\n    }\\n\\n    /**\\n     * @dev A modifier that defines a protected reinitializer function that can be invoked at most once, and only if the\\n     * contract hasn't been initialized to a greater version before. In its scope, `onlyInitializing` functions can be\\n     * used to initialize parent contracts.\\n     *\\n     * `initializer` is equivalent to `reinitializer(1)`, so a reinitializer may be used after the original\\n     * initialization step. This is essential to configure modules that are added through upgrades and that require\\n     * initialization.\\n     *\\n     * Note that versions can jump in increments greater than 1; this implies that if multiple reinitializers coexist in\\n     * a contract, executing them in the right order is up to the developer or operator.\\n     */\\n    modifier reinitializer(uint8 version) {\\n        bool isTopLevelCall = _setInitializedVersion(version);\\n        if (isTopLevelCall) {\\n            _initializing = true;\\n        }\\n        _;\\n        if (isTopLevelCall) {\\n            _initializing = false;\\n            emit Initialized(version);\\n        }\\n    }\\n\\n    /**\\n     * @dev Modifier to protect an initialization function so that it can only be invoked by functions with the\\n     * {initializer} and {reinitializer} modifiers, directly or indirectly.\\n     */\\n    modifier onlyInitializing() {\\n        require(_initializing, \\\"Initializable: contract is not initializing\\\");\\n        _;\\n    }\\n\\n    /**\\n     * @dev Locks the contract, preventing any future reinitialization. This cannot be part of an initializer call.\\n     * Calling this in the constructor of a contract will prevent that contract from being initialized or reinitialized\\n     * to any version. It is recommended to use this to lock implementation contracts that are designed to be called\\n     * through proxies.\\n     */\\n    function _disableInitializers() internal virtual {\\n        _setInitializedVersion(type(uint8).max);\\n    }\\n\\n    function _setInitializedVersion(uint8 version) private returns (bool) {\\n        // If the contract is initializing we ignore whether _initialized is set in order to support multiple\\n        // inheritance patterns, but we only do this in the context of a constructor, and for the lowest level\\n        // of initializers, because in other contexts the contract may have been reentered.\\n        if (_initializing) {\\n            require(\\n                version == 1 && !AddressUpgradeable.isContract(address(this)),\\n                \\\"Initializable: contract is already initialized\\\"\\n            );\\n            return false;\\n        } else {\\n            require(_initialized < version, \\\"Initializable: contract is already initialized\\\");\\n            _initialized = version;\\n            return true;\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0x7454006cccb737612b00104d2f606d728e2818b778e7e55542f063c614ce46ba\",\"license\":\"MIT\"},\"@openzeppelin/contracts-upgradeable/security/PausableUpgradeable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (security/Pausable.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../utils/ContextUpgradeable.sol\\\";\\nimport \\\"../proxy/utils/Initializable.sol\\\";\\n\\n/**\\n * @dev Contract module which allows children to implement an emergency stop\\n * mechanism that can be triggered by an authorized account.\\n *\\n * This module is used through inheritance. It will make available the\\n * modifiers `whenNotPaused` and `whenPaused`, which can be applied to\\n * the functions of your contract. Note that they will not be pausable by\\n * simply including this module, only once the modifiers are put in place.\\n */\\nabstract contract PausableUpgradeable is Initializable, ContextUpgradeable {\\n    /**\\n     * @dev Emitted when the pause is triggered by `account`.\\n     */\\n    event Paused(address account);\\n\\n    /**\\n     * @dev Emitted when the pause is lifted by `account`.\\n     */\\n    event Unpaused(address account);\\n\\n    bool private _paused;\\n\\n    /**\\n     * @dev Initializes the contract in unpaused state.\\n     */\\n    function __Pausable_init() internal onlyInitializing {\\n        __Pausable_init_unchained();\\n    }\\n\\n    function __Pausable_init_unchained() internal onlyInitializing {\\n        _paused = false;\\n    }\\n\\n    /**\\n     * @dev Returns true if the contract is paused, and false otherwise.\\n     */\\n    function paused() public view virtual returns (bool) {\\n        return _paused;\\n    }\\n\\n    /**\\n     * @dev Modifier to make a function callable only when the contract is not paused.\\n     *\\n     * Requirements:\\n     *\\n     * - The contract must not be paused.\\n     */\\n    modifier whenNotPaused() {\\n        require(!paused(), \\\"Pausable: paused\\\");\\n        _;\\n    }\\n\\n    /**\\n     * @dev Modifier to make a function callable only when the contract is paused.\\n     *\\n     * Requirements:\\n     *\\n     * - The contract must be paused.\\n     */\\n    modifier whenPaused() {\\n        require(paused(), \\\"Pausable: not paused\\\");\\n        _;\\n    }\\n\\n    /**\\n     * @dev Triggers stopped state.\\n     *\\n     * Requirements:\\n     *\\n     * - The contract must not be paused.\\n     */\\n    function _pause() internal virtual whenNotPaused {\\n        _paused = true;\\n        emit Paused(_msgSender());\\n    }\\n\\n    /**\\n     * @dev Returns to normal state.\\n     *\\n     * Requirements:\\n     *\\n     * - The contract must be paused.\\n     */\\n    function _unpause() internal virtual whenPaused {\\n        _paused = false;\\n        emit Unpaused(_msgSender());\\n    }\\n\\n    /**\\n     * @dev This empty reserved space is put in place to allow future versions to add new\\n     * variables without shifting down storage in the inheritance chain.\\n     * See https://docs.openzeppelin.com/contracts/4.x/upgradeable#storage_gaps\\n     */\\n    uint256[49] private __gap;\\n}\\n\",\"keccak256\":\"0x041af89e5e60b74e1203d5a34614c9de379726f52ecb8cf064cab78b9fdcdf9d\",\"license\":\"MIT\"},\"@openzeppelin/contracts-upgradeable/token/ERC20/ERC20Upgradeable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.6.0) (token/ERC20/ERC20.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"./IERC20Upgradeable.sol\\\";\\nimport \\\"./extensions/IERC20MetadataUpgradeable.sol\\\";\\nimport \\\"../../utils/ContextUpgradeable.sol\\\";\\nimport \\\"../../proxy/utils/Initializable.sol\\\";\\n\\n/**\\n * @dev Implementation of the {IERC20} interface.\\n *\\n * This implementation is agnostic to the way tokens are created. This means\\n * that a supply mechanism has to be added in a derived contract using {_mint}.\\n * For a generic mechanism see {ERC20PresetMinterPauser}.\\n *\\n * TIP: For a detailed writeup see our guide\\n * https://forum.zeppelin.solutions/t/how-to-implement-erc20-supply-mechanisms/226[How\\n * to implement supply mechanisms].\\n *\\n * We have followed general OpenZeppelin Contracts guidelines: functions revert\\n * instead returning `false` on failure. This behavior is nonetheless\\n * conventional and does not conflict with the expectations of ERC20\\n * applications.\\n *\\n * Additionally, an {Approval} event is emitted on calls to {transferFrom}.\\n * This allows applications to reconstruct the allowance for all accounts just\\n * by listening to said events. Other implementations of the EIP may not emit\\n * these events, as it isn't required by the specification.\\n *\\n * Finally, the non-standard {decreaseAllowance} and {increaseAllowance}\\n * functions have been added to mitigate the well-known issues around setting\\n * allowances. See {IERC20-approve}.\\n */\\ncontract ERC20Upgradeable is Initializable, ContextUpgradeable, IERC20Upgradeable, IERC20MetadataUpgradeable {\\n    mapping(address => uint256) private _balances;\\n\\n    mapping(address => mapping(address => uint256)) private _allowances;\\n\\n    uint256 private _totalSupply;\\n\\n    string private _name;\\n    string private _symbol;\\n\\n    /**\\n     * @dev Sets the values for {name} and {symbol}.\\n     *\\n     * The default value of {decimals} is 18. To select a different value for\\n     * {decimals} you should overload it.\\n     *\\n     * All two of these values are immutable: they can only be set once during\\n     * construction.\\n     */\\n    function __ERC20_init(string memory name_, string memory symbol_) internal onlyInitializing {\\n        __ERC20_init_unchained(name_, symbol_);\\n    }\\n\\n    function __ERC20_init_unchained(string memory name_, string memory symbol_) internal onlyInitializing {\\n        _name = name_;\\n        _symbol = symbol_;\\n    }\\n\\n    /**\\n     * @dev Returns the name of the token.\\n     */\\n    function name() public view virtual override returns (string memory) {\\n        return _name;\\n    }\\n\\n    /**\\n     * @dev Returns the symbol of the token, usually a shorter version of the\\n     * name.\\n     */\\n    function symbol() public view virtual override returns (string memory) {\\n        return _symbol;\\n    }\\n\\n    /**\\n     * @dev Returns the number of decimals used to get its user representation.\\n     * For example, if `decimals` equals `2`, a balance of `505` tokens should\\n     * be displayed to a user as `5.05` (`505 / 10 ** 2`).\\n     *\\n     * Tokens usually opt for a value of 18, imitating the relationship between\\n     * Ether and Wei. This is the value {ERC20} uses, unless this function is\\n     * overridden;\\n     *\\n     * NOTE: This information is only used for _display_ purposes: it in\\n     * no way affects any of the arithmetic of the contract, including\\n     * {IERC20-balanceOf} and {IERC20-transfer}.\\n     */\\n    function decimals() public view virtual override returns (uint8) {\\n        return 18;\\n    }\\n\\n    /**\\n     * @dev See {IERC20-totalSupply}.\\n     */\\n    function totalSupply() public view virtual override returns (uint256) {\\n        return _totalSupply;\\n    }\\n\\n    /**\\n     * @dev See {IERC20-balanceOf}.\\n     */\\n    function balanceOf(address account) public view virtual override returns (uint256) {\\n        return _balances[account];\\n    }\\n\\n    /**\\n     * @dev See {IERC20-transfer}.\\n     *\\n     * Requirements:\\n     *\\n     * - `to` cannot be the zero address.\\n     * - the caller must have a balance of at least `amount`.\\n     */\\n    function transfer(address to, uint256 amount) public virtual override returns (bool) {\\n        address owner = _msgSender();\\n        _transfer(owner, to, amount);\\n        return true;\\n    }\\n\\n    /**\\n     * @dev See {IERC20-allowance}.\\n     */\\n    function allowance(address owner, address spender) public view virtual override returns (uint256) {\\n        return _allowances[owner][spender];\\n    }\\n\\n    /**\\n     * @dev See {IERC20-approve}.\\n     *\\n     * NOTE: If `amount` is the maximum `uint256`, the allowance is not updated on\\n     * `transferFrom`. This is semantically equivalent to an infinite approval.\\n     *\\n     * Requirements:\\n     *\\n     * - `spender` cannot be the zero address.\\n     */\\n    function approve(address spender, uint256 amount) public virtual override returns (bool) {\\n        address owner = _msgSender();\\n        _approve(owner, spender, amount);\\n        return true;\\n    }\\n\\n    /**\\n     * @dev See {IERC20-transferFrom}.\\n     *\\n     * Emits an {Approval} event indicating the updated allowance. This is not\\n     * required by the EIP. See the note at the beginning of {ERC20}.\\n     *\\n     * NOTE: Does not update the allowance if the current allowance\\n     * is the maximum `uint256`.\\n     *\\n     * Requirements:\\n     *\\n     * - `from` and `to` cannot be the zero address.\\n     * - `from` must have a balance of at least `amount`.\\n     * - the caller must have allowance for ``from``'s tokens of at least\\n     * `amount`.\\n     */\\n    function transferFrom(\\n        address from,\\n        address to,\\n        uint256 amount\\n    ) public virtual override returns (bool) {\\n        address spender = _msgSender();\\n        _spendAllowance(from, spender, amount);\\n        _transfer(from, to, amount);\\n        return true;\\n    }\\n\\n    /**\\n     * @dev Atomically increases the allowance granted to `spender` by the caller.\\n     *\\n     * This is an alternative to {approve} that can be used as a mitigation for\\n     * problems described in {IERC20-approve}.\\n     *\\n     * Emits an {Approval} event indicating the updated allowance.\\n     *\\n     * Requirements:\\n     *\\n     * - `spender` cannot be the zero address.\\n     */\\n    function increaseAllowance(address spender, uint256 addedValue) public virtual returns (bool) {\\n        address owner = _msgSender();\\n        _approve(owner, spender, allowance(owner, spender) + addedValue);\\n        return true;\\n    }\\n\\n    /**\\n     * @dev Atomically decreases the allowance granted to `spender` by the caller.\\n     *\\n     * This is an alternative to {approve} that can be used as a mitigation for\\n     * problems described in {IERC20-approve}.\\n     *\\n     * Emits an {Approval} event indicating the updated allowance.\\n     *\\n     * Requirements:\\n     *\\n     * - `spender` cannot be the zero address.\\n     * - `spender` must have allowance for the caller of at least\\n     * `subtractedValue`.\\n     */\\n    function decreaseAllowance(address spender, uint256 subtractedValue) public virtual returns (bool) {\\n        address owner = _msgSender();\\n        uint256 currentAllowance = allowance(owner, spender);\\n        require(currentAllowance >= subtractedValue, \\\"ERC20: decreased allowance below zero\\\");\\n        unchecked {\\n            _approve(owner, spender, currentAllowance - subtractedValue);\\n        }\\n\\n        return true;\\n    }\\n\\n    /**\\n     * @dev Moves `amount` of tokens from `sender` to `recipient`.\\n     *\\n     * This internal function is equivalent to {transfer}, and can be used to\\n     * e.g. implement automatic token fees, slashing mechanisms, etc.\\n     *\\n     * Emits a {Transfer} event.\\n     *\\n     * Requirements:\\n     *\\n     * - `from` cannot be the zero address.\\n     * - `to` cannot be the zero address.\\n     * - `from` must have a balance of at least `amount`.\\n     */\\n    function _transfer(\\n        address from,\\n        address to,\\n        uint256 amount\\n    ) internal virtual {\\n        require(from != address(0), \\\"ERC20: transfer from the zero address\\\");\\n        require(to != address(0), \\\"ERC20: transfer to the zero address\\\");\\n\\n        _beforeTokenTransfer(from, to, amount);\\n\\n        uint256 fromBalance = _balances[from];\\n        require(fromBalance >= amount, \\\"ERC20: transfer amount exceeds balance\\\");\\n        unchecked {\\n            _balances[from] = fromBalance - amount;\\n        }\\n        _balances[to] += amount;\\n\\n        emit Transfer(from, to, amount);\\n\\n        _afterTokenTransfer(from, to, amount);\\n    }\\n\\n    /** @dev Creates `amount` tokens and assigns them to `account`, increasing\\n     * the total supply.\\n     *\\n     * Emits a {Transfer} event with `from` set to the zero address.\\n     *\\n     * Requirements:\\n     *\\n     * - `account` cannot be the zero address.\\n     */\\n    function _mint(address account, uint256 amount) internal virtual {\\n        require(account != address(0), \\\"ERC20: mint to the zero address\\\");\\n\\n        _beforeTokenTransfer(address(0), account, amount);\\n\\n        _totalSupply += amount;\\n        _balances[account] += amount;\\n        emit Transfer(address(0), account, amount);\\n\\n        _afterTokenTransfer(address(0), account, amount);\\n    }\\n\\n    /**\\n     * @dev Destroys `amount` tokens from `account`, reducing the\\n     * total supply.\\n     *\\n     * Emits a {Transfer} event with `to` set to the zero address.\\n     *\\n     * Requirements:\\n     *\\n     * - `account` cannot be the zero address.\\n     * - `account` must have at least `amount` tokens.\\n     */\\n    function _burn(address account, uint256 amount) internal virtual {\\n        require(account != address(0), \\\"ERC20: burn from the zero address\\\");\\n\\n        _beforeTokenTransfer(account, address(0), amount);\\n\\n        uint256 accountBalance = _balances[account];\\n        require(accountBalance >= amount, \\\"ERC20: burn amount exceeds balance\\\");\\n        unchecked {\\n            _balances[account] = accountBalance - amount;\\n        }\\n        _totalSupply -= amount;\\n\\n        emit Transfer(account, address(0), amount);\\n\\n        _afterTokenTransfer(account, address(0), amount);\\n    }\\n\\n    /**\\n     * @dev Sets `amount` as the allowance of `spender` over the `owner` s tokens.\\n     *\\n     * This internal function is equivalent to `approve`, and can be used to\\n     * e.g. set automatic allowances for certain subsystems, etc.\\n     *\\n     * Emits an {Approval} event.\\n     *\\n     * Requirements:\\n     *\\n     * - `owner` cannot be the zero address.\\n     * - `spender` cannot be the zero address.\\n     */\\n    function _approve(\\n        address owner,\\n        address spender,\\n        uint256 amount\\n    ) internal virtual {\\n        require(owner != address(0), \\\"ERC20: approve from the zero address\\\");\\n        require(spender != address(0), \\\"ERC20: approve to the zero address\\\");\\n\\n        _allowances[owner][spender] = amount;\\n        emit Approval(owner, spender, amount);\\n    }\\n\\n    /**\\n     * @dev Updates `owner` s allowance for `spender` based on spent `amount`.\\n     *\\n     * Does not update the allowance amount in case of infinite allowance.\\n     * Revert if not enough allowance is available.\\n     *\\n     * Might emit an {Approval} event.\\n     */\\n    function _spendAllowance(\\n        address owner,\\n        address spender,\\n        uint256 amount\\n    ) internal virtual {\\n        uint256 currentAllowance = allowance(owner, spender);\\n        if (currentAllowance != type(uint256).max) {\\n            require(currentAllowance >= amount, \\\"ERC20: insufficient allowance\\\");\\n            unchecked {\\n                _approve(owner, spender, currentAllowance - amount);\\n            }\\n        }\\n    }\\n\\n    /**\\n     * @dev Hook that is called before any transfer of tokens. This includes\\n     * minting and burning.\\n     *\\n     * Calling conditions:\\n     *\\n     * - when `from` and `to` are both non-zero, `amount` of ``from``'s tokens\\n     * will be transferred to `to`.\\n     * - when `from` is zero, `amount` tokens will be minted for `to`.\\n     * - when `to` is zero, `amount` of ``from``'s tokens will be burned.\\n     * - `from` and `to` are never both zero.\\n     *\\n     * To learn more about hooks, head to xref:ROOT:extending-contracts.adoc#using-hooks[Using Hooks].\\n     */\\n    function _beforeTokenTransfer(\\n        address from,\\n        address to,\\n        uint256 amount\\n    ) internal virtual {}\\n\\n    /**\\n     * @dev Hook that is called after any transfer of tokens. This includes\\n     * minting and burning.\\n     *\\n     * Calling conditions:\\n     *\\n     * - when `from` and `to` are both non-zero, `amount` of ``from``'s tokens\\n     * has been transferred to `to`.\\n     * - when `from` is zero, `amount` tokens have been minted for `to`.\\n     * - when `to` is zero, `amount` of ``from``'s tokens have been burned.\\n     * - `from` and `to` are never both zero.\\n     *\\n     * To learn more about hooks, head to xref:ROOT:extending-contracts.adoc#using-hooks[Using Hooks].\\n     */\\n    function _afterTokenTransfer(\\n        address from,\\n        address to,\\n        uint256 amount\\n    ) internal virtual {}\\n\\n    /**\\n     * @dev This empty reserved space is put in place to allow future versions to add new\\n     * variables without shifting down storage in the inheritance chain.\\n     * See https://docs.openzeppelin.com/contracts/4.x/upgradeable#storage_gaps\\n     */\\n    uint256[45] private __gap;\\n}\\n\",\"keccak256\":\"0xb71b875e7f1b8ad082eb6ff83bca4bfa7d050476cc98fd39295826b654edfb46\",\"license\":\"MIT\"},\"@openzeppelin/contracts-upgradeable/token/ERC20/IERC20Upgradeable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.6.0) (token/ERC20/IERC20.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Interface of the ERC20 standard as defined in the EIP.\\n */\\ninterface IERC20Upgradeable {\\n    /**\\n     * @dev Emitted when `value` tokens are moved from one account (`from`) to\\n     * another (`to`).\\n     *\\n     * Note that `value` may be zero.\\n     */\\n    event Transfer(address indexed from, address indexed to, uint256 value);\\n\\n    /**\\n     * @dev Emitted when the allowance of a `spender` for an `owner` is set by\\n     * a call to {approve}. `value` is the new allowance.\\n     */\\n    event Approval(address indexed owner, address indexed spender, uint256 value);\\n\\n    /**\\n     * @dev Returns the amount of tokens in existence.\\n     */\\n    function totalSupply() external view returns (uint256);\\n\\n    /**\\n     * @dev Returns the amount of tokens owned by `account`.\\n     */\\n    function balanceOf(address account) external view returns (uint256);\\n\\n    /**\\n     * @dev Moves `amount` tokens from the caller's account to `to`.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transfer(address to, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Returns the remaining number of tokens that `spender` will be\\n     * allowed to spend on behalf of `owner` through {transferFrom}. This is\\n     * zero by default.\\n     *\\n     * This value changes when {approve} or {transferFrom} are called.\\n     */\\n    function allowance(address owner, address spender) external view returns (uint256);\\n\\n    /**\\n     * @dev Sets `amount` as the allowance of `spender` over the caller's tokens.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * IMPORTANT: Beware that changing an allowance with this method brings the risk\\n     * that someone may use both the old and the new allowance by unfortunate\\n     * transaction ordering. One possible solution to mitigate this race\\n     * condition is to first reduce the spender's allowance to 0 and set the\\n     * desired value afterwards:\\n     * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\\n     *\\n     * Emits an {Approval} event.\\n     */\\n    function approve(address spender, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Moves `amount` tokens from `from` to `to` using the\\n     * allowance mechanism. `amount` is then deducted from the caller's\\n     * allowance.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transferFrom(\\n        address from,\\n        address to,\\n        uint256 amount\\n    ) external returns (bool);\\n}\\n\",\"keccak256\":\"0x4e733d3164f73f461eaf9d8087a7ad1ea180bdc8ba0d3d61b0e1ae16d8e63dff\",\"license\":\"MIT\"},\"@openzeppelin/contracts-upgradeable/token/ERC20/extensions/ERC20BurnableUpgradeable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.5.0) (token/ERC20/extensions/ERC20Burnable.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../ERC20Upgradeable.sol\\\";\\nimport \\\"../../../utils/ContextUpgradeable.sol\\\";\\nimport \\\"../../../proxy/utils/Initializable.sol\\\";\\n\\n/**\\n * @dev Extension of {ERC20} that allows token holders to destroy both their own\\n * tokens and those that they have an allowance for, in a way that can be\\n * recognized off-chain (via event analysis).\\n */\\nabstract contract ERC20BurnableUpgradeable is Initializable, ContextUpgradeable, ERC20Upgradeable {\\n    function __ERC20Burnable_init() internal onlyInitializing {\\n    }\\n\\n    function __ERC20Burnable_init_unchained() internal onlyInitializing {\\n    }\\n    /**\\n     * @dev Destroys `amount` tokens from the caller.\\n     *\\n     * See {ERC20-_burn}.\\n     */\\n    function burn(uint256 amount) public virtual {\\n        _burn(_msgSender(), amount);\\n    }\\n\\n    /**\\n     * @dev Destroys `amount` tokens from `account`, deducting from the caller's\\n     * allowance.\\n     *\\n     * See {ERC20-_burn} and {ERC20-allowance}.\\n     *\\n     * Requirements:\\n     *\\n     * - the caller must have allowance for ``accounts``'s tokens of at least\\n     * `amount`.\\n     */\\n    function burnFrom(address account, uint256 amount) public virtual {\\n        _spendAllowance(account, _msgSender(), amount);\\n        _burn(account, amount);\\n    }\\n\\n    /**\\n     * @dev This empty reserved space is put in place to allow future versions to add new\\n     * variables without shifting down storage in the inheritance chain.\\n     * See https://docs.openzeppelin.com/contracts/4.x/upgradeable#storage_gaps\\n     */\\n    uint256[50] private __gap;\\n}\\n\",\"keccak256\":\"0xea2c6f9d434127bf36b1e3e5ebaaf6d28a64dbaeea560508e570014e905a5ad2\",\"license\":\"MIT\"},\"@openzeppelin/contracts-upgradeable/token/ERC20/extensions/IERC20MetadataUpgradeable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (token/ERC20/extensions/IERC20Metadata.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../IERC20Upgradeable.sol\\\";\\n\\n/**\\n * @dev Interface for the optional metadata functions from the ERC20 standard.\\n *\\n * _Available since v4.1._\\n */\\ninterface IERC20MetadataUpgradeable is IERC20Upgradeable {\\n    /**\\n     * @dev Returns the name of the token.\\n     */\\n    function name() external view returns (string memory);\\n\\n    /**\\n     * @dev Returns the symbol of the token.\\n     */\\n    function symbol() external view returns (string memory);\\n\\n    /**\\n     * @dev Returns the decimals places of the token.\\n     */\\n    function decimals() external view returns (uint8);\\n}\\n\",\"keccak256\":\"0x605434219ebbe4653f703640f06969faa5a1d78f0bfef878e5ddbb1ca369ceeb\",\"license\":\"MIT\"},\"@openzeppelin/contracts-upgradeable/token/ERC20/utils/SafeERC20Upgradeable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (token/ERC20/utils/SafeERC20.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../IERC20Upgradeable.sol\\\";\\nimport \\\"../../../utils/AddressUpgradeable.sol\\\";\\n\\n/**\\n * @title SafeERC20\\n * @dev Wrappers around ERC20 operations that throw on failure (when the token\\n * contract returns false). Tokens that return no value (and instead revert or\\n * throw on failure) are also supported, non-reverting calls are assumed to be\\n * successful.\\n * To use this library you can add a `using SafeERC20 for IERC20;` statement to your contract,\\n * which allows you to call the safe operations as `token.safeTransfer(...)`, etc.\\n */\\nlibrary SafeERC20Upgradeable {\\n    using AddressUpgradeable for address;\\n\\n    function safeTransfer(\\n        IERC20Upgradeable token,\\n        address to,\\n        uint256 value\\n    ) internal {\\n        _callOptionalReturn(token, abi.encodeWithSelector(token.transfer.selector, to, value));\\n    }\\n\\n    function safeTransferFrom(\\n        IERC20Upgradeable token,\\n        address from,\\n        address to,\\n        uint256 value\\n    ) internal {\\n        _callOptionalReturn(token, abi.encodeWithSelector(token.transferFrom.selector, from, to, value));\\n    }\\n\\n    /**\\n     * @dev Deprecated. This function has issues similar to the ones found in\\n     * {IERC20-approve}, and its usage is discouraged.\\n     *\\n     * Whenever possible, use {safeIncreaseAllowance} and\\n     * {safeDecreaseAllowance} instead.\\n     */\\n    function safeApprove(\\n        IERC20Upgradeable token,\\n        address spender,\\n        uint256 value\\n    ) internal {\\n        // safeApprove should only be called when setting an initial allowance,\\n        // or when resetting it to zero. To increase and decrease it, use\\n        // 'safeIncreaseAllowance' and 'safeDecreaseAllowance'\\n        require(\\n            (value == 0) || (token.allowance(address(this), spender) == 0),\\n            \\\"SafeERC20: approve from non-zero to non-zero allowance\\\"\\n        );\\n        _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, value));\\n    }\\n\\n    function safeIncreaseAllowance(\\n        IERC20Upgradeable token,\\n        address spender,\\n        uint256 value\\n    ) internal {\\n        uint256 newAllowance = token.allowance(address(this), spender) + value;\\n        _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, newAllowance));\\n    }\\n\\n    function safeDecreaseAllowance(\\n        IERC20Upgradeable token,\\n        address spender,\\n        uint256 value\\n    ) internal {\\n        unchecked {\\n            uint256 oldAllowance = token.allowance(address(this), spender);\\n            require(oldAllowance >= value, \\\"SafeERC20: decreased allowance below zero\\\");\\n            uint256 newAllowance = oldAllowance - value;\\n            _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, newAllowance));\\n        }\\n    }\\n\\n    /**\\n     * @dev Imitates a Solidity high-level call (i.e. a regular function call to a contract), relaxing the requirement\\n     * on the return value: the return value is optional (but if data is returned, it must not be false).\\n     * @param token The token targeted by the call.\\n     * @param data The call data (encoded using abi.encode or one of its variants).\\n     */\\n    function _callOptionalReturn(IERC20Upgradeable token, bytes memory data) private {\\n        // We need to perform a low level call here, to bypass Solidity's return data size checking mechanism, since\\n        // we're implementing it ourselves. We use {Address.functionCall} to perform this call, which verifies that\\n        // the target address contains contract code and also asserts for success in the low-level call.\\n\\n        bytes memory returndata = address(token).functionCall(data, \\\"SafeERC20: low-level call failed\\\");\\n        if (returndata.length > 0) {\\n            // Return data is optional\\n            require(abi.decode(returndata, (bool)), \\\"SafeERC20: ERC20 operation did not succeed\\\");\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0x3e26a49d2fa5ef8338b8a9467c91e54f417cb07e849b1cc0f4ebc4d2a147938e\",\"license\":\"MIT\"},\"@openzeppelin/contracts-upgradeable/utils/AddressUpgradeable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.5.0) (utils/Address.sol)\\n\\npragma solidity ^0.8.1;\\n\\n/**\\n * @dev Collection of functions related to the address type\\n */\\nlibrary AddressUpgradeable {\\n    /**\\n     * @dev Returns true if `account` is a contract.\\n     *\\n     * [IMPORTANT]\\n     * ====\\n     * It is unsafe to assume that an address for which this function returns\\n     * false is an externally-owned account (EOA) and not a contract.\\n     *\\n     * Among others, `isContract` will return false for the following\\n     * types of addresses:\\n     *\\n     *  - an externally-owned account\\n     *  - a contract in construction\\n     *  - an address where a contract will be created\\n     *  - an address where a contract lived, but was destroyed\\n     * ====\\n     *\\n     * [IMPORTANT]\\n     * ====\\n     * You shouldn't rely on `isContract` to protect against flash loan attacks!\\n     *\\n     * Preventing calls from contracts is highly discouraged. It breaks composability, breaks support for smart wallets\\n     * like Gnosis Safe, and does not provide security since it can be circumvented by calling from a contract\\n     * constructor.\\n     * ====\\n     */\\n    function isContract(address account) internal view returns (bool) {\\n        // This method relies on extcodesize/address.code.length, which returns 0\\n        // for contracts in construction, since the code is only stored at the end\\n        // of the constructor execution.\\n\\n        return account.code.length > 0;\\n    }\\n\\n    /**\\n     * @dev Replacement for Solidity's `transfer`: sends `amount` wei to\\n     * `recipient`, forwarding all available gas and reverting on errors.\\n     *\\n     * https://eips.ethereum.org/EIPS/eip-1884[EIP1884] increases the gas cost\\n     * of certain opcodes, possibly making contracts go over the 2300 gas limit\\n     * imposed by `transfer`, making them unable to receive funds via\\n     * `transfer`. {sendValue} removes this limitation.\\n     *\\n     * https://diligence.consensys.net/posts/2019/09/stop-using-soliditys-transfer-now/[Learn more].\\n     *\\n     * IMPORTANT: because control is transferred to `recipient`, care must be\\n     * taken to not create reentrancy vulnerabilities. Consider using\\n     * {ReentrancyGuard} or the\\n     * https://solidity.readthedocs.io/en/v0.5.11/security-considerations.html#use-the-checks-effects-interactions-pattern[checks-effects-interactions pattern].\\n     */\\n    function sendValue(address payable recipient, uint256 amount) internal {\\n        require(address(this).balance >= amount, \\\"Address: insufficient balance\\\");\\n\\n        (bool success, ) = recipient.call{value: amount}(\\\"\\\");\\n        require(success, \\\"Address: unable to send value, recipient may have reverted\\\");\\n    }\\n\\n    /**\\n     * @dev Performs a Solidity function call using a low level `call`. A\\n     * plain `call` is an unsafe replacement for a function call: use this\\n     * function instead.\\n     *\\n     * If `target` reverts with a revert reason, it is bubbled up by this\\n     * function (like regular Solidity function calls).\\n     *\\n     * Returns the raw returned data. To convert to the expected return value,\\n     * use https://solidity.readthedocs.io/en/latest/units-and-global-variables.html?highlight=abi.decode#abi-encoding-and-decoding-functions[`abi.decode`].\\n     *\\n     * Requirements:\\n     *\\n     * - `target` must be a contract.\\n     * - calling `target` with `data` must not revert.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCall(address target, bytes memory data) internal returns (bytes memory) {\\n        return functionCall(target, data, \\\"Address: low-level call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`], but with\\n     * `errorMessage` as a fallback revert reason when `target` reverts.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, 0, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but also transferring `value` wei to `target`.\\n     *\\n     * Requirements:\\n     *\\n     * - the calling contract must have an ETH balance of at least `value`.\\n     * - the called Solidity function must be `payable`.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCallWithValue(\\n        address target,\\n        bytes memory data,\\n        uint256 value\\n    ) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, value, \\\"Address: low-level call with value failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCallWithValue-address-bytes-uint256-}[`functionCallWithValue`], but\\n     * with `errorMessage` as a fallback revert reason when `target` reverts.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCallWithValue(\\n        address target,\\n        bytes memory data,\\n        uint256 value,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        require(address(this).balance >= value, \\\"Address: insufficient balance for call\\\");\\n        require(isContract(target), \\\"Address: call to non-contract\\\");\\n\\n        (bool success, bytes memory returndata) = target.call{value: value}(data);\\n        return verifyCallResult(success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but performing a static call.\\n     *\\n     * _Available since v3.3._\\n     */\\n    function functionStaticCall(address target, bytes memory data) internal view returns (bytes memory) {\\n        return functionStaticCall(target, data, \\\"Address: low-level static call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\\n     * but performing a static call.\\n     *\\n     * _Available since v3.3._\\n     */\\n    function functionStaticCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal view returns (bytes memory) {\\n        require(isContract(target), \\\"Address: static call to non-contract\\\");\\n\\n        (bool success, bytes memory returndata) = target.staticcall(data);\\n        return verifyCallResult(success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Tool to verifies that a low level call was successful, and revert if it wasn't, either by bubbling the\\n     * revert reason using the provided one.\\n     *\\n     * _Available since v4.3._\\n     */\\n    function verifyCallResult(\\n        bool success,\\n        bytes memory returndata,\\n        string memory errorMessage\\n    ) internal pure returns (bytes memory) {\\n        if (success) {\\n            return returndata;\\n        } else {\\n            // Look for revert reason and bubble it up if present\\n            if (returndata.length > 0) {\\n                // The easiest way to bubble the revert reason is using memory via assembly\\n\\n                assembly {\\n                    let returndata_size := mload(returndata)\\n                    revert(add(32, returndata), returndata_size)\\n                }\\n            } else {\\n                revert(errorMessage);\\n            }\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0x55cf2bd9fc76704ddcdc19834cd288b7de00fc0f298a40ea16a954ae8991db2d\",\"license\":\"MIT\"},\"@openzeppelin/contracts-upgradeable/utils/ContextUpgradeable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (utils/Context.sol)\\n\\npragma solidity ^0.8.0;\\nimport \\\"../proxy/utils/Initializable.sol\\\";\\n\\n/**\\n * @dev Provides information about the current execution context, including the\\n * sender of the transaction and its data. While these are generally available\\n * via msg.sender and msg.data, they should not be accessed in such a direct\\n * manner, since when dealing with meta-transactions the account sending and\\n * paying for execution may not be the actual sender (as far as an application\\n * is concerned).\\n *\\n * This contract is only required for intermediate, library-like contracts.\\n */\\nabstract contract ContextUpgradeable is Initializable {\\n    function __Context_init() internal onlyInitializing {\\n    }\\n\\n    function __Context_init_unchained() internal onlyInitializing {\\n    }\\n    function _msgSender() internal view virtual returns (address) {\\n        return msg.sender;\\n    }\\n\\n    function _msgData() internal view virtual returns (bytes calldata) {\\n        return msg.data;\\n    }\\n\\n    /**\\n     * @dev This empty reserved space is put in place to allow future versions to add new\\n     * variables without shifting down storage in the inheritance chain.\\n     * See https://docs.openzeppelin.com/contracts/4.x/upgradeable#storage_gaps\\n     */\\n    uint256[50] private __gap;\\n}\\n\",\"keccak256\":\"0x963ea7f0b48b032eef72fe3a7582edf78408d6f834115b9feadd673a4d5bd149\",\"license\":\"MIT\"},\"@openzeppelin/contracts-upgradeable/utils/StringsUpgradeable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (utils/Strings.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev String operations.\\n */\\nlibrary StringsUpgradeable {\\n    bytes16 private constant _HEX_SYMBOLS = \\\"0123456789abcdef\\\";\\n\\n    /**\\n     * @dev Converts a `uint256` to its ASCII `string` decimal representation.\\n     */\\n    function toString(uint256 value) internal pure returns (string memory) {\\n        // Inspired by OraclizeAPI's implementation - MIT licence\\n        // https://github.com/oraclize/ethereum-api/blob/b42146b063c7d6ee1358846c198246239e9360e8/oraclizeAPI_0.4.25.sol\\n\\n        if (value == 0) {\\n            return \\\"0\\\";\\n        }\\n        uint256 temp = value;\\n        uint256 digits;\\n        while (temp != 0) {\\n            digits++;\\n            temp /= 10;\\n        }\\n        bytes memory buffer = new bytes(digits);\\n        while (value != 0) {\\n            digits -= 1;\\n            buffer[digits] = bytes1(uint8(48 + uint256(value % 10)));\\n            value /= 10;\\n        }\\n        return string(buffer);\\n    }\\n\\n    /**\\n     * @dev Converts a `uint256` to its ASCII `string` hexadecimal representation.\\n     */\\n    function toHexString(uint256 value) internal pure returns (string memory) {\\n        if (value == 0) {\\n            return \\\"0x00\\\";\\n        }\\n        uint256 temp = value;\\n        uint256 length = 0;\\n        while (temp != 0) {\\n            length++;\\n            temp >>= 8;\\n        }\\n        return toHexString(value, length);\\n    }\\n\\n    /**\\n     * @dev Converts a `uint256` to its ASCII `string` hexadecimal representation with fixed length.\\n     */\\n    function toHexString(uint256 value, uint256 length) internal pure returns (string memory) {\\n        bytes memory buffer = new bytes(2 * length + 2);\\n        buffer[0] = \\\"0\\\";\\n        buffer[1] = \\\"x\\\";\\n        for (uint256 i = 2 * length + 1; i > 1; --i) {\\n            buffer[i] = _HEX_SYMBOLS[value & 0xf];\\n            value >>= 4;\\n        }\\n        require(value == 0, \\\"Strings: hex length insufficient\\\");\\n        return string(buffer);\\n    }\\n}\\n\",\"keccak256\":\"0x398d3323c1932a5986bf36be7c57593e121e69d5db5b6574b4ee0d031443de37\",\"license\":\"MIT\"},\"@openzeppelin/contracts-upgradeable/utils/introspection/ERC165Upgradeable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (utils/introspection/ERC165.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"./IERC165Upgradeable.sol\\\";\\nimport \\\"../../proxy/utils/Initializable.sol\\\";\\n\\n/**\\n * @dev Implementation of the {IERC165} interface.\\n *\\n * Contracts that want to implement ERC165 should inherit from this contract and override {supportsInterface} to check\\n * for the additional interface id that will be supported. For example:\\n *\\n * ```solidity\\n * function supportsInterface(bytes4 interfaceId) public view virtual override returns (bool) {\\n *     return interfaceId == type(MyInterface).interfaceId || super.supportsInterface(interfaceId);\\n * }\\n * ```\\n *\\n * Alternatively, {ERC165Storage} provides an easier to use but more expensive implementation.\\n */\\nabstract contract ERC165Upgradeable is Initializable, IERC165Upgradeable {\\n    function __ERC165_init() internal onlyInitializing {\\n    }\\n\\n    function __ERC165_init_unchained() internal onlyInitializing {\\n    }\\n    /**\\n     * @dev See {IERC165-supportsInterface}.\\n     */\\n    function supportsInterface(bytes4 interfaceId) public view virtual override returns (bool) {\\n        return interfaceId == type(IERC165Upgradeable).interfaceId;\\n    }\\n\\n    /**\\n     * @dev This empty reserved space is put in place to allow future versions to add new\\n     * variables without shifting down storage in the inheritance chain.\\n     * See https://docs.openzeppelin.com/contracts/4.x/upgradeable#storage_gaps\\n     */\\n    uint256[50] private __gap;\\n}\\n\",\"keccak256\":\"0x9a3b990bd56d139df3e454a9edf1c64668530b5a77fc32eb063bc206f958274a\",\"license\":\"MIT\"},\"@openzeppelin/contracts-upgradeable/utils/introspection/IERC165Upgradeable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (utils/introspection/IERC165.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Interface of the ERC165 standard, as defined in the\\n * https://eips.ethereum.org/EIPS/eip-165[EIP].\\n *\\n * Implementers can declare support of contract interfaces, which can then be\\n * queried by others ({ERC165Checker}).\\n *\\n * For an implementation, see {ERC165}.\\n */\\ninterface IERC165Upgradeable {\\n    /**\\n     * @dev Returns true if this contract implements the interface defined by\\n     * `interfaceId`. See the corresponding\\n     * https://eips.ethereum.org/EIPS/eip-165#how-interfaces-are-identified[EIP section]\\n     * to learn more about how these ids are created.\\n     *\\n     * This function call must use less than 30 000 gas.\\n     */\\n    function supportsInterface(bytes4 interfaceId) external view returns (bool);\\n}\\n\",\"keccak256\":\"0xc6cef87559d0aeffdf0a99803de655938a7779ec0a3cd5d4383483ad85565a09\",\"license\":\"MIT\"},\"@openzeppelin/contracts-upgradeable/utils/math/SafeMathUpgradeable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.6.0) (utils/math/SafeMath.sol)\\n\\npragma solidity ^0.8.0;\\n\\n// CAUTION\\n// This version of SafeMath should only be used with Solidity 0.8 or later,\\n// because it relies on the compiler's built in overflow checks.\\n\\n/**\\n * @dev Wrappers over Solidity's arithmetic operations.\\n *\\n * NOTE: `SafeMath` is generally not needed starting with Solidity 0.8, since the compiler\\n * now has built in overflow checking.\\n */\\nlibrary SafeMathUpgradeable {\\n    /**\\n     * @dev Returns the addition of two unsigned integers, with an overflow flag.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function tryAdd(uint256 a, uint256 b) internal pure returns (bool, uint256) {\\n        unchecked {\\n            uint256 c = a + b;\\n            if (c < a) return (false, 0);\\n            return (true, c);\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the subtraction of two unsigned integers, with an overflow flag.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function trySub(uint256 a, uint256 b) internal pure returns (bool, uint256) {\\n        unchecked {\\n            if (b > a) return (false, 0);\\n            return (true, a - b);\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the multiplication of two unsigned integers, with an overflow flag.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function tryMul(uint256 a, uint256 b) internal pure returns (bool, uint256) {\\n        unchecked {\\n            // Gas optimization: this is cheaper than requiring 'a' not being zero, but the\\n            // benefit is lost if 'b' is also tested.\\n            // See: https://github.com/OpenZeppelin/openzeppelin-contracts/pull/522\\n            if (a == 0) return (true, 0);\\n            uint256 c = a * b;\\n            if (c / a != b) return (false, 0);\\n            return (true, c);\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the division of two unsigned integers, with a division by zero flag.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function tryDiv(uint256 a, uint256 b) internal pure returns (bool, uint256) {\\n        unchecked {\\n            if (b == 0) return (false, 0);\\n            return (true, a / b);\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the remainder of dividing two unsigned integers, with a division by zero flag.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function tryMod(uint256 a, uint256 b) internal pure returns (bool, uint256) {\\n        unchecked {\\n            if (b == 0) return (false, 0);\\n            return (true, a % b);\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the addition of two unsigned integers, reverting on\\n     * overflow.\\n     *\\n     * Counterpart to Solidity's `+` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - Addition cannot overflow.\\n     */\\n    function add(uint256 a, uint256 b) internal pure returns (uint256) {\\n        return a + b;\\n    }\\n\\n    /**\\n     * @dev Returns the subtraction of two unsigned integers, reverting on\\n     * overflow (when the result is negative).\\n     *\\n     * Counterpart to Solidity's `-` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - Subtraction cannot overflow.\\n     */\\n    function sub(uint256 a, uint256 b) internal pure returns (uint256) {\\n        return a - b;\\n    }\\n\\n    /**\\n     * @dev Returns the multiplication of two unsigned integers, reverting on\\n     * overflow.\\n     *\\n     * Counterpart to Solidity's `*` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - Multiplication cannot overflow.\\n     */\\n    function mul(uint256 a, uint256 b) internal pure returns (uint256) {\\n        return a * b;\\n    }\\n\\n    /**\\n     * @dev Returns the integer division of two unsigned integers, reverting on\\n     * division by zero. The result is rounded towards zero.\\n     *\\n     * Counterpart to Solidity's `/` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - The divisor cannot be zero.\\n     */\\n    function div(uint256 a, uint256 b) internal pure returns (uint256) {\\n        return a / b;\\n    }\\n\\n    /**\\n     * @dev Returns the remainder of dividing two unsigned integers. (unsigned integer modulo),\\n     * reverting when dividing by zero.\\n     *\\n     * Counterpart to Solidity's `%` operator. This function uses a `revert`\\n     * opcode (which leaves remaining gas untouched) while Solidity uses an\\n     * invalid opcode to revert (consuming all remaining gas).\\n     *\\n     * Requirements:\\n     *\\n     * - The divisor cannot be zero.\\n     */\\n    function mod(uint256 a, uint256 b) internal pure returns (uint256) {\\n        return a % b;\\n    }\\n\\n    /**\\n     * @dev Returns the subtraction of two unsigned integers, reverting with custom message on\\n     * overflow (when the result is negative).\\n     *\\n     * CAUTION: This function is deprecated because it requires allocating memory for the error\\n     * message unnecessarily. For custom revert reasons use {trySub}.\\n     *\\n     * Counterpart to Solidity's `-` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - Subtraction cannot overflow.\\n     */\\n    function sub(\\n        uint256 a,\\n        uint256 b,\\n        string memory errorMessage\\n    ) internal pure returns (uint256) {\\n        unchecked {\\n            require(b <= a, errorMessage);\\n            return a - b;\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the integer division of two unsigned integers, reverting with custom message on\\n     * division by zero. The result is rounded towards zero.\\n     *\\n     * Counterpart to Solidity's `/` operator. Note: this function uses a\\n     * `revert` opcode (which leaves remaining gas untouched) while Solidity\\n     * uses an invalid opcode to revert (consuming all remaining gas).\\n     *\\n     * Requirements:\\n     *\\n     * - The divisor cannot be zero.\\n     */\\n    function div(\\n        uint256 a,\\n        uint256 b,\\n        string memory errorMessage\\n    ) internal pure returns (uint256) {\\n        unchecked {\\n            require(b > 0, errorMessage);\\n            return a / b;\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the remainder of dividing two unsigned integers. (unsigned integer modulo),\\n     * reverting with custom message when dividing by zero.\\n     *\\n     * CAUTION: This function is deprecated because it requires allocating memory for the error\\n     * message unnecessarily. For custom revert reasons use {tryMod}.\\n     *\\n     * Counterpart to Solidity's `%` operator. This function uses a `revert`\\n     * opcode (which leaves remaining gas untouched) while Solidity uses an\\n     * invalid opcode to revert (consuming all remaining gas).\\n     *\\n     * Requirements:\\n     *\\n     * - The divisor cannot be zero.\\n     */\\n    function mod(\\n        uint256 a,\\n        uint256 b,\\n        string memory errorMessage\\n    ) internal pure returns (uint256) {\\n        unchecked {\\n            require(b > 0, errorMessage);\\n            return a % b;\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0xcaa8b7861115ea691c77ddbeac140a444e0edcd1d9812a43942c0f6b42b36a49\",\"license\":\"MIT\"},\"contracts/BridgedToken.sol\":{\"content\":\"// SPDX-License-Identifier: UNLICENSED\\n\\npragma solidity ^0.8.0;\\npragma experimental ABIEncoderV2;\\n\\nimport \\\"@openzeppelin/contracts-upgradeable/token/ERC20/extensions/ERC20BurnableUpgradeable.sol\\\";\\nimport \\\"@openzeppelin/contracts-upgradeable/token/ERC20/ERC20Upgradeable.sol\\\";\\nimport \\\"@openzeppelin/contracts-upgradeable/access/OwnableUpgradeable.sol\\\";\\n\\ncontract BridgedToken is\\n    ERC20Upgradeable,\\n    ERC20BurnableUpgradeable,\\n    OwnableUpgradeable\\n{\\n    function initialize(\\n        string memory name,\\n        string memory symbol,\\n        uint8 decimals\\n    ) external initializer {\\n        __ERC20_init(name, symbol);\\n        __ERC20Burnable_init();\\n        // decimals(decimals);\\n        // _setupDecimals(decimals);\\n    }\\n\\n    function mint(address to, uint256 amount) external onlyOwner {\\n        _mint(to, amount);\\n    }\\n}\\n\",\"keccak256\":\"0xf394c2f98146c6f47c68b01a30d5b98fb4f4e8b7dc9fb8c567c9131b75552546\",\"license\":\"UNLICENSED\"},\"contracts/HarmonyLightClient.sol\":{\"content\":\"// SPDX-License-Identifier: UNLICENSED\\n\\npragma solidity ^0.8.0;\\npragma experimental ABIEncoderV2;\\n\\nimport \\\"./HarmonyParser.sol\\\";\\nimport \\\"./lib/SafeCast.sol\\\";\\nimport \\\"@openzeppelin/contracts-upgradeable/utils/math/SafeMathUpgradeable.sol\\\";\\nimport \\\"@openzeppelin/contracts-upgradeable/access/AccessControlUpgradeable.sol\\\";\\n// import \\\"openzeppelin-solidity/contracts/utils/Pausable.sol\\\";\\nimport \\\"@openzeppelin/contracts-upgradeable/security/PausableUpgradeable.sol\\\";\\n// import \\\"openzeppelin-solidity/contracts/proxy/Initializable.sol\\\";\\nimport \\\"@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol\\\";\\n\\ncontract HarmonyLightClient is\\n    Initializable,\\n    PausableUpgradeable,\\n    AccessControlUpgradeable\\n{\\n    using SafeCast for *;\\n    using SafeMathUpgradeable for uint256;\\n\\n    struct BlockHeader {\\n        bytes32 parentHash;\\n        bytes32 stateRoot;\\n        bytes32 transactionsRoot;\\n        bytes32 receiptsRoot;\\n        uint256 number;\\n        uint256 epoch;\\n        uint256 shard;\\n        uint256 time;\\n        bytes32 mmrRoot;\\n        bytes32 hash;\\n    }\\n\\n    event CheckPoint(\\n        bytes32 stateRoot,\\n        bytes32 transactionsRoot,\\n        bytes32 receiptsRoot,\\n        uint256 number,\\n        uint256 epoch,\\n        uint256 shard,\\n        uint256 time,\\n        bytes32 mmrRoot,\\n        bytes32 hash\\n    );\\n\\n    BlockHeader firstBlock;\\n    BlockHeader lastCheckPointBlock;\\n\\n    // epoch to block numbers, as there could be >=1 mmr entries per epoch\\n    mapping(uint256 => uint256[]) epochCheckPointBlockNumbers;\\n\\n    // block number to BlockHeader\\n    mapping(uint256 => BlockHeader) checkPointBlocks;\\n\\n    mapping(uint256 => mapping(bytes32 => bool)) epochMmrRoots;\\n\\n    uint8 relayerThreshold;\\n\\n    event RelayerThresholdChanged(uint256 newThreshold);\\n    event RelayerAdded(address relayer);\\n    event RelayerRemoved(address relayer);\\n\\n    bytes32 public constant RELAYER_ROLE = keccak256(\\\"RELAYER_ROLE\\\");\\n\\n    // number of the oldest epoch that stored, we use this to prune the expired epochs from state\\n    uint256 public oldestEpochStored;\\n    uint256 private constant BLOCK_EXPIRED = 30 days;\\n    uint256 private constant MAX_PRUNE_ONCE = 2;\\n\\n\\n    modifier onlyAdmin() {\\n        require(hasRole(DEFAULT_ADMIN_ROLE, msg.sender), \\\"sender doesn't have admin role\\\");\\n        _;\\n    }\\n\\n    modifier onlyRelayers() {\\n        require(hasRole(RELAYER_ROLE, msg.sender), \\\"sender doesn't have relayer role\\\");\\n        _;\\n    }\\n\\n    function adminPauseLightClient() external onlyAdmin {\\n        _pause();\\n    }\\n\\n    function adminUnpauseLightClient() external onlyAdmin {\\n        _unpause();\\n    }\\n\\n    function renounceAdmin(address newAdmin) external onlyAdmin {\\n        require(msg.sender != newAdmin, 'cannot renounce self');\\n        grantRole(DEFAULT_ADMIN_ROLE, newAdmin);\\n        renounceRole(DEFAULT_ADMIN_ROLE, msg.sender);\\n    }\\n\\n    function adminChangeRelayerThreshold(uint256 newThreshold) external onlyAdmin {\\n        relayerThreshold = newThreshold.toUint8();\\n        emit RelayerThresholdChanged(newThreshold);\\n    }\\n\\n    function adminAddRelayer(address relayerAddress) external onlyAdmin {\\n        require(!hasRole(RELAYER_ROLE, relayerAddress), \\\"addr already has relayer role!\\\");\\n        grantRole(RELAYER_ROLE, relayerAddress);\\n        emit RelayerAdded(relayerAddress);\\n    }\\n\\n    function adminRemoveRelayer(address relayerAddress) external onlyAdmin {\\n        require(hasRole(RELAYER_ROLE, relayerAddress), \\\"addr doesn't have relayer role!\\\");\\n        revokeRole(RELAYER_ROLE, relayerAddress);\\n        emit RelayerRemoved(relayerAddress);\\n    }\\n\\n    function initialize(\\n        bytes memory firstRlpHeader,\\n        address[] memory initialRelayers,\\n        uint8 initialRelayerThreshold\\n    ) external initializer {\\n        HarmonyParser.BlockHeader memory header = HarmonyParser.toBlockHeader(\\n            firstRlpHeader\\n        );\\n        \\n        firstBlock.parentHash = header.parentHash;\\n        firstBlock.stateRoot = header.stateRoot;\\n        firstBlock.transactionsRoot = header.transactionsRoot;\\n        firstBlock.receiptsRoot = header.receiptsRoot;\\n        firstBlock.number = header.number;\\n        firstBlock.epoch = header.epoch;\\n        firstBlock.shard = header.shardID;\\n        firstBlock.time = header.timestamp;\\n        firstBlock.mmrRoot = HarmonyParser.toBytes32(header.mmrRoot);\\n        firstBlock.hash = header.hash;\\n        oldestEpochStored = header.epoch;\\n        \\n        epochCheckPointBlockNumbers[header.epoch].push(header.number);\\n        checkPointBlocks[header.number] = firstBlock;\\n\\n        epochMmrRoots[header.epoch][firstBlock.mmrRoot] = true;\\n\\n        relayerThreshold = initialRelayerThreshold;\\n        _setupRole(DEFAULT_ADMIN_ROLE, msg.sender);\\n        for (uint256 i; i < initialRelayers.length; i++) {\\n            grantRole(RELAYER_ROLE, initialRelayers[i]);\\n        }\\n\\n    }\\n\\n    function _deleteEpoch(uint256 epochNo) private {\\n        uint256[] storage blockNumbers = epochCheckPointBlockNumbers[epochNo];\\n        for(uint256 i = 0; i < blockNumbers.length; i++) {\\n            uint256 blockNo = blockNumbers[i];\\n            bytes32 mmrRoot = checkPointBlocks[blockNo].mmrRoot;\\n            delete checkPointBlocks[blockNo];\\n            delete epochMmrRoots[epochNo][mmrRoot];\\n        }\\n        delete epochCheckPointBlockNumbers[epochNo];\\n    }\\n \\n    function _pruneEpochs(uint256 pruneTime) private {\\n        uint256 epochCur = oldestEpochStored;\\n        if (epochCheckPointBlockNumbers[epochCur].length == 0) return;\\n        for(uint256 i = 0; i < MAX_PRUNE_ONCE; i++) {\\n            uint256 epochNo = epochCur++;\\n            uint256[] storage epochBlockNumbers = epochCheckPointBlockNumbers[epochCur];\\n            uint256 epochBlockCount = epochBlockNumbers.length;\\n            if (epochBlockCount == 0) break;\\n            if (checkPointBlocks[epochBlockNumbers[epochBlockCount-1]].time > pruneTime) break;\\n            _deleteEpoch(epochNo);\\n        }\\n        if(epochCur > oldestEpochStored) oldestEpochStored = epochCur;\\n    }\\n\\n    function submitCheckpoint(bytes memory rlpHeader) external onlyRelayers whenNotPaused {\\n        _pruneEpochs(block.timestamp - BLOCK_EXPIRED);\\n        HarmonyParser.BlockHeader memory header = HarmonyParser.toBlockHeader(\\n            rlpHeader\\n        );\\n\\n        BlockHeader memory checkPointBlock;\\n        \\n        checkPointBlock.parentHash = header.parentHash;\\n        checkPointBlock.stateRoot = header.stateRoot;\\n        checkPointBlock.transactionsRoot = header.transactionsRoot;\\n        checkPointBlock.receiptsRoot = header.receiptsRoot;\\n        checkPointBlock.number = header.number;\\n        checkPointBlock.epoch = header.epoch;\\n        checkPointBlock.shard = header.shardID;\\n        checkPointBlock.time = header.timestamp;\\n        checkPointBlock.mmrRoot = HarmonyParser.toBytes32(header.mmrRoot);\\n        checkPointBlock.hash = header.hash;\\n        \\n        epochCheckPointBlockNumbers[header.epoch].push(header.number);\\n        checkPointBlocks[header.number] = checkPointBlock;\\n\\n        epochMmrRoots[header.epoch][checkPointBlock.mmrRoot] = true;\\n        emit CheckPoint(\\n            checkPointBlock.stateRoot,\\n            checkPointBlock.transactionsRoot,\\n            checkPointBlock.receiptsRoot,\\n            checkPointBlock.number,\\n            checkPointBlock.epoch,\\n            checkPointBlock.shard,\\n            checkPointBlock.time,\\n            checkPointBlock.mmrRoot,\\n            checkPointBlock.hash\\n        );\\n    }\\n\\n    function getLatestCheckPoint(uint256 blockNumber, uint256 epoch)\\n        public\\n        view\\n        returns (BlockHeader memory checkPointBlock)\\n    {\\n        require(\\n            epochCheckPointBlockNumbers[epoch].length > 0,\\n            \\\"no checkpoints for epoch\\\"\\n        );\\n        uint256[] memory checkPointBlockNumbers = epochCheckPointBlockNumbers[epoch];\\n        uint256 nearest = 0;\\n        for (uint256 i = 0; i < checkPointBlockNumbers.length; i++) {\\n            uint256 checkPointBlockNumber = checkPointBlockNumbers[i];\\n            if (\\n                checkPointBlockNumber > blockNumber &&\\n                checkPointBlockNumber < nearest\\n            ) {\\n                nearest = checkPointBlockNumber;\\n            }\\n        }\\n        checkPointBlock = checkPointBlocks[nearest];\\n    }\\n\\n    function isValidCheckPoint(uint256 epoch, bytes32 mmrRoot) public view returns (bool status) {\\n        return epochMmrRoots[epoch][mmrRoot];\\n    }\\n}\\n\",\"keccak256\":\"0x80d4bd94ad856871d0e2b907cc1afc6930210bb0ec274cad03956b1546142034\",\"license\":\"UNLICENSED\"},\"contracts/HarmonyParser.sol\":{\"content\":\"// SPDX-License-Identifier: UNLICENSED\\n\\npragma solidity ^0.8.0;\\npragma experimental ABIEncoderV2;\\n\\nimport \\\"./lib/RLPReader.sol\\\";\\nimport \\\"./lib/RLPEncode.sol\\\";\\n\\nlibrary HarmonyParser {\\n    using RLPReader for bytes;\\n    using RLPReader for uint256;\\n    using RLPReader for RLPReader.RLPItem;\\n    using RLPReader for RLPReader.Iterator;\\n\\n    using RLPEncode for bytes;\\n    using RLPEncode for bytes[];\\n\\n    struct BlockHeader {\\n        bytes32 hash;\\n        bytes32 parentHash;\\n        address miner;\\n        bytes32 stateRoot;\\n        bytes32 transactionsRoot;\\n        bytes32 receiptsRoot;\\n        bytes32 outgoingReceiptsRoot;\\n        bytes32 incomingReceiptsRoot;\\n        bytes logsBloom;\\n        uint256 number;\\n        uint256 gasLimit;\\n        uint256 gasUsed;\\n        uint256 timestamp;\\n        bytes extraData;\\n        bytes32 mixHash;\\n        uint256 viewID;\\n        uint256 epoch;\\n        uint256 shardID;\\n        bytes lastCommitSignature;\\n        bytes lastCommitBitmap;\\n        bytes vrf;\\n        bytes vdf;\\n        bytes shardState;\\n        bytes crossLink;\\n        bytes slashes;\\n        bytes mmrRoot;\\n    }\\n\\n    struct Account {\\n        uint256 nonce;\\n        uint256 balance;\\n        bytes32 storageRoot;\\n        bytes32 codeHash;\\n    }\\n\\n    struct Transaction {\\n        uint256 nonce;\\n        uint256 gasPrice;\\n        uint256 gas;\\n        uint256 shardID;\\n        uint256 toShardID;\\n        address to;\\n        uint256 value;\\n        bytes input;\\n        uint8 v;\\n        bytes32 r;\\n        bytes32 s;\\n    }\\n\\n    struct Log {\\n        address contractAddress;\\n        bytes32[] topics;\\n        bytes data;\\n    }\\n\\n    struct TransactionReceipt {\\n        bytes32 transactionHash;\\n        uint256 transactionIndex;\\n        bytes32 blockHash;\\n        uint256 blockNumber;\\n        address from;\\n        address to;\\n        uint256 gasUsed;\\n        uint256 cummulativeGasUsed;\\n        address contractAddress;\\n        Log[] logs;\\n        uint256 status; // root?\\n        bytes logsBloom;\\n        uint8 v;\\n        bytes32 r;\\n        bytes32 s;\\n    }\\n\\n    struct TransactionReceiptTrie {\\n        uint8 status;\\n        uint256 gasUsed;\\n        bytes logsBloom;\\n        Log[] logs;\\n    }\\n\\n    function getBlockRlpData(BlockHeader memory header)\\n        internal\\n        pure\\n        returns (bytes memory data)\\n    {\\n        bytes[] memory list = new bytes[](15);\\n\\n        list[0] = RLPEncode.encodeBytes(abi.encodePacked(header.parentHash));\\n        list[1] = RLPEncode.encodeAddress(header.miner);\\n        list[2] = RLPEncode.encodeBytes(abi.encodePacked(header.stateRoot));\\n        list[3] = RLPEncode.encodeBytes(\\n            abi.encodePacked(header.transactionsRoot)\\n        );\\n        list[4] = RLPEncode.encodeBytes(abi.encodePacked(header.receiptsRoot));\\n        list[5] = RLPEncode.encodeBytes(\\n            abi.encodePacked(header.outgoingReceiptsRoot)\\n        );\\n        list[6] = RLPEncode.encodeBytes(\\n            abi.encodePacked(header.incomingReceiptsRoot)\\n        );\\n        list[7] = RLPEncode.encodeBytes(header.logsBloom);\\n        list[8] = RLPEncode.encodeUint(header.number);\\n        list[9] = RLPEncode.encodeUint(header.gasLimit);\\n        list[10] = RLPEncode.encodeUint(header.gasUsed);\\n        list[11] = RLPEncode.encodeUint(header.timestamp);\\n        list[12] = RLPEncode.encodeBytes(header.extraData);\\n        list[13] = RLPEncode.encodeBytes(abi.encodePacked(header.mixHash));\\n\\n        list[14] = RLPEncode.encodeUint(header.viewID);\\n        list[15] = RLPEncode.encodeUint(header.epoch);\\n        list[16] = RLPEncode.encodeUint(header.shardID);\\n\\n        list[17] = RLPEncode.encodeBytes(header.lastCommitSignature);\\n        list[18] = RLPEncode.encodeBytes(header.lastCommitBitmap);\\n        list[19] = RLPEncode.encodeBytes(header.vrf);\\n        list[20] = RLPEncode.encodeBytes(header.vdf);\\n\\n        list[21] = RLPEncode.encodeBytes(header.shardState);\\n        list[22] = RLPEncode.encodeBytes(header.crossLink);\\n        list[23] = RLPEncode.encodeBytes(header.slashes);\\n        list[24] = RLPEncode.encodeBytes(header.mmrRoot);\\n\\n        data = RLPEncode.encodeList(list);\\n    }\\n\\n    /**\\n     * Parse RLP-encoded block header into BlockHeader data structure\\n     *  @param rlpHeader: RLP-encoded block header with data fields order as defined in the BlockHeader struct\\n     **/\\n    function toBlockHeader(bytes memory rlpHeader)\\n        internal\\n        pure\\n        returns (BlockHeader memory header)\\n    {\\n        RLPReader.Iterator memory it = rlpHeader.toRlpItem().iterator();\\n        // skip two dummy header fields\\n        it.next();\\n        it.next();\\n        it = it.next().iterator();\\n        uint256 idx;\\n        while (it.hasNext()) {\\n            if (idx == 0) header.parentHash = bytes32(it.next().toUint());\\n            else if (idx == 1) header.miner = it.next().toAddress();\\n            else if (idx == 2) header.stateRoot = bytes32(it.next().toUint());\\n            else if (idx == 3)\\n                header.transactionsRoot = bytes32(it.next().toUint());\\n            else if (idx == 4)\\n                header.receiptsRoot = bytes32(it.next().toUint());\\n            else if (idx == 5)\\n                header.outgoingReceiptsRoot = bytes32(it.next().toUint());\\n            else if (idx == 6)\\n                header.incomingReceiptsRoot = bytes32(it.next().toUint());\\n            else if (idx == 7) header.logsBloom = it.next().toBytes();\\n            else if (idx == 8) header.number = it.next().toUint();\\n            else if (idx == 9) header.gasLimit = it.next().toUint();\\n            else if (idx == 10) header.gasUsed = it.next().toUint();\\n            else if (idx == 11) header.timestamp = it.next().toUint();\\n            else if (idx == 12) header.extraData = it.next().toBytes();\\n            else if (idx == 13) header.mixHash = bytes32(it.next().toUint());\\n            else if (idx == 14) header.viewID = it.next().toUint();\\n            else if (idx == 15) header.epoch = it.next().toUint();\\n            else if (idx == 16) header.shardID = it.next().toUint();\\n            else if (idx == 17)\\n                header.lastCommitSignature = it.next().toBytes();\\n            else if (idx == 18) header.lastCommitBitmap = it.next().toBytes();\\n            else if (idx == 19) header.vrf = it.next().toBytes();\\n            else if (idx == 20) header.vdf = it.next().toBytes();\\n            else if (idx == 21) header.shardState = it.next().toBytes();\\n            else if (idx == 22) header.crossLink = it.next().toBytes();\\n            else if (idx == 23) header.slashes = it.next().toBytes();\\n            else if (idx == 24) header.mmrRoot = it.next().toBytes();\\n            else it.next();\\n\\n            idx++;\\n        }\\n        header.hash = keccak256(rlpHeader);\\n    }\\n\\n    function getFirstKey(bytes memory keys) public returns (bytes memory) {\\n        RLPReader.Iterator memory it = keys.toRlpItem().iterator();\\n        while (it.hasNext()) {\\n            bytes memory key = it.next().toBytes();\\n            return key;\\n        }\\n    }\\n\\n    function calcBlockHeaderHash(bytes memory rlpHeader)\\n        internal\\n        pure\\n        returns (uint256)\\n    {\\n        return uint256(keccak256(rlpHeader));\\n    }\\n\\n    function calcBlockSealHash(bytes memory rlpHeader)\\n        internal\\n        pure\\n        returns (uint256)\\n    {\\n        bytes[] memory rlpFields = new bytes[](13);\\n        RLPReader.Iterator memory it = rlpHeader.toRlpItem().iterator();\\n        uint256 idx = 0;\\n        while (it.hasNext() && idx < 13) {\\n            rlpFields[idx] = it.next().toRlpBytes();\\n            idx++;\\n        }\\n\\n        bytes memory toSealRlpData = rlpFields.encodeList();\\n        return uint256(keccak256(toSealRlpData));\\n    }\\n\\n    function getBlockHash(BlockHeader memory header)\\n        internal\\n        pure\\n        returns (bytes32 hash)\\n    {\\n        return keccak256(getBlockRlpData(header));\\n    }\\n\\n    function getLog(Log memory log) internal pure returns (bytes memory data) {\\n        bytes[] memory list = new bytes[](3);\\n        bytes[] memory topics = new bytes[](log.topics.length);\\n\\n        for (uint256 i = 0; i < log.topics.length; i++) {\\n            topics[i] = RLPEncode.encodeBytes(abi.encodePacked(log.topics[i]));\\n        }\\n\\n        list[0] = RLPEncode.encodeAddress(log.contractAddress);\\n        list[1] = RLPEncode.encodeList(topics);\\n        list[2] = RLPEncode.encodeBytes(log.data);\\n        data = RLPEncode.encodeList(list);\\n    }\\n\\n    function getReceiptRlpData(TransactionReceiptTrie memory receipt)\\n        internal\\n        pure\\n        returns (bytes memory data)\\n    {\\n        bytes[] memory list = new bytes[](4);\\n\\n        bytes[] memory logs = new bytes[](receipt.logs.length);\\n        for (uint256 i = 0; i < receipt.logs.length; i++) {\\n            logs[i] = getLog(receipt.logs[i]);\\n        }\\n\\n        list[0] = RLPEncode.encodeUint(receipt.status);\\n        list[1] = RLPEncode.encodeUint(receipt.gasUsed);\\n        list[2] = RLPEncode.encodeBytes(receipt.logsBloom);\\n        list[3] = RLPEncode.encodeList(logs);\\n        data = RLPEncode.encodeList(list);\\n    }\\n\\n    function toReceiptLog(bytes memory data)\\n        internal\\n        pure\\n        returns (Log memory log)\\n    {\\n        RLPReader.Iterator memory it = RLPReader.toRlpItem(data).iterator();\\n\\n        uint256 idx;\\n        while (it.hasNext()) {\\n            if (idx == 0) {\\n                log.contractAddress = it.next().toAddress();\\n            } else if (idx == 1) {\\n                RLPReader.RLPItem[] memory list = it.next().toList();\\n                log.topics = new bytes32[](list.length);\\n                for (uint256 i = 0; i < list.length; i++) {\\n                    bytes32 topic = bytes32(list[i].toUint());\\n                    log.topics[i] = topic;\\n                }\\n            } else if (idx == 2) log.data = it.next().toBytes();\\n            else it.next();\\n            idx++;\\n        }\\n    }\\n\\n    function toReceipt(bytes memory data)\\n        internal\\n        pure\\n        returns (TransactionReceiptTrie memory receipt)\\n    {\\n        RLPReader.Iterator memory it = RLPReader.toRlpItem(data).iterator();\\n\\n        uint256 idx;\\n        while (it.hasNext()) {\\n            if (idx == 0) receipt.status = uint8(it.next().toUint());\\n            else if (idx == 1) receipt.gasUsed = it.next().toUint();\\n            else if (idx == 2) receipt.logsBloom = it.next().toBytes();\\n            else if (idx == 3) {\\n                RLPReader.RLPItem[] memory list = it.next().toList();\\n                receipt.logs = new Log[](list.length);\\n                for (uint256 i = 0; i < list.length; i++) {\\n                    receipt.logs[i] = toReceiptLog(list[i].toRlpBytes());\\n                }\\n            } else it.next();\\n            idx++;\\n        }\\n    }\\n\\n    function getTransactionRaw(Transaction memory transaction, uint256 chainId)\\n        internal\\n        pure\\n        returns (bytes memory data)\\n    {\\n        bytes[] memory list = new bytes[](9);\\n\\n        list[0] = RLPEncode.encodeUint(transaction.nonce);\\n        list[1] = RLPEncode.encodeUint(transaction.gasPrice);\\n        list[2] = RLPEncode.encodeUint(transaction.gas);\\n        list[3] = RLPEncode.encodeUint(transaction.shardID);\\n        list[4] = RLPEncode.encodeUint(transaction.toShardID);\\n        list[5] = RLPEncode.encodeAddress(transaction.to);\\n        list[6] = RLPEncode.encodeUint(transaction.value);\\n        list[7] = RLPEncode.encodeBytes(transaction.input);\\n        list[8] = RLPEncode.encodeUint(chainId);\\n        list[9] = RLPEncode.encodeUint(0);\\n        list[10] = RLPEncode.encodeUint(0);\\n        data = RLPEncode.encodeList(list);\\n    }\\n\\n    /**\\n     * @param rlpTx: RLP-encoded tx with data fields order as defined in the Tx struct\\n     **/\\n    function toTransaction(bytes memory rlpTx)\\n        internal\\n        pure\\n        returns (Transaction memory transaction)\\n    {\\n        RLPReader.Iterator memory it = rlpTx.toRlpItem().iterator();\\n        uint256 idx;\\n        while (it.hasNext()) {\\n            if (idx == 0) transaction.nonce = it.next().toUint();\\n            else if (idx == 1) transaction.gasPrice = it.next().toUint();\\n            else if (idx == 2) transaction.gas = it.next().toUint();\\n            else if (idx == 3) transaction.shardID = it.next().toUint();\\n            else if (idx == 4) transaction.toShardID = it.next().toUint();\\n            else if (idx == 5) transaction.to = it.next().toAddress();\\n            else if (idx == 6) transaction.value = it.next().toUint();\\n            else if (idx == 7) transaction.input = it.next().toBytes();\\n            else if (idx == 8) transaction.v = uint8(it.next().toUint());\\n            else if (idx == 9) transaction.r = it.next().toBytes32();\\n            else if (idx == 10) transaction.s = it.next().toBytes32();\\n            else it.next();\\n            idx++;\\n        }\\n        return transaction;\\n    }\\n\\n    function toAccount(bytes memory data)\\n        internal\\n        pure\\n        returns (Account memory account)\\n    {\\n        RLPReader.Iterator memory it = RLPReader.toRlpItem(data).iterator();\\n\\n        uint256 idx;\\n        while (it.hasNext()) {\\n            if (idx == 0) account.nonce = it.next().toUint();\\n            else if (idx == 1) account.balance = it.next().toUint();\\n            else if (idx == 2)\\n                account.storageRoot = toBytes32(it.next().toBytes());\\n            else if (idx == 3)\\n                account.codeHash = toBytes32(it.next().toBytes());\\n            else it.next();\\n            idx++;\\n        }\\n    }\\n\\n    function toBytes32(bytes memory data)\\n        internal\\n        pure\\n        returns (bytes32 _data)\\n    {\\n        assembly {\\n            _data := mload(add(data, 32))\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0x31c79dd20aae7b23f420b93609ead77763f216b58e0e8bfbefcf3fcecdd1071c\",\"license\":\"UNLICENSED\"},\"contracts/HarmonyProver.sol\":{\"content\":\"// SPDX-License-Identifier: UNLICENSED\\n\\npragma solidity ^0.8.0;\\npragma experimental ABIEncoderV2;\\n\\n// largely based on\\n// https://github.com/loredanacirstea/goldengate/blob/master/contracts/contracts/Prover.sol\\n\\nimport \\\"./HarmonyParser.sol\\\";\\nimport \\\"./HarmonyLightClient.sol\\\";\\nimport \\\"./lib/MMRVerifier.sol\\\";\\nimport \\\"./lib/ECVerify.sol\\\";\\nimport \\\"./lib/MPTValidatorV2.sol\\\";\\n\\nlibrary HarmonyProver {\\n    using HarmonyProver for MerkleProof;\\n\\n    struct MerkleProof {\\n        bytes32 root;\\n        uint256 paths;\\n        bytes proof;\\n    }\\n\\n    function verifyTrieProof(MerkleProof memory data)\\n        internal\\n        pure\\n        returns (bytes memory)\\n    {\\n        return MPTValidatorV2.validateProof(data.root, data.paths, data.proof);\\n    }\\n\\n    function verifyHeader(\\n        HarmonyParser.BlockHeader memory header,\\n        MMRVerifier.MMRProof memory proof\\n    ) internal pure returns (bool valid, string memory reason) {\\n        bytes32 blockHash = HarmonyParser.getBlockHash(header);\\n        if (blockHash != header.hash)\\n            return (false, \\\"Header data or hash invalid\\\");\\n\\n        // Check block hash was registered in light client\\n        valid = MMRVerifier.inclusionProof(\\n            proof.root,\\n            proof.width,\\n            proof.index,\\n            blockHash,\\n            proof.peaks,\\n            proof.siblings\\n        );\\n        if (!valid) return (false, \\\"verifyHeader - invalid proof\\\");\\n\\n        return (true, \\\"\\\");\\n    }\\n\\n    function verifyTransaction(\\n        HarmonyParser.BlockHeader memory header,\\n        MerkleProof memory txdata\\n    ) internal pure returns (bytes memory serializedTx) {\\n        require(header.transactionsRoot == txdata.root, \\\"verifyTransaction - different trie roots\\\");\\n        return txdata.verifyTrieProof();\\n    }\\n\\n    function verifyReceipt(\\n        HarmonyParser.BlockHeader memory header,\\n        MerkleProof memory receiptdata\\n    ) internal pure returns (bytes memory serializedReceipt) {\\n        require(header.receiptsRoot == receiptdata.root, \\\"verifyReceipt - different trie roots\\\");\\n        return receiptdata.verifyTrieProof();\\n    }\\n\\n    function verifyAccount(\\n        HarmonyParser.BlockHeader memory header,\\n        MerkleProof memory accountdata\\n    ) internal pure returns (bytes memory serializedAccount) {\\n        require(header.stateRoot == accountdata.root, \\\"verifyAccount - different trie roots\\\");\\n        return accountdata.verifyTrieProof();\\n    }\\n\\n    function verifyLog(\\n        MerkleProof memory receiptdata,\\n        uint256 logIndex\\n    ) internal pure returns (bytes memory logdata) {\\n        bytes memory serializedReceipt = receiptdata.verifyTrieProof();\\n        HarmonyParser.TransactionReceiptTrie memory receipt = HarmonyParser\\n            .toReceipt(serializedReceipt);\\n        return HarmonyParser.getLog(receipt.logs[logIndex]);\\n    }\\n\\n    function verifyTransactionAndStatus(\\n        HarmonyParser.BlockHeader memory header,\\n        MerkleProof memory receiptdata\\n    ) internal pure returns (bool valid, string memory reason) {}\\n\\n    function verifyCode(\\n        HarmonyParser.BlockHeader memory header,\\n        MerkleProof memory accountdata\\n    ) internal pure returns (bool valid, string memory reason) {}\\n\\n    function verifyStorage(\\n        MerkleProof memory accountProof,\\n        MerkleProof memory storageProof\\n    ) internal pure returns (bytes memory data) {\\n        HarmonyParser.Account memory account = HarmonyParser.toAccount(\\n            accountProof.verifyTrieProof()\\n        );\\n        require(account.storageRoot == storageProof.root, \\\"verifyStorage - different trie roots\\\");\\n        return storageProof.verifyTrieProof();\\n    }\\n\\n    function getTransactionSender(\\n        bytes memory txdata,\\n        uint256 chainId\\n    ) internal pure returns (address sender) {\\n        HarmonyParser.Transaction memory transaction = HarmonyParser\\n            .toTransaction(txdata);\\n        bytes memory txraw = HarmonyParser.getTransactionRaw(\\n            transaction,\\n            chainId\\n        );\\n\\n        bytes32 message_hash = keccak256(txraw);\\n        sender = ECVerify.ecverify(\\n            message_hash,\\n            transaction.v,\\n            transaction.r,\\n            transaction.s\\n        );\\n    }\\n\\n    function getTransactionHash(bytes memory signedTransaction)\\n        internal\\n        pure\\n        returns (bytes32 hash)\\n    {\\n        hash = keccak256(signedTransaction);\\n    }\\n\\n    function getBlockHash(HarmonyParser.BlockHeader memory header)\\n        internal\\n        pure\\n        returns (bytes32 hash)\\n    {\\n        return keccak256(getBlockRlpData(header));\\n    }\\n\\n    function getBlockRlpData(HarmonyParser.BlockHeader memory header)\\n        internal\\n        pure\\n        returns (bytes memory data)\\n    {\\n        return HarmonyParser.getBlockRlpData(header);\\n    }\\n\\n    function toBlockHeader(bytes memory data)\\n        internal\\n        pure\\n        returns (HarmonyParser.BlockHeader memory header)\\n    {\\n        return HarmonyParser.toBlockHeader(data);\\n    }\\n\\n    function getLog(HarmonyParser.Log memory log)\\n        internal\\n        pure\\n        returns (bytes memory data)\\n    {\\n        return HarmonyParser.getLog(log);\\n    }\\n\\n    function getReceiptRlpData(\\n        HarmonyParser.TransactionReceiptTrie memory receipt\\n    ) internal pure returns (bytes memory data) {\\n        return HarmonyParser.getReceiptRlpData(receipt);\\n    }\\n\\n    function toReceiptLog(bytes memory data)\\n        internal\\n        pure\\n        returns (HarmonyParser.Log memory log)\\n    {\\n        return HarmonyParser.toReceiptLog(data);\\n    }\\n\\n    function toReceipt(bytes memory data)\\n        internal\\n        pure\\n        returns (HarmonyParser.TransactionReceiptTrie memory receipt)\\n    {\\n        return HarmonyParser.toReceipt(data);\\n    }\\n\\n    function toTransaction(bytes memory data)\\n        internal\\n        pure\\n        returns (HarmonyParser.Transaction memory transaction)\\n    {\\n        return HarmonyParser.toTransaction(data);\\n    }\\n\\n    function toAccount(bytes memory data)\\n        internal\\n        pure\\n        returns (HarmonyParser.Account memory account)\\n    {\\n        return HarmonyParser.toAccount(data);\\n    }\\n}\\n\",\"keccak256\":\"0x89ebdd50c3c8e87b652520218dc31037bd7f504c13f3fd4fec007ab2d6603e53\",\"license\":\"UNLICENSED\"},\"contracts/TokenLocker.sol\":{\"content\":\"// SPDX-License-Identifier: UNLICENSED\\n\\npragma solidity ^0.8.0;\\npragma experimental ABIEncoderV2;\\n\\nimport \\\"./lib/RLPReader.sol\\\";\\nimport \\\"./BridgedToken.sol\\\";\\nimport \\\"./TokenRegistry.sol\\\";\\nimport \\\"@openzeppelin/contracts-upgradeable/token/ERC20/utils/SafeERC20Upgradeable.sol\\\";\\nimport \\\"@openzeppelin/contracts-upgradeable/token/ERC20/ERC20Upgradeable.sol\\\";\\nimport \\\"@openzeppelin/contracts-upgradeable/token/ERC20/IERC20Upgradeable.sol\\\";\\nimport \\\"@openzeppelin/contracts-upgradeable/access/OwnableUpgradeable.sol\\\";\\nimport \\\"@openzeppelin/contracts-upgradeable/utils/math/SafeMathUpgradeable.sol\\\";\\n// import \\\"openzeppelin-solidity/contracts/token/ERC20/IERC20.sol\\\";\\n// import \\\"openzeppelin-solidity/contracts/token/ERC20/ERC20.sol\\\";\\n// import \\\"openzeppelin-solidity/contracts/token/ERC20/SafeERC20.sol\\\";\\n// import \\\"openzeppelin-solidity/contracts/access/Ownable.sol\\\";\\n// import \\\"openzeppelin-solidity/contracts/math/SafeMath.sol\\\";\\n\\ncontract TokenLocker is TokenRegistry {\\n    using RLPReader for RLPReader.RLPItem;\\n    using RLPReader for bytes;\\n    using SafeERC20Upgradeable for IERC20Upgradeable;\\n    using SafeMathUpgradeable for uint256;\\n\\n    event Locked(\\n        address indexed token,\\n        address indexed sender,\\n        uint256 amount,\\n        address recipient\\n    );\\n\\n    event Burn(\\n        address indexed token,\\n        address indexed sender,\\n        uint256 amount,\\n        address recipient\\n    );\\n\\n    bytes32 constant lockEventSig =\\n        keccak256(\\\"Locked(address,address,uint256,address)\\\");\\n    bytes32 constant burnEventSig =\\n        keccak256(\\\"Burn(address,address,uint256,address)\\\");\\n\\n    address public otherSideBridge;\\n\\n    function unlock(\\n        BridgedToken token,\\n        address recipient,\\n        uint256 amount\\n    ) external {\\n        require(recipient != address(0), \\\"recipient is a zero address\\\");\\n        require(\\n            RxMappedInv[address(token)] != address(0),\\n            \\\"bridge does not exist\\\"\\n        );\\n        token.burnFrom(msg.sender, amount);\\n        emit Burn(address(token), msg.sender, amount, recipient);\\n    }\\n\\n    function lock(\\n        IERC20Upgradeable token,\\n        address recipient,\\n        uint256 amount\\n    ) external {\\n        require(recipient != address(0), \\\"recipient is a zero address\\\");\\n        require(\\n            TxMapped[address(token)] != address(0),\\n            \\\"bridge does not exist\\\"\\n        );\\n        // grabbing the actual amount that is transferred\\n        uint256 balanceBefore = token.balanceOf(address(this));\\n        token.safeTransferFrom(msg.sender, address(this), amount);\\n        uint256 balanceAfter = token.balanceOf(address(this));\\n        uint256 actualAmount = balanceAfter.sub(balanceBefore);\\n        emit Locked(address(token), msg.sender, actualAmount, recipient);\\n    }\\n\\n    function toReceiptItems(bytes memory rlpdata) private pure returns(RLPReader.RLPItem[] memory receipt) {\\n        RLPReader.RLPItem memory stacks = rlpdata.toRlpItem();\\n        if(rlpdata[0] <= 0x7f) { // if rlpdata[0] between [0,0x7f], it means TransactionType of EIP-2718.\\n            stacks.memPtr += 1;\\n            stacks.len -= 1;\\n        }\\n        return stacks.toList();\\n    }\\n\\n    function execute(bytes memory rlpdata) internal returns (uint256 events) {\\n        RLPReader.RLPItem[] memory receipt = toReceiptItems(rlpdata);\\n        // TODO: check txs is revert or not\\n        uint256 postStateOrStatus = receipt[0].toUint();\\n        require(postStateOrStatus == 1, \\\"revert receipt\\\");\\n        RLPReader.RLPItem[] memory logs = receipt[3].toList();\\n        for (uint256 i = 0; i < logs.length; i++) {\\n            RLPReader.RLPItem[] memory rlpLog = logs[i].toList();\\n            address Address = rlpLog[0].toAddress();\\n            if (Address != otherSideBridge) continue;\\n            RLPReader.RLPItem[] memory Topics = rlpLog[1].toList(); // TODO: if is lock event\\n            bytes32[] memory topics = new bytes32[](Topics.length);\\n            for (uint256 j = 0; j < Topics.length; j++) {\\n                topics[j] = bytes32(Topics[j].toUint());\\n            }\\n            bytes memory Data = rlpLog[2].toBytes();\\n            if (topics[0] == lockEventSig) {\\n                onLockEvent(topics, Data);\\n                events++;\\n                continue;\\n            }\\n            if (topics[0] == burnEventSig) {\\n                onBurnEvent(topics, Data);\\n                events++;\\n                continue;\\n            }\\n            if (topics[0] == TokenMapReqEventSig) {\\n                onTokenMapReqEvent(topics, Data);\\n                events++;\\n                continue;\\n            }\\n            if (topics[0] == TokenMapAckEventSig) {\\n                onTokenMapAckEvent(topics);\\n                events++;\\n                continue;\\n            }\\n        }\\n    }\\n\\n    //This argument passing is an excellent example of how to get around stack too deep\\n    function onBurnEvent(bytes32[] memory topics, bytes memory data) private {\\n        address token = address(uint160(uint256(topics[1])));\\n        //address sender = address(uint160(uint256(topics[2])));\\n        (uint256 amount, address recipient) = abi.decode(\\n            data,\\n            (uint256, address)\\n        );\\n        IERC20Upgradeable lockedToken = TxMappedInv[token];\\n        lockedToken.safeTransfer(recipient, amount);\\n    }\\n\\n    function onLockEvent(bytes32[] memory topics, bytes memory data) private {\\n        address token = address(uint160(uint256(topics[1])));\\n        //address sender = address(uint160(uint256(topics[2])));\\n        (uint256 amount, address recipient) = abi.decode(\\n            data,\\n            (uint256, address)\\n        );\\n        BridgedToken mintToken = RxMapped[token];\\n        require(address(mintToken) != address(0));\\n        mintToken.mint(recipient, amount);\\n    }\\n}\\n\",\"keccak256\":\"0x1ba0a065fbbfd12c1e6c3759be8fa786a622f09e833cf535ef47baba745c8d70\",\"license\":\"UNLICENSED\"},\"contracts/TokenLockerOnEthereum.sol\":{\"content\":\"// SPDX-License-Identifier: UNLICENSED\\n\\npragma solidity ^0.8.0;\\npragma experimental ABIEncoderV2;\\n\\nimport \\\"./HarmonyLightClient.sol\\\";\\nimport \\\"./lib/MMRVerifier.sol\\\";\\nimport \\\"./HarmonyProver.sol\\\";\\nimport \\\"./TokenLocker.sol\\\";\\nimport \\\"@openzeppelin/contracts-upgradeable/access/OwnableUpgradeable.sol\\\";\\n\\ncontract TokenLockerOnEthereum is TokenLocker, OwnableUpgradeable {\\n    HarmonyLightClient public lightclient;\\n\\n    mapping(bytes32 => bool) public spentReceipt;\\n\\n    function initialize() external initializer {\\n        __Ownable_init();\\n    }\\n\\n    function changeLightClient(HarmonyLightClient newClient)\\n        external\\n        onlyOwner\\n    {\\n        lightclient = newClient;\\n    }\\n\\n    function bind(address otherSide) external onlyOwner {\\n        otherSideBridge = otherSide;\\n    }\\n\\n    function validateAndExecuteProof(\\n        HarmonyParser.BlockHeader memory header,\\n        MMRVerifier.MMRProof memory mmrProof,\\n        HarmonyProver.MerkleProof memory receiptdata\\n    ) external {\\n        require(lightclient.isValidCheckPoint(header.epoch, mmrProof.root), \\\"checkpoint validation failed\\\");\\n        bytes32 blockHash = HarmonyParser.getBlockHash(header);\\n        bytes32 rootHash = header.receiptsRoot;\\n        (bool status, string memory message) = HarmonyProver.verifyHeader(\\n            header,\\n            mmrProof\\n        );\\n        require(rootHash == receiptdata.root, \\\"invalid proof root\\\");\\n        require(status, \\\"block header could not be verified\\\");\\n        bytes32 receiptHash = keccak256(\\n            abi.encodePacked(blockHash, rootHash, receiptdata.paths)\\n        );\\n        require(spentReceipt[receiptHash] == false, \\\"double spent!\\\");\\n        spentReceipt[receiptHash] = true;\\n        bytes memory receipt = HarmonyProver.verifyReceipt(header, receiptdata);\\n        uint256 executedEvents = execute(receipt);\\n        require(executedEvents > 0, \\\"no valid event\\\");\\n    }\\n}\\n\",\"keccak256\":\"0x2d5186581afb527ed48d6cc9c7c1bbc76c206a7e6902fc2c5c0ad7689656b281\",\"license\":\"UNLICENSED\"},\"contracts/TokenRegistry.sol\":{\"content\":\"// SPDX-License-Identifier: UNLICENSED\\n\\npragma solidity ^0.8.0;\\npragma experimental ABIEncoderV2;\\n\\nimport \\\"./lib/RLPReader.sol\\\";\\n// import \\\"openzeppelin-solidity/contracts/token/ERC20/IERC20.sol\\\";\\nimport \\\"@openzeppelin/contracts-upgradeable/token/ERC20/IERC20Upgradeable.sol\\\";\\nimport \\\"@openzeppelin/contracts-upgradeable/token/ERC20/ERC20Upgradeable.sol\\\";\\n// import \\\"openzeppelin-solidity/contracts/token/ERC20/SafeERC20.sol\\\";\\nimport \\\"@openzeppelin/contracts-upgradeable/token/ERC20/utils/SafeERC20Upgradeable.sol\\\";\\nimport \\\"./BridgedToken.sol\\\";\\n\\ncontract TokenRegistry {\\n    using RLPReader for RLPReader.RLPItem;\\n    using RLPReader for bytes;\\n    using SafeERC20Upgradeable for IERC20Upgradeable;\\n\\n    event TokenMapReq(\\n        address indexed tokenReq,\\n        uint8 indexed decimals,\\n        string name,\\n        string symbol\\n    );\\n\\n    event TokenMapAck(address indexed tokenReq, address indexed tokenAck);\\n\\n    bytes32 constant TokenMapReqEventSig =\\n        keccak256(\\\"TokenMapReq(address,uint8,string,string)\\\");\\n    bytes32 constant TokenMapAckEventSig =\\n        keccak256(\\\"TokenMapAck(address,address)\\\");\\n\\n    IERC20Upgradeable[] public TxTokens; // thisSide locked ERC20 list\\n    BridgedToken[] public RxTokens; // bridged token list, keys of\\n\\n    // TX means token issued in this chain, and cross to another chain\\n    mapping(address => address) public TxMapped; // thisSide locked => otherSide mint\\n    mapping(address => IERC20Upgradeable) public TxMappedInv; // inverse KV\\n\\n    // RX means token issued in another chain, and cross to this chain.\\n    mapping(address => BridgedToken) public RxMapped; // otherSide locked => thisSide mint\\n    mapping(address => address) public RxMappedInv; // inverse KV\\n\\n    function totalBridgedTokens() external view returns (uint256, uint256) {\\n        return (TxTokens.length, RxTokens.length);\\n    }\\n\\n    function issueTokenMapReq(ERC20Upgradeable thisSideToken)\\n        external\\n    {\\n        require(\\n            TxMapped[address(thisSideToken)] == address(0),\\n            \\\"token is already mapped\\\"\\n        );\\n        ERC20Upgradeable tokenDetail = thisSideToken;\\n        emit TokenMapReq(\\n            address(thisSideToken),\\n            tokenDetail.decimals(),\\n            tokenDetail.name(),\\n            tokenDetail.symbol()\\n        );\\n    }\\n\\n    function onTokenMapReqEvent(bytes32[] memory topics, bytes memory data)\\n        internal\\n    {\\n        // event TokenMapReq(address indexed tokenReq, uint256 decimals, string name, string symbol);\\n        address tokenReq = address(uint160(uint256(topics[1])));\\n        require(\\n            address(RxMapped[tokenReq]) == address(0),\\n            \\\"bridge already exist\\\"\\n        );\\n        uint8 decimals = uint8(uint256(topics[2]));\\n        (string memory name, string memory symbol) = abi.decode(\\n            data,\\n            (string, string)\\n        );\\n        bytes32 salt = bytes32(uint256(uint160(tokenReq)));\\n        BridgedToken mintAddress = new BridgedToken{salt: salt}();\\n        mintAddress.initialize(\\n            name,\\n            symbol,\\n            decimals\\n        );\\n        RxMappedInv[address(mintAddress)] = tokenReq;\\n        RxMapped[tokenReq] = mintAddress;\\n        RxTokens.push(mintAddress);\\n        emit TokenMapAck(tokenReq, address(mintAddress));\\n    }\\n\\n    function onTokenMapAckEvent(bytes32[] memory topics)\\n        internal\\n    {\\n        address tokenReq = address(uint160(uint256(topics[1])));\\n        address tokenAck = address(uint160(uint256(topics[2])));\\n        require(\\n            TxMapped[tokenReq] == address(0),\\n            \\\"missing mapping to acknowledge\\\"\\n        );\\n        TxMapped[tokenReq] = tokenAck;\\n        TxMappedInv[tokenAck] = IERC20Upgradeable(tokenReq);\\n        TxTokens.push(IERC20Upgradeable(tokenReq));\\n    }\\n}\\n\",\"keccak256\":\"0x63f69fa0ff1363a71f4c04dfdfe8487ecf6b120b1c4c7b37971a52fe87b3090f\",\"license\":\"UNLICENSED\"},\"contracts/lib/ECVerify.sol\":{\"content\":\"// SPDX-License-Identifier: UNLICENSED\\n\\npragma solidity ^0.8.0;\\n\\nlibrary ECVerify {\\n    function ecverify(\\n        bytes32 hash,\\n        uint8 v,\\n        bytes32 r,\\n        bytes32 s\\n    ) internal pure returns (address signature_address) {\\n        // Version of signature should be 27 or 28, but 0 and 1 are also possible\\n        if (v < 27) {\\n            v += 27;\\n        }\\n\\n        // EIP 155: 2 * chainId + 35\\n        if (v > 28) {\\n            v = v % 2 == 1 ? 27 : 28;\\n        }\\n\\n        require(v == 27 || v == 28);\\n\\n        signature_address = ecrecover(hash, v, r, s);\\n\\n        // ecrecover returns zero on error\\n        require(signature_address != address(0x0), \\\"ECVerify revert\\\");\\n\\n        return signature_address;\\n    }\\n}\\n\",\"keccak256\":\"0xc02263ac648d3d7f3f9afe13ca180e09816573363017f8bec216b20fa6b1c9db\",\"license\":\"UNLICENSED\"},\"contracts/lib/MMRVerifier.sol\":{\"content\":\"// SPDX-License-Identifier: UNLICENSED\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @author Wanseob Lim <email@wanseob.com>\\n * @title Merkle Mountain Range solidity library\\n *\\n * @dev The index of this MMR implementation starts from 1 not 0.\\n *      And it uses keccak256 for its hash function instead of blake2b\\n */\\nlibrary MMRVerifier {\\n    struct MMRProof {\\n        bytes32 root;\\n        uint256 width;\\n        uint256 index;\\n        bytes32[] peaks;\\n        bytes32[] siblings;\\n    }\\n    \\n    /**\\n     * @dev It returns true when the given params verifies that the given value exists in the tree or reverts the transaction.\\n     */\\n    function inclusionProof(\\n        bytes32 root,\\n        uint256 width,\\n        uint256 index,\\n        bytes32 value32,\\n        bytes32[] memory peaks,\\n        bytes32[] memory siblings\\n    ) internal pure returns (bool) {\\n        // bytes32 value32;\\n\\n        // assembly {\\n        //     value32 := mload(add(value, 32))\\n        // }\\n        uint256 size = getSize(width);\\n        require(size >= index, \\\"Index is out of range\\\");\\n        // Check the root equals the peak bagging hash\\n        require(\\n            root ==\\n                // keccak256(\\n                //     abi.encodePacked(\\n                //         size,\\n                //         keccak256(abi.encodePacked(size, peaks))\\n                //     )\\n                // ),\\n                keccak256(\\n                    abi.encodePacked(\\n                        peaks\\n                    )\\n                ),\\n            \\\"Invalid root hash from the peaks\\\"\\n        );\\n\\n        // Find the mountain where the target index belongs to\\n        uint256 cursor;\\n        bytes32 targetPeak;\\n        uint256[] memory peakIndexes = getPeakIndexes(width);\\n        for (uint256 i = 0; i < peakIndexes.length; i++) {\\n            if (peakIndexes[i]-1 >= index) {\\n                targetPeak = peaks[i];\\n                cursor = peakIndexes[i]-1;\\n                break;\\n            }\\n        }\\n        require(targetPeak != bytes32(0), \\\"Target is not found\\\");\\n\\n        // Find the path climbing down\\n        uint256[] memory path = new uint256[](siblings.length + 1);\\n        uint256 left;\\n        uint256 right;\\n        uint8 height = uint8(siblings.length) + 1;\\n        while (height > 0) {\\n            // Record the current cursor and climb down\\n            path[--height] = cursor;\\n            if (cursor == index) {\\n                // On the leaf node. Stop climbing down\\n                break;\\n            } else {\\n                // On the parent node. Go left or right\\n                (left, right) = getChildren(cursor+1);\\n                cursor = index > (left-1) ? (right-1) : (left-1);\\n                continue;\\n            }\\n        }\\n\\n        // Calculate the summit hash climbing up again\\n        bytes32 node;\\n        while (height < path.length) {\\n            // Move cursor\\n            cursor = path[height];\\n            if (height == 0) {\\n                // cursor is on the leaf\\n                node = value32;//hashLeaf(cursor, keccak256(value));\\n            } else if (cursor - 1 == path[height - 1]) {\\n                // cursor is on a parent and a sibling is on the left\\n                node = hashBranch(siblings[height - 1], node);\\n            } else {\\n                // cursor is on a parent and a sibling is on the right\\n                node = hashBranch(node, siblings[height - 1]);\\n            }\\n            // Climb up\\n            height++;\\n        }\\n\\n        // Computed hash value of the summit should equal to the target peak hash\\n        require(node == targetPeak, \\\"Hashed peak is invalid\\\");\\n        return true;\\n    }\\n\\n    /**\\n     * @dev\\n     */\\n    function getSize(uint256 width) internal pure returns (uint256) {\\n        return (width << 1) - numOfPeaks(width);\\n    }\\n\\n    /**\\n     * @dev It returns the hash a parent node with hash(M | Left child | Right child)\\n     *      M is the index of the node\\n     */\\n    function hashBranch(bytes32 left, bytes32 right)\\n        internal\\n        pure\\n        returns (bytes32)\\n    {\\n        return keccak256(abi.encodePacked(left, right));\\n    }\\n\\n    /**\\n     * @dev it returns the hash of a leaf node with hash(M | DATA )\\n     *      M is the index of the node\\n     */\\n    function hashLeaf(uint256 index, bytes32 dataHash)\\n        internal\\n        pure\\n        returns (bytes32)\\n    {\\n        // return keccak256(abi.encodePacked(index, dataHash));\\n        return keccak256(abi.encodePacked(dataHash));\\n    }\\n\\n    /**\\n     * @dev It returns the height of the highest peak\\n     */\\n    function mountainHeight(uint256 size) internal pure returns (uint8) {\\n        uint8 height = 1;\\n        while (uint256(1) << height <= size + height) {\\n            height++;\\n        }\\n        return height - 1;\\n    }\\n\\n    /**\\n     * @dev It returns the height of the index\\n     */\\n    function heightAt(uint256 index) internal pure returns (uint8 height) {\\n        uint256 reducedIndex = index;\\n        uint256 peakIndex;\\n        // If an index has a left mountain subtract the mountain\\n        while (reducedIndex > peakIndex) {\\n            reducedIndex -= (uint256(1) << height) - 1;\\n            height = mountainHeight(reducedIndex);\\n            peakIndex = (uint256(1) << height) - 1;\\n        }\\n        // Index is on the right slope\\n        height = height - uint8((peakIndex - reducedIndex));\\n    }\\n\\n    /**\\n     * @dev It returns the children when it is a parent node\\n     */\\n    function getChildren(uint256 index)\\n        internal\\n        pure\\n        returns (uint256 left, uint256 right)\\n    {\\n        left = index - (uint256(1) << (heightAt(index) - 1));\\n        right = index - 1;\\n        require(left != right, \\\"Not a parent\\\");\\n    }\\n\\n    /**\\n     * @dev It returns all peaks of the smallest merkle mountain range tree which includes\\n     *      the given index(size)\\n     */\\n    function getPeakIndexes(uint256 width)\\n        internal\\n        pure\\n        returns (uint256[] memory peakIndexes)\\n    {\\n        peakIndexes = new uint256[](numOfPeaks(width));\\n        uint256 count;\\n        uint256 size;\\n        for (uint256 i = 255; i > 0; i--) {\\n            if (width & (1 << (i - 1)) != 0) {\\n                // peak exists\\n                size = size + (1 << i) - 1;\\n                peakIndexes[count++] = size;\\n            }\\n        }\\n        require(count == peakIndexes.length, \\\"Invalid bit calculation\\\");\\n    }\\n\\n    function numOfPeaks(uint256 width) internal pure returns (uint256 num) {\\n        uint256 bits = width;\\n        while (bits > 0) {\\n            if (bits % 2 == 1) num++;\\n            bits = bits >> 1;\\n        }\\n        return num;\\n    }\\n}\\n\",\"keccak256\":\"0x3f4852019e7b226bd201cb9f735ac961ef0b91a847fe41326c13eba59ccf926c\",\"license\":\"UNLICENSED\"},\"contracts/lib/MPTValidatorV2.sol\":{\"content\":\"// SPDX-License-Identifier: UNLICENSED\\n\\npragma solidity ^0.8.0;\\npragma experimental ABIEncoderV2;\\n\\nimport \\\"./RLPReader.sol\\\";\\n\\n/// @dev MPTValidatorV2 is improved by LayerZero https://bscscan.com/address/0xCFf08a35A5f27F306e2DA99ff198dB90f13DEF77#code\\nlibrary MPTValidatorV2 {\\n    using RLPReader for RLPReader.RLPItem;\\n    using RLPReader for RLPReader.Iterator;\\n\\n    /// @dev Validates a Merkle-Patricia-Trie proof.\\n    ///      If the proof proves the inclusion of value in the trie, the value is returned.\\n    ///      It only prove the value is included in the tree, the format and sanity of the value should be checked by caller.\\n    ///      It will revert if the proof is invalid.\\n    /// @param rootHash is the Keccak-256 hash of the root node of the MPT.\\n    /// @param paths select indexes array encoding to uint256.\\n    /// @param proof is decoded to stack of MPT nodes (starting with the root) that\\n    ///        need to be traversed during verification.\\n    /// @return value whose inclusion is proved or an empty byte array for\\n    ///         a proof of exclusion\\n    function validateProof(\\n        bytes32 rootHash,\\n        uint256 paths,\\n        bytes memory proof\\n    ) internal pure returns (bytes memory) {\\n        RLPReader.RLPItem memory item = RLPReader.toRlpItem(proof);\\n        RLPReader.Iterator memory iterator = item.iterator();\\n        uint256 numItems = item.numItems();\\n        for (uint256 i = 0; i < numItems; i++) {\\n            item = iterator.next();\\n            uint256 index = uint8(paths);\\n            paths >>= 8;\\n            require(\\n                rootHash == item.toRlpBytesHash(),\\n                \\\"ProofLib: invalid hashlink\\\"\\n            );\\n            item = item.safeGetItemByIndex(index);\\n            if (i < numItems - 1) rootHash = bytes32(item.toUint());\\n        }\\n        require(paths == 0, \\\"invalid path\\\");\\n        return item.toBytes();\\n    }\\n}\\n\",\"keccak256\":\"0xefdd65558e08b32a606648486e2d79311870d42059068ab94be3b13c0c9f1a88\",\"license\":\"UNLICENSED\"},\"contracts/lib/RLPEncode.sol\":{\"content\":\"// SPDX-License-Identifier: UNLICENSED\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @title RLPEncode\\n * @dev A simple RLP encoding library.\\n * @author Bakaoh\\n */\\nlibrary RLPEncode {\\n    /*\\n     * Internal functions\\n     */\\n\\n    /**\\n     * @dev RLP encodes a byte string.\\n     * @param self The byte string to encode.\\n     * @return The RLP encoded string in bytes.\\n     */\\n    function encodeBytes(bytes memory self)\\n        internal\\n        pure\\n        returns (bytes memory)\\n    {\\n        bytes memory encoded;\\n        if (self.length == 1 && uint8(self[0]) <= 128) {\\n            encoded = self;\\n        } else {\\n            encoded = concat(encodeLength(self.length, 128), self);\\n        }\\n        return encoded;\\n    }\\n\\n    /**\\n     * @dev RLP encodes a list of RLP encoded byte byte strings.\\n     * @param self The list of RLP encoded byte strings.\\n     * @return The RLP encoded list of items in bytes.\\n     */\\n    function encodeList(bytes[] memory self)\\n        internal\\n        pure\\n        returns (bytes memory)\\n    {\\n        bytes memory list = flatten(self);\\n        return concat(encodeLength(list.length, 192), list);\\n    }\\n\\n    /**\\n     * @dev RLP encodes a string.\\n     * @param self The string to encode.\\n     * @return The RLP encoded string in bytes.\\n     */\\n    function encodeString(string memory self)\\n        internal\\n        pure\\n        returns (bytes memory)\\n    {\\n        return encodeBytes(bytes(self));\\n    }\\n\\n    /**\\n     * @dev RLP encodes an address.\\n     * @param self The address to encode.\\n     * @return The RLP encoded address in bytes.\\n     */\\n    function encodeAddress(address self) internal pure returns (bytes memory) {\\n        bytes memory inputBytes;\\n        assembly {\\n            let m := mload(0x40)\\n            mstore(\\n                add(m, 20),\\n                xor(0x140000000000000000000000000000000000000000, self)\\n            )\\n            mstore(0x40, add(m, 52))\\n            inputBytes := m\\n        }\\n        return encodeBytes(inputBytes);\\n    }\\n\\n    /**\\n     * @dev RLP encodes a uint.\\n     * @param self The uint to encode.\\n     * @return The RLP encoded uint in bytes.\\n     */\\n    function encodeUint(uint256 self) internal pure returns (bytes memory) {\\n        return encodeBytes(toBinary(self));\\n    }\\n\\n    /**\\n     * @dev RLP encodes an int.\\n     * @param self The int to encode.\\n     * @return The RLP encoded int in bytes.\\n     */\\n    function encodeInt(int256 self) internal pure returns (bytes memory) {\\n        return encodeUint(uint256(self));\\n    }\\n\\n    /**\\n     * @dev RLP encodes a bool.\\n     * @param self The bool to encode.\\n     * @return The RLP encoded bool in bytes.\\n     */\\n    function encodeBool(bool self) internal pure returns (bytes memory) {\\n        bytes memory encoded = new bytes(1);\\n        encoded[0] = (self ? bytes1(0x01) : bytes1(0x80));\\n        return encoded;\\n    }\\n\\n    /*\\n     * Private functions\\n     */\\n\\n    /**\\n     * @dev Encode the first byte, followed by the `len` in binary form if `length` is more than 55.\\n     * @param len The length of the string or the payload.\\n     * @param offset 128 if item is string, 192 if item is list.\\n     * @return RLP encoded bytes.\\n     */\\n    function encodeLength(uint256 len, uint256 offset)\\n        private\\n        pure\\n        returns (bytes memory)\\n    {\\n        bytes memory encoded;\\n        if (len < 56) {\\n            encoded = new bytes(1);\\n            encoded[0] = bytes32(len + offset)[31];\\n        } else {\\n            uint256 lenLen;\\n            uint256 i = 1;\\n            while (len / i != 0) {\\n                lenLen++;\\n                i *= 256;\\n            }\\n\\n            encoded = new bytes(lenLen + 1);\\n            encoded[0] = bytes32(lenLen + offset + 55)[31];\\n            for (i = 1; i <= lenLen; i++) {\\n                encoded[i] = bytes32((len / (256**(lenLen - i))) % 256)[31];\\n            }\\n        }\\n        return encoded;\\n    }\\n\\n    /**\\n     * @dev Encode integer in big endian binary form with no leading zeroes.\\n     * @notice TODO: This should be optimized with assembly to save gas costs.\\n     * @param _x The integer to encode.\\n     * @return RLP encoded bytes.\\n     */\\n    function toBinary(uint256 _x) private pure returns (bytes memory) {\\n        bytes memory b = new bytes(32);\\n        assembly {\\n            mstore(add(b, 32), _x)\\n        }\\n        uint256 i = 0;\\n        for (; i < 32; i++) {\\n            if (b[i] != 0) {\\n                break;\\n            }\\n        }\\n        bytes memory res = new bytes(32 - i);\\n        for (uint256 j = 0; j < res.length; j++) {\\n            res[j] = b[i++];\\n        }\\n        return res;\\n    }\\n\\n    /**\\n     * @dev Copies a piece of memory to another location.\\n     * @notice From: https://github.com/Arachnid/solidity-stringutils/blob/master/src/strings.sol.\\n     * @param _dest Destination location.\\n     * @param _src Source location.\\n     * @param _len Length of memory to copy.\\n     */\\n    function memcpy(\\n        uint256 _dest,\\n        uint256 _src,\\n        uint256 _len\\n    ) private pure {\\n        uint256 dest = _dest;\\n        uint256 src = _src;\\n        uint256 len = _len;\\n\\n        for (; len >= 32; len -= 32) {\\n            assembly {\\n                mstore(dest, mload(src))\\n            }\\n            dest += 32;\\n            src += 32;\\n        }\\n\\n        uint256 mask = 256**(32 - len) - 1;\\n        assembly {\\n            let srcpart := and(mload(src), not(mask))\\n            let destpart := and(mload(dest), mask)\\n            mstore(dest, or(destpart, srcpart))\\n        }\\n    }\\n\\n    /**\\n     * @dev Flattens a list of byte strings into one byte string.\\n     * @notice From: https://github.com/sammayo/solidity-rlp-encoder/blob/master/RLPEncode.sol.\\n     * @param _list List of byte strings to flatten.\\n     * @return The flattened byte string.\\n     */\\n    function flatten(bytes[] memory _list) private pure returns (bytes memory) {\\n        if (_list.length == 0) {\\n            return new bytes(0);\\n        }\\n\\n        uint256 len;\\n        uint256 i = 0;\\n        for (; i < _list.length; i++) {\\n            len += _list[i].length;\\n        }\\n\\n        bytes memory flattened = new bytes(len);\\n        uint256 flattenedPtr;\\n        assembly {\\n            flattenedPtr := add(flattened, 0x20)\\n        }\\n\\n        for (i = 0; i < _list.length; i++) {\\n            bytes memory item = _list[i];\\n\\n            uint256 listPtr;\\n            assembly {\\n                listPtr := add(item, 0x20)\\n            }\\n\\n            memcpy(flattenedPtr, listPtr, item.length);\\n            flattenedPtr += _list[i].length;\\n        }\\n\\n        return flattened;\\n    }\\n\\n    /**\\n     * @dev Concatenates two bytes.\\n     * @notice From: https://github.com/GNSPS/solidity-bytes-utils/blob/master/contracts/BytesLib.sol.\\n     * @param _preBytes First byte string.\\n     * @param _postBytes Second byte string.\\n     * @return Both byte string combined.\\n     */\\n    function concat(bytes memory _preBytes, bytes memory _postBytes)\\n        private\\n        pure\\n        returns (bytes memory)\\n    {\\n        bytes memory tempBytes;\\n\\n        assembly {\\n            tempBytes := mload(0x40)\\n\\n            let length := mload(_preBytes)\\n            mstore(tempBytes, length)\\n\\n            let mc := add(tempBytes, 0x20)\\n            let end := add(mc, length)\\n\\n            for {\\n                let cc := add(_preBytes, 0x20)\\n            } lt(mc, end) {\\n                mc := add(mc, 0x20)\\n                cc := add(cc, 0x20)\\n            } {\\n                mstore(mc, mload(cc))\\n            }\\n\\n            length := mload(_postBytes)\\n            mstore(tempBytes, add(length, mload(tempBytes)))\\n\\n            mc := end\\n            end := add(mc, length)\\n\\n            for {\\n                let cc := add(_postBytes, 0x20)\\n            } lt(mc, end) {\\n                mc := add(mc, 0x20)\\n                cc := add(cc, 0x20)\\n            } {\\n                mstore(mc, mload(cc))\\n            }\\n\\n            mstore(\\n                0x40,\\n                and(\\n                    add(add(end, iszero(add(length, mload(_preBytes)))), 31),\\n                    not(31)\\n                )\\n            )\\n        }\\n\\n        return tempBytes;\\n    }\\n}\\n\",\"keccak256\":\"0xa0058a159fe705052d9b4eef67d83b892111fd0d3ce48174d2ace8474a144358\",\"license\":\"UNLICENSED\"},\"contracts/lib/RLPReader.sol\":{\"content\":\"// SPDX-License-Identifier: UNLICENSED\\n\\npragma solidity ^0.8.0;\\n\\n/*\\n * @author Hamdi Allam hamdi.allam97@gmail.com\\n *   Updated by Tuan Vu (tuanvd@gmail.com)\\n * Please reach out with any questions or concerns\\n */\\nlibrary RLPReader {\\n    uint8 constant STRING_SHORT_START = 0x80;\\n    uint8 constant STRING_LONG_START = 0xb8;\\n    uint8 constant LIST_SHORT_START = 0xc0;\\n    uint8 constant LIST_LONG_START = 0xf8;\\n    uint8 constant WORD_SIZE = 32;\\n\\n    struct RLPItem {\\n        uint256 len;\\n        uint256 memPtr;\\n    }\\n\\n    struct Iterator {\\n        RLPItem item; // Item that's being iterated over.\\n        uint256 nextPtr; // Position of the next item in the list.\\n    }\\n\\n    /*\\n     * @dev Returns the next element in the iteration. Reverts if it has not next element.\\n     * @param self The iterator.\\n     * @return The next element in the iteration.\\n     */\\n    function next(Iterator memory self) internal pure returns (RLPItem memory) {\\n        require(hasNext(self));\\n\\n        uint256 ptr = self.nextPtr;\\n        uint256 itemLength = _itemLength(ptr);\\n        self.nextPtr = ptr + itemLength;\\n\\n        return RLPItem(itemLength, ptr);\\n    }\\n\\n    /*\\n     * @dev Returns true if the iteration has more elements.\\n     * @param self The iterator.\\n     * @return true if the iteration has more elements.\\n     */\\n    function hasNext(Iterator memory self) internal pure returns (bool) {\\n        RLPItem memory item = self.item;\\n        return self.nextPtr < item.memPtr + item.len;\\n    }\\n\\n    /*\\n     * @param item RLP encoded bytes\\n     */\\n    function toRlpItem(bytes memory item)\\n        internal\\n        pure\\n        returns (RLPItem memory)\\n    {\\n        uint256 memPtr;\\n        assembly {\\n            memPtr := add(item, 0x20)\\n        }\\n\\n        return RLPItem(item.length, memPtr);\\n    }\\n\\n    /*\\n     * @dev Create an iterator. Reverts if item is not a list.\\n     * @param self The RLP item.\\n     * @return An 'Iterator' over the item.\\n     */\\n    function iterator(RLPItem memory self)\\n        internal\\n        pure\\n        returns (Iterator memory)\\n    {\\n        require(isList(self));\\n\\n        uint256 ptr = self.memPtr + _payloadOffset(self.memPtr);\\n        return Iterator(self, ptr);\\n    }\\n\\n    /*\\n     * @param item RLP encoded bytes\\n     */\\n    function rlpLen(RLPItem memory item) internal pure returns (uint256) {\\n        return item.len;\\n    }\\n\\n    /*\\n     * @param item RLP encoded bytes\\n     */\\n    function payloadLen(RLPItem memory item) internal pure returns (uint256) {\\n        return item.len - _payloadOffset(item.memPtr);\\n    }\\n\\n    /*\\n     * @param item RLP encoded list in bytes\\n     */\\n    function toList(RLPItem memory item)\\n        internal\\n        pure\\n        returns (RLPItem[] memory)\\n    {\\n        require(isList(item));\\n\\n        uint256 items = numItems(item);\\n        RLPItem[] memory result = new RLPItem[](items);\\n\\n        uint256 memPtr = item.memPtr + _payloadOffset(item.memPtr);\\n        uint256 dataLen;\\n        for (uint256 i = 0; i < items; i++) {\\n            dataLen = _itemLength(memPtr);\\n            result[i] = RLPItem(dataLen, memPtr);\\n            memPtr = memPtr + dataLen;\\n        }\\n\\n        return result;\\n    }\\n\\n    // @return indicator whether encoded payload is a list. negate this function call for isData.\\n    function isList(RLPItem memory item) internal pure returns (bool) {\\n        if (item.len == 0) return false;\\n\\n        uint8 byte0;\\n        uint256 memPtr = item.memPtr;\\n        assembly {\\n            byte0 := byte(0, mload(memPtr))\\n        }\\n\\n        if (byte0 < LIST_SHORT_START) return false;\\n        return true;\\n    }\\n\\n    /** RLPItem conversions into data types **/\\n\\n    // @returns raw rlp encoding in bytes\\n    function toRlpBytes(RLPItem memory item)\\n        internal\\n        pure\\n        returns (bytes memory)\\n    {\\n        bytes memory result = new bytes(item.len);\\n        if (result.length == 0) return result;\\n\\n        uint256 ptr;\\n        assembly {\\n            ptr := add(0x20, result)\\n        }\\n\\n        copy(item.memPtr, ptr, item.len);\\n        return result;\\n    }\\n\\n    // any non-zero byte is considered true\\n    function toBoolean(RLPItem memory item) internal pure returns (bool) {\\n        require(item.len == 1);\\n        uint256 result;\\n        uint256 memPtr = item.memPtr;\\n        assembly {\\n            result := byte(0, mload(memPtr))\\n        }\\n\\n        return result == 0 ? false : true;\\n    }\\n\\n    function toAddress(RLPItem memory item) internal pure returns (address) {\\n        // 1 byte for the length prefix\\n        require(item.len == 21);\\n\\n        return address(uint160(toUint(item)));\\n        // return address(toUint(item));\\n    }\\n\\n    function toUint(RLPItem memory item) internal pure returns (uint256) {\\n        require(item.len > 0 && item.len <= 33);\\n\\n        uint256 offset = _payloadOffset(item.memPtr);\\n        uint256 len = item.len - offset;\\n\\n        uint256 result;\\n        uint256 memPtr = item.memPtr + offset;\\n        assembly {\\n            result := mload(memPtr)\\n\\n            // shfit to the correct location if neccesary\\n            if lt(len, 32) {\\n                result := div(result, exp(256, sub(32, len)))\\n            }\\n        }\\n\\n        return result;\\n    }\\n\\n    // enforces 32 byte length\\n    function toUintStrict(RLPItem memory item) internal pure returns (uint256) {\\n        // one byte prefix\\n        require(item.len == 33);\\n\\n        uint256 result;\\n        uint256 memPtr = item.memPtr + 1;\\n        assembly {\\n            result := mload(memPtr)\\n        }\\n\\n        return result;\\n    }\\n\\n    function toBytes(RLPItem memory item) internal pure returns (bytes memory) {\\n        require(item.len > 0);\\n\\n        uint256 offset = _payloadOffset(item.memPtr);\\n        uint256 len = item.len - offset;\\n        // data length\\n        bytes memory result = new bytes(len);\\n\\n        uint256 destPtr;\\n        assembly {\\n            destPtr := add(0x20, result)\\n        }\\n\\n        copy(item.memPtr + offset, destPtr, len);\\n        return result;\\n    }\\n\\n    function toRlpBytesHash(RLPItem memory item) internal pure returns (bytes32 _hash) {\\n        require(item.len > 0);\\n        uint256 len = item.len;\\n        uint256 ptr = item.memPtr;\\n        assembly{\\n            _hash := keccak256(ptr, len)\\n        }\\n    }\\n\\n    function toBytes32(RLPItem memory item) internal pure returns (bytes32) {\\n        return _bytesToBytes32(toBytes(item), 0);\\n    }\\n\\n    /*\\n     * Private Helpers\\n     */\\n\\n    // @return number of payload items inside an encoded list.\\n    function numItems(RLPItem memory item) internal pure returns (uint256) {\\n        if (item.len == 0) return 0;\\n\\n        uint256 count = 0;\\n        uint256 currPtr = item.memPtr + _payloadOffset(item.memPtr);\\n        uint256 endPtr = item.memPtr + item.len;\\n        while (currPtr < endPtr) {\\n            currPtr = currPtr + _itemLength(currPtr);\\n            // skip over an item\\n            count++;\\n        }\\n\\n        return count;\\n    }\\n\\n    // @return entire rlp item byte length\\n    function _itemLength(uint256 memPtr) private pure returns (uint256) {\\n        uint256 itemLen;\\n        uint256 byte0;\\n        assembly {\\n            byte0 := byte(0, mload(memPtr))\\n        }\\n\\n        if (byte0 < STRING_SHORT_START) itemLen = 1;\\n        else if (byte0 < STRING_LONG_START)\\n            itemLen = byte0 - STRING_SHORT_START + 1;\\n        else if (byte0 < LIST_SHORT_START) {\\n            assembly {\\n                let byteLen := sub(byte0, 0xb7) // # of bytes the actual length is\\n                memPtr := add(memPtr, 1) // skip over the first byte\\n\\n                /* 32 byte word size */\\n                let dataLen := div(mload(memPtr), exp(256, sub(32, byteLen))) // right shifting to get the len\\n                itemLen := add(dataLen, add(byteLen, 1))\\n            }\\n        } else if (byte0 < LIST_LONG_START) {\\n            itemLen = byte0 - LIST_SHORT_START + 1;\\n        } else {\\n            assembly {\\n                let byteLen := sub(byte0, 0xf7)\\n                memPtr := add(memPtr, 1)\\n\\n                let dataLen := div(mload(memPtr), exp(256, sub(32, byteLen))) // right shifting to the correct length\\n                itemLen := add(dataLen, add(byteLen, 1))\\n            }\\n        }\\n\\n        return itemLen;\\n    }\\n\\n    // @return number of bytes until the data\\n    function _payloadOffset(uint256 memPtr) private pure returns (uint256) {\\n        uint256 byte0;\\n        assembly {\\n            byte0 := byte(0, mload(memPtr))\\n        }\\n\\n        if (byte0 < STRING_SHORT_START) return 0;\\n        else if (\\n            byte0 < STRING_LONG_START ||\\n            (byte0 >= LIST_SHORT_START && byte0 < LIST_LONG_START)\\n        ) return 1;\\n        else if (byte0 < LIST_SHORT_START)\\n            // being explicit\\n            return byte0 - (STRING_LONG_START - 1) + 1;\\n        else return byte0 - (LIST_LONG_START - 1) + 1;\\n    }\\n\\n    /*\\n     * @param src Pointer to source\\n     * @param dest Pointer to destination\\n     * @param len Amount of memory to copy from the source\\n     */\\n    function copy(\\n        uint256 src,\\n        uint256 dest,\\n        uint256 len\\n    ) private pure {\\n        if (len == 0) return;\\n\\n        // copy as many word sizes as possible\\n        for (; len >= WORD_SIZE; len -= WORD_SIZE) {\\n            assembly {\\n                mstore(dest, mload(src))\\n            }\\n\\n            src += WORD_SIZE;\\n            dest += WORD_SIZE;\\n        }\\n\\n        // left over bytes. Mask is used to remove unwanted bytes from the word\\n        uint256 mask = 256**(WORD_SIZE - len) - 1;\\n        assembly {\\n            let srcpart := and(mload(src), not(mask)) // zero out src\\n            let destpart := and(mload(dest), mask) // retrieve the bytes\\n            mstore(dest, or(destpart, srcpart))\\n        }\\n    }\\n\\n    /*\\n     * @param convert a memory bytes to byte32\\n     */\\n    function _bytesToBytes32(bytes memory b, uint256 offset)\\n        private\\n        pure\\n        returns (bytes32)\\n    {\\n        bytes32 out;\\n\\n        for (uint256 i = 0; i < 32; i++) {\\n            out |= bytes32(b[offset + i] & 0xFF) >> (i * 8);\\n        }\\n        return out;\\n    }\\n\\n    /*\\n     * @param get the RLP item by index. save gas.\\n     */\\n    function safeGetItemByIndex(RLPItem memory item, uint idx) internal pure returns (RLPItem memory) {\\n        require(isList(item), \\\"RLPDecoder iterator is not a list\\\");\\n\\n        uint endPtr = item.memPtr + item.len;\\n\\n        uint memPtr = item.memPtr + _payloadOffset(item.memPtr);\\n        uint dataLen;\\n        for (uint i = 0; i < idx; i++) {\\n            dataLen = _itemLength(memPtr);\\n            memPtr = memPtr + dataLen;\\n        }\\n        dataLen = _itemLength(memPtr);\\n\\n        require(memPtr + dataLen <= endPtr, \\\"RLP item overflow\\\");\\n        return RLPItem(dataLen, memPtr);\\n    }\\n}\\n\",\"keccak256\":\"0x2fc5beafde5f77a20bbebc646b0e5f84c0c81bbaf00f267edb1fcec71a533572\",\"license\":\"UNLICENSED\"},\"contracts/lib/SafeCast.sol\":{\"content\":\"// SPDX-License-Identifier: UNLICENSED\\n\\npragma solidity ^0.8.0;\\n\\nlibrary SafeCast {\\n    function toUint200(uint256 value) internal pure returns (uint200) {\\n        require(value < 2**200, \\\"value does not fit in 200 bits\\\");\\n        return uint200(value);\\n    }\\n\\n    function toUint128(uint256 value) internal pure returns (uint128) {\\n        require(value < 2**128, \\\"value does not fit in 128 bits\\\");\\n        return uint128(value);\\n    }\\n\\n    function toUint40(uint256 value) internal pure returns (uint40) {\\n        require(value < 2**40, \\\"value does not fit in 40 bits\\\");\\n        return uint40(value);\\n    }\\n\\n    function toUint8(uint256 value) internal pure returns (uint8) {\\n        require(value < 2**8, \\\"value does not fit in 8 bits\\\");\\n        return uint8(value);\\n    }\\n}\",\"keccak256\":\"0x23de991c1e5ae0b798c07fdcf5a326e8b8ef596d2ba9d9b940064cb07f6ed9db\",\"license\":\"UNLICENSED\"}},\"version\":1}",
  "bytecode": "0x608060405234801561001057600080fd5b50615303806100206000396000f3fe608060405234801561001057600080fd5b506004361061012c5760003560e01c80638487b9cf116100ad578063cd06c3a111610071578063cd06c3a11461028b578063d650d3f7146102a6578063e05bdaf7146102cf578063e71575e8146102f8578063f2fde38b1461032157600080fd5b80638487b9cf146101f85780638ab3124a146102215780638da5cb5b14610254578063ae24fbb414610265578063bf21980b1461027857600080fd5b80636aa92327116100f45780636aa92327146101af578063715018a6146101c25780637750c9f0146101ca5780638129fc1c146101dd57806381bac14f146101e557600080fd5b80631b7f3e231461013157806335c6814d146101615780634ae83c8e146101745780634d2be8e51461018957806359508f8f1461019c575b600080fd5b606b54610144906001600160a01b031681565b6040516001600160a01b0390911681526020015b60405180910390f35b61014461016f366004613592565b610334565b6101876101823660046135c0565b61035e565b005b600654610144906001600160a01b031681565b6101876101aa3660046135e8565b610573565b6101876101bd3660046138a8565b6106d4565b610187610973565b6101876101d83660046135e8565b6109a9565b610187610bc9565b6101876101f33660046135c0565b610c44565b6101446102063660046135c0565b6005602052600090815260409020546001600160a01b031681565b61024461022f366004613592565b606c6020526000908152604090205460ff1681565b6040519015158152602001610158565b6039546001600160a01b0316610144565b610144610273366004613592565b610c90565b6101876102863660046135c0565b610ca0565b60005460015460408051928352602083019190915201610158565b6101446102b43660046135c0565b6003602052600090815260409020546001600160a01b031681565b6101446102dd3660046135c0565b6004602052600090815260409020546001600160a01b031681565b6101446103063660046135c0565b6002602052600090815260409020546001600160a01b031681565b61018761032f3660046135c0565b610cec565b6001818154811061034457600080fd5b6000918252602090912001546001600160a01b0316905081565b6001600160a01b0381811660009081526002602052604090205416156103cb5760405162461bcd60e51b815260206004820152601760248201527f746f6b656e20697320616c7265616479206d617070656400000000000000000060448201526064015b60405180910390fd5b6000819050806001600160a01b031663313ce5676040518163ffffffff1660e01b815260040160206040518083038186803b15801561040957600080fd5b505afa15801561041d573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906104419190613b6b565b60ff16826001600160a01b03167fc13b93ab57586894396c38a46a06c88056fdbb23c7c595f8d08274f9a8593a42836001600160a01b03166306fdde036040518163ffffffff1660e01b815260040160006040518083038186803b1580156104a857600080fd5b505afa1580156104bc573d6000803e3d6000fd5b505050506040513d6000823e601f3d908101601f191682016040526104e49190810190613bff565b846001600160a01b03166395d89b416040518163ffffffff1660e01b815260040160006040518083038186803b15801561051d57600080fd5b505afa158015610531573d6000803e3d6000fd5b505050506040513d6000823e601f3d908101601f191682016040526105599190810190613bff565b604051610567929190613c5f565b60405180910390a35050565b6001600160a01b0382166105c95760405162461bcd60e51b815260206004820152601b60248201527f726563697069656e742069732061207a65726f2061646472657373000000000060448201526064016103c2565b6001600160a01b03838116600090815260056020526040902054166106285760405162461bcd60e51b8152602060048201526015602482015274189c9a5919d948191bd95cc81b9bdd08195e1a5cdd605a1b60448201526064016103c2565b60405163079cc67960e41b8152336004820152602481018290526001600160a01b038416906379cc679090604401600060405180830381600087803b15801561067057600080fd5b505af1158015610684573d6000803e3d6000fd5b5050604080518481526001600160a01b038681166020830152339450871692507f3dd1df88dc92e2788892542d81f999d720a44b4c127065d45c128f4f59fdc373910160405180910390a3505050565b606b5461020084015183516040516303ce246160e61b8152600481019290925260248201526001600160a01b039091169063f38918409060440160206040518083038186803b15801561072657600080fd5b505afa15801561073a573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061075e9190613c8d565b6107aa5760405162461bcd60e51b815260206004820152601c60248201527f636865636b706f696e742076616c69646174696f6e206661696c65640000000060448201526064016103c2565b60006107b584610d84565b60a08501519091506000806107ca8787610d9d565b8651919350915083146108145760405162461bcd60e51b81526020600482015260126024820152711a5b9d985b1a59081c1c9bdbd9881c9bdbdd60721b60448201526064016103c2565b8161086c5760405162461bcd60e51b815260206004820152602260248201527f626c6f636b2068656164657220636f756c64206e6f7420626520766572696669604482015261195960f21b60648201526084016103c2565b602080860151604080519283018790528201859052606082015260009060800160408051601f1981840301815291815281516020928301206000818152606c90935291205490915060ff16156108f45760405162461bcd60e51b815260206004820152600d60248201526c646f75626c65207370656e742160981b60448201526064016103c2565b6000818152606c60205260408120805460ff191660011790556109178988610e7b565b9050600061092482610ef0565b9050600081116109675760405162461bcd60e51b815260206004820152600e60248201526d1b9bc81d985b1a5908195d995b9d60921b60448201526064016103c2565b50505050505050505050565b6039546001600160a01b0316331461099d5760405162461bcd60e51b81526004016103c290613caf565b6109a76000611239565b565b6001600160a01b0382166109ff5760405162461bcd60e51b815260206004820152601b60248201527f726563697069656e742069732061207a65726f2061646472657373000000000060448201526064016103c2565b6001600160a01b0383811660009081526002602052604090205416610a5e5760405162461bcd60e51b8152602060048201526015602482015274189c9a5919d948191bd95cc81b9bdd08195e1a5cdd605a1b60448201526064016103c2565b6040516370a0823160e01b81523060048201526000906001600160a01b038516906370a082319060240160206040518083038186803b158015610aa057600080fd5b505afa158015610ab4573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610ad89190613ce4565b9050610aef6001600160a01b03851633308561128b565b6040516370a0823160e01b81523060048201526000906001600160a01b038616906370a082319060240160206040518083038186803b158015610b3157600080fd5b505afa158015610b45573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610b699190613ce4565b90506000610b7782846112fc565b604080518281526001600160a01b03888116602083015292935033928916917f4c6ab40ee4cfa212a441d32ee2897945b4a52461284f9369e23fdf8faa6cdd69910160405180910390a3505050505050565b6000610bd56001611308565b90508015610bf1576006805460ff60a81b1916600160a81b1790555b610bf96113aa565b8015610c41576006805460ff60a81b19169055604051600181527f7f26b83ff96e1f2b6a682f133852f6798a09c465da95921460cefb38474024989060200160405180910390a15b50565b6039546001600160a01b03163314610c6e5760405162461bcd60e51b81526004016103c290613caf565b600680546001600160a01b0319166001600160a01b0392909216919091179055565b6000818154811061034457600080fd5b6039546001600160a01b03163314610cca5760405162461bcd60e51b81526004016103c290613caf565b606b80546001600160a01b0319166001600160a01b0392909216919091179055565b6039546001600160a01b03163314610d165760405162461bcd60e51b81526004016103c290613caf565b6001600160a01b038116610d7b5760405162461bcd60e51b815260206004820152602660248201527f4f776e61626c653a206e6577206f776e657220697320746865207a65726f206160448201526564647265737360d01b60648201526084016103c2565b610c4181611239565b6000610d8f826113db565b805190602001209050919050565b600060606000610dac85610d84565b85519091508114610df657505060408051808201909152601b81527f4865616465722064617461206f72206861736820696e76616c69640000000000602082015260009150610e74565b610e1884600001518560200151866040015184886060015189608001516118d3565b925082610e5e57505060408051808201909152601c81527f766572696679486561646572202d20696e76616c69642070726f6f6600000000602082015260009150610e74565b5050604080516020810190915260008152600191505b9250929050565b805160a083015160609114610ede5760405162461bcd60e51b8152602060048201526024808201527f76657269667952656365697074202d20646966666572656e74207472696520726044820152636f6f747360e01b60648201526084016103c2565b610ee782611d1f565b90505b92915050565b600080610efc83611d38565b90506000610f2382600081518110610f1657610f16613cfd565b6020026020010151611dd0565b905080600114610f665760405162461bcd60e51b815260206004820152600e60248201526d1c995d995c9d081c9958d95a5c1d60921b60448201526064016103c2565b6000610f8b83600381518110610f7e57610f7e613cfd565b6020026020010151611e4b565b905060005b8151811015611230576000610fb0838381518110610f7e57610f7e613cfd565b90506000610fd782600081518110610fca57610fca613cfd565b6020026020010151611f60565b6006549091506001600160a01b03808316911614610ff657505061121e565b600061100e83600181518110610f7e57610f7e613cfd565b9050600081516001600160401b0381111561102b5761102b613629565b604051908082528060200260200182016040528015611054578160200160208202803683370190505b50905060005b82518110156110aa57611078838281518110610f1657610f16613cfd565b60001b82828151811061108d5761108d613cfd565b6020908102919091010152806110a281613d29565b91505061105a565b5060006110d0856002815181106110c3576110c3613cfd565b6020026020010151611f7a565b90507f4c6ab40ee4cfa212a441d32ee2897945b4a52461284f9369e23fdf8faa6cdd698260008151811061110657611106613cfd565b602002602001015114156111355761111e8282612016565b8961112881613d29565b9a5050505050505061121e565b7f3dd1df88dc92e2788892542d81f999d720a44b4c127065d45c128f4f59fdc3738260008151811061116957611169613cfd565b602002602001015114156111815761111e82826120d8565b7fc13b93ab57586894396c38a46a06c88056fdbb23c7c595f8d08274f9a8593a42826000815181106111b5576111b5613cfd565b602002602001015114156111cd5761111e8282612145565b7f78591f651c27eef63481b7fd779e44c2426cbe82c7050fe9bc90b6707efbc3d38260008151811061120157611201613cfd565b602002602001015114156112185761111e82612357565b50505050505b8061122881613d29565b915050610f90565b50505050919050565b603980546001600160a01b038381166001600160a01b0319831681179093556040519116919082907f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e090600090a35050565b6040516001600160a01b03808516602483015283166044820152606481018290526112f69085906323b872dd60e01b906084015b60408051601f198184030181529190526020810180516001600160e01b03166001600160e01b031990931692909217909152612485565b50505050565b6000610ee78284613d44565b600654600090600160a81b900460ff1615611353578160ff16600114801561132f5750303b155b61134b5760405162461bcd60e51b81526004016103c290613d5b565b506000919050565b60065460ff808416600160a01b90920416106113815760405162461bcd60e51b81526004016103c290613d5b565b506006805460ff909216600160a01b0260ff60a01b19909216919091179055600190565b919050565b600654600160a81b900460ff166113d35760405162461bcd60e51b81526004016103c290613da9565b6109a761255c565b60408051600f808252610200820190925260609160009190816020015b60608152602001906001900390816113f857905050905061143d836020015160405160200161142991815260200190565b60405160208183030381529060405261258e565b8160008151811061145057611450613cfd565b602002602001018190525061146883604001516125de565b8160018151811061147b5761147b613cfd565b60200260200101819052506114a0836060015160405160200161142991815260200190565b816002815181106114b3576114b3613cfd565b60200260200101819052506114d8836080015160405160200161142991815260200190565b816003815181106114eb576114eb613cfd565b60200260200101819052506115108360a0015160405160200161142991815260200190565b8160048151811061152357611523613cfd565b60200260200101819052506115488360c0015160405160200161142991815260200190565b8160058151811061155b5761155b613cfd565b60200260200101819052506115808360e0015160405160200161142991815260200190565b8160068151811061159357611593613cfd565b60200260200101819052506115ac83610100015161258e565b816007815181106115bf576115bf613cfd565b60200260200101819052506115d8836101200151612601565b816008815181106115eb576115eb613cfd565b6020026020010181905250611604836101400151612601565b8160098151811061161757611617613cfd565b6020026020010181905250611630836101600151612601565b81600a8151811061164357611643613cfd565b602002602001018190525061165c836101800151612601565b81600b8151811061166f5761166f613cfd565b6020026020010181905250611688836101a0015161258e565b81600c8151811061169b5761169b613cfd565b60200260200101819052506116c1836101c0015160405160200161142991815260200190565b81600d815181106116d4576116d4613cfd565b60200260200101819052506116ed836101e00151612601565b81600e8151811061170057611700613cfd565b6020026020010181905250611719836102000151612601565b81600f8151811061172c5761172c613cfd565b6020026020010181905250611745836102200151612601565b8160108151811061175857611758613cfd565b602002602001018190525061177183610240015161258e565b8160118151811061178457611784613cfd565b602002602001018190525061179d83610260015161258e565b816012815181106117b0576117b0613cfd565b60200260200101819052506117c983610280015161258e565b816013815181106117dc576117dc613cfd565b60200260200101819052506117f5836102a0015161258e565b8160148151811061180857611808613cfd565b6020026020010181905250611821836102c0015161258e565b8160158151811061183457611834613cfd565b602002602001018190525061184d836102e0015161258e565b8160168151811061186057611860613cfd565b602002602001018190525061187983610300015161258e565b8160178151811061188c5761188c613cfd565b60200260200101819052506118a583610320015161258e565b816018815181106118b8576118b8613cfd565b60200260200101819052506118cc81612614565b9392505050565b6000806118df87612638565b9050858110156119295760405162461bcd60e51b8152602060048201526015602482015274496e646578206973206f7574206f662072616e676560581b60448201526064016103c2565b8360405160200161193a9190613df4565b60405160208183030381529060405280519060200120881461199e5760405162461bcd60e51b815260206004820181905260248201527f496e76616c696420726f6f7420686173682066726f6d20746865207065616b7360448201526064016103c2565b60008060006119ac8a612651565b905060005b8151811015611a41578960018383815181106119cf576119cf613cfd565b60200260200101516119e19190613d44565b10611a2f578781815181106119f8576119f8613cfd565b602002602001015192506001828281518110611a1657611a16613cfd565b6020026020010151611a289190613d44565b9350611a41565b80611a3981613d29565b9150506119b1565b5081611a855760405162461bcd60e51b815260206004820152601360248201527215185c99d95d081a5cc81b9bdd08199bdd5b99606a1b60448201526064016103c2565b600086516001611a959190613e2a565b6001600160401b03811115611aac57611aac613629565b604051908082528060200260200182016040528015611ad5578160200160208202803683370190505b509050600080600089516001611aeb9190613e42565b90505b60ff811615611b7c578684611b0283613e67565b92508260ff1681518110611b1857611b18613cfd565b6020026020010181815250508c871415611b3157611b7c565b611b44611b3f886001613e2a565b612770565b9093509150611b54600184613d44565b8d11611b6a57611b65600184613d44565b611b75565b611b75600183613d44565b9650611aee565b60005b84518260ff161015611cc157848260ff1681518110611ba057611ba0613cfd565b602002602001015197508160ff1660001415611bbd57508b611caf565b84611bc9600184613e84565b60ff1681518110611bdc57611bdc613cfd565b6020026020010151600189611bf19190613d44565b1415611c5557611c4e8b611c06600185613e84565b60ff1681518110611c1957611c19613cfd565b602002602001015182604080516020808201949094528082019290925280518083038201815260609092019052805191012090565b9050611caf565b611cac818c611c65600186613e84565b60ff1681518110611c7857611c78613cfd565b6020026020010151604080516020808201949094528082019290925280518083038201815260609092019052805191012090565b90505b81611cb981613ea7565b925050611b7f565b868114611d095760405162461bcd60e51b815260206004820152601660248201527512185cda1959081c19585ac81a5cc81a5b9d985b1a5960521b60448201526064016103c2565b5060019f9e505050505050505050505050505050565b6060610eea8260000151836020015184604001516127ed565b60606000611d6d8360408051808201825260008082526020918201528151808301909252825182529182019181019190915290565b9050607f60f81b83600081518110611d8757611d87613cfd565b01602001516001600160f81b03191611611dc757600181602001818151611dae9190613e2a565b90525080516001908290611dc3908390613d44565b9052505b6118cc81611e4b565b805160009015801590611de557508151602110155b611dee57600080fd5b6000611dfd8360200151612944565b90506000818460000151611e119190613d44565b9050600080838660200151611e269190613e2a565b9050805191506020831015611e4257826020036101000a820491505b50949350505050565b6060611e56826129c5565b611e5f57600080fd5b6000611e6a836129fe565b90506000816001600160401b03811115611e8657611e86613629565b604051908082528060200260200182016040528015611ecb57816020015b6040805180820190915260008082526020820152815260200190600190039081611ea45790505b5090506000611edd8560200151612944565b8560200151611eec9190613e2a565b90506000805b84811015611f5557611f0383612a81565b9150604051806040016040528083815260200184815250848281518110611f2c57611f2c613cfd565b6020908102919091010152611f418284613e2a565b925080611f4d81613d29565b915050611ef2565b509195945050505050565b8051600090601514611f7157600080fd5b610eea82611dd0565b8051606090611f8857600080fd5b6000611f978360200151612944565b90506000818460000151611fab9190613d44565b90506000816001600160401b03811115611fc757611fc7613629565b6040519080825280601f01601f191660200182016040528015611ff1576020820181803683370190505b5090506000816020019050611e4284876020015161200f9190613e2a565b8285612b2a565b60008260018151811061202b5761202b613cfd565b602002602001015160001c90506000808380602001905181019061204f9190613ec7565b6001600160a01b03808616600090815260046020526040902054929450909250168061207a57600080fd5b6040516340c10f1960e01b81526001600160a01b038381166004830152602482018590528216906340c10f1990604401600060405180830381600087803b1580156120c457600080fd5b505af1158015610967573d6000803e3d6000fd5b6000826001815181106120ed576120ed613cfd565b602002602001015160001c9050600080838060200190518101906121119190613ec7565b6001600160a01b038086166000908152600360205260409020549294509092501661213d818385612ba5565b505050505050565b60008260018151811061215a5761215a613cfd565b6020908102919091018101516001600160a01b038082166000908152600490935260409092205490925016156121c95760405162461bcd60e51b8152602060048201526014602482015273189c9a5919d948185b1c9958591e48195e1a5cdd60621b60448201526064016103c2565b6000836002815181106121de576121de613cfd565b602002602001015160001c9050600080848060200190518101906122029190613ef7565b60405191935091506001600160a01b03851690600090829061222390613585565b8190604051809103906000f5905080158015612243573d6000803e3d6000fd5b50604051630b127b6360e11b81529091506001600160a01b03821690631624f6c69061227790879087908a90600401613f5a565b600060405180830381600087803b15801561229157600080fd5b505af11580156122a5573d6000803e3d6000fd5b5050506001600160a01b0380831660008181526005602090815260408083208054958d166001600160a01b03199687168117909155808452600490925280832080548616851790556001805480820182559084527fb10e2d527612073b26eecdfd717e6a320cf44b4afac2b0732d9fcbe2b7fa0cf6018054909516841790945592519193507f78591f651c27eef63481b7fd779e44c2426cbe82c7050fe9bc90b6707efbc3d391a35050505050505050565b60008160018151811061236c5761236c613cfd565b602002602001015160001c905060008260028151811061238e5761238e613cfd565b6020908102919091018101516001600160a01b038481166000908152600290935260409092205490925016156124065760405162461bcd60e51b815260206004820152601e60248201527f6d697373696e67206d617070696e6720746f2061636b6e6f776c65646765000060448201526064016103c2565b6001600160a01b0391821660008181526002602090815260408083208054969095166001600160a01b0319968716811790955593825260039052918220805484168217905581546001810183559180527f290decd9548b62a8d60345a988386fc84ba6bc95484008f6362f93160ef3e563909101805490921617905550565b60006124da826040518060400160405280602081526020017f5361666545524332303a206c6f772d6c6576656c2063616c6c206661696c6564815250856001600160a01b0316612bd59092919063ffffffff16565b80519091501561255757808060200190518101906124f89190613c8d565b6125575760405162461bcd60e51b815260206004820152602a60248201527f5361666545524332303a204552433230206f7065726174696f6e20646964206e6044820152691bdd081cdd58d8d9595960b21b60648201526084016103c2565b505050565b600654600160a81b900460ff166125855760405162461bcd60e51b81526004016103c290613da9565b6109a733611239565b606080825160011480156125bd57506080836000815181106125b2576125b2613cfd565b016020015160f81c11155b156125c9575081610eea565b610ee76125d884516080612bec565b84612da2565b60408051600560a21b83186014820152603481019091526060906118cc8161258e565b6060610eea61260f83612e1f565b61258e565b6060600061262183612f53565b90506118cc612632825160c0612bec565b82612da2565b600061264382613084565b610eea90600184901b613d44565b606061265c82613084565b6001600160401b0381111561267357612673613629565b60405190808252806020026020018201604052801561269c578160200160208202803683370190505b50905060008060ff5b8015612718576126b6600182613d44565b6001901b8516156127065760016126cf81831b84613e2a565b6126d99190613d44565b91508184846126e781613d29565b9550815181106126f9576126f9613cfd565b6020026020010181815250505b8061271081613f93565b9150506126a5565b50825182146127695760405162461bcd60e51b815260206004820152601760248201527f496e76616c6964206269742063616c63756c6174696f6e00000000000000000060448201526064016103c2565b5050919050565b600080600161277e846130b7565b6127889190613e84565b60ff166001901b8361279a9190613d44565b91506127a7600184613d44565b9050808214156127e85760405162461bcd60e51b815260206004820152600c60248201526b139bdd0818481c185c995b9d60a21b60448201526064016103c2565b915091565b606060006128228360408051808201825260008082526020918201528151808301909252825182529182019181019190915290565b9050600061282f82613118565b9050600061283c836129fe565b905060005b818110156128f25761285283613184565b600888901c9790945060ff16612867856131e1565b89146128b55760405162461bcd60e51b815260206004820152601a60248201527f50726f6f664c69623a20696e76616c696420686173686c696e6b00000000000060448201526064016103c2565b6128bf85826131fc565b94506128cc600184613d44565b8210156128df576128dc85611dd0565b98505b50806128ea81613d29565b915050612841565b5085156129305760405162461bcd60e51b815260206004820152600c60248201526b0d2dcecc2d8d2c840e0c2e8d60a31b60448201526064016103c2565b61293983611f7a565b979650505050505050565b8051600090811a608081101561295d5750600092915050565b60b8811080612978575060c08110801590612978575060f881105b156129865750600192915050565b60c08110156129b35761299b600160b8613e84565b6129a89060ff1682613d44565b6118cc906001613e2a565b61299b600160f8613e84565b50919050565b80516000906129d657506000919050565b6020820151805160001a9060c08210156129f4575060009392505050565b5060019392505050565b8051600090612a0f57506000919050565b600080612a1f8460200151612944565b8460200151612a2e9190613e2a565b9050600084600001518560200151612a469190613e2a565b90505b80821015612a7857612a5a82612a81565b612a649083613e2a565b915082612a7081613d29565b935050612a49565b50909392505050565b80516000908190811a6080811015612a9c5760019150612b23565b60b8811015612ac257612ab0608082613d44565b612abb906001613e2a565b9150612b23565b60c0811015612aef5760b78103600185019450806020036101000a85510460018201810193505050612b23565b60f8811015612b0357612ab060c082613d44565b60f78103600185019450806020036101000a855104600182018101935050505b5092915050565b80612b3457505050565b60208110612b6c5782518252612b4b602084613e2a565b9250612b58602083613e2a565b9150612b65602082613d44565b9050612b34565b60006001612b7b836020613d44565b612b879061010061408e565b612b919190613d44565b935183518516941916939093179091525050565b6040516001600160a01b03831660248201526044810182905261255790849063a9059cbb60e01b906064016112bf565b6060612be4848460008561334f565b949350505050565b6060806038841015612c565760408051600180825281830190925290602082018180368337019050509050612c218385613e2a565b601f1a60f81b81600081518110612c3a57612c3a613cfd565b60200101906001600160f81b031916908160001a905350610ee7565b600060015b612c6581876140b0565b15612c8b5781612c7481613d29565b9250612c849050610100826140c4565b9050612c5b565b612c96826001613e2a565b6001600160401b03811115612cad57612cad613629565b6040519080825280601f01601f191660200182016040528015612cd7576020820181803683370190505b509250612ce48583613e2a565b612cef906037613e2a565b601f1a60f81b83600081518110612d0857612d08613cfd565b60200101906001600160f81b031916908160001a905350600190505b818111612d9957610100612d388284613d44565b612d449061010061408e565b612d4e90886140b0565b612d5891906140e3565b601f1a60f81b838281518110612d7057612d70613cfd565b60200101906001600160f81b031916908160001a90535080612d9181613d29565b915050612d24565b50509392505050565b6060806040519050835180825260208201818101602087015b81831015612dd3578051835260209283019201612dbb565b50855184518101855292509050808201602086015b81831015612e00578051835260209283019201612de8565b508651929092011591909101601f01601f191660405250905092915050565b6040805160208082528183019092526060916000919060208201818036833701905050905082602082015260005b6020811015612e9357818181518110612e6857612e68613cfd565b01602001516001600160f81b03191615612e8157612e93565b80612e8b81613d29565b915050612e4d565b6000612ea0826020613d44565b6001600160401b03811115612eb757612eb7613629565b6040519080825280601f01601f191660200182016040528015612ee1576020820181803683370190505b50905060005b8151811015611e42578383612efb81613d29565b945081518110612f0d57612f0d613cfd565b602001015160f81c60f81b828281518110612f2a57612f2a613cfd565b60200101906001600160f81b031916908160001a90535080612f4b81613d29565b915050612ee7565b6060815160001415612f75576040805160008082526020820190925290612b23565b6000805b8351811015612fbc57838181518110612f9457612f94613cfd565b60200260200101515182612fa89190613e2a565b915080612fb481613d29565b915050612f79565b6000826001600160401b03811115612fd657612fd6613629565b6040519080825280601f01601f191660200182016040528015613000576020820181803683370190505b50600092509050602081015b8551831015611e4257600086848151811061302957613029613cfd565b60200260200101519050600060208201905061304783828451613475565b87858151811061305957613059613cfd565b6020026020010151518361306d9190613e2a565b92505050828061307c90613d29565b93505061300c565b6000815b80156129bf576130996002826140e3565b600114156130af57816130ab81613d29565b9250505b60011c613088565b600081815b80821115613104576130d5600160ff851681901b613d44565b6130df9083613d44565b91506130ea826134ed565b92506130fd600160ff851681901b613d44565b90506130bc565b61310e8282613d44565b612be49084613e84565b6040805160808101825260009181018281526060820183905281526020810191909152613144826129c5565b61314d57600080fd5b600061315c8360200151612944565b836020015161316b9190613e2a565b6040805180820190915293845260208401525090919050565b60408051808201909152600080825260208201526131a182613528565b6131aa57600080fd5b602082015160006131ba82612a81565b90506131c68183613e2a565b60209485015260408051808201909152908152928301525090565b80516000906131ef57600080fd5b5080516020909101512090565b6040805180820190915260008082526020820152613219836129c5565b61326f5760405162461bcd60e51b815260206004820152602160248201527f524c504465636f646572206974657261746f72206973206e6f742061206c69736044820152601d60fa1b60648201526084016103c2565b8251602084015160009161328291613e2a565b905060006132938560200151612944565b85602001516132a29190613e2a565b90506000805b858110156132d9576132b983612a81565b91506132c58284613e2a565b9250806132d181613d29565b9150506132a8565b506132e382612a81565b9050826132f08284613e2a565b11156133325760405162461bcd60e51b8152602060048201526011602482015270524c50206974656d206f766572666c6f7760781b60448201526064016103c2565b604080518082019091529081526020810191909152949350505050565b6060824710156133b05760405162461bcd60e51b815260206004820152602660248201527f416464726573733a20696e73756666696369656e742062616c616e636520666f6044820152651c8818d85b1b60d21b60648201526084016103c2565b6001600160a01b0385163b6134075760405162461bcd60e51b815260206004820152601d60248201527f416464726573733a2063616c6c20746f206e6f6e2d636f6e747261637400000060448201526064016103c2565b600080866001600160a01b0316858760405161342391906140f7565b60006040518083038185875af1925050503d8060008114613460576040519150601f19603f3d011682016040523d82523d6000602084013e613465565b606091505b509150915061293982828661354c565b8282825b602081106134b15781518352613490602084613e2a565b925061349d602083613e2a565b91506134aa602082613d44565b9050613479565b600060016134c0836020613d44565b6134cc9061010061408e565b6134d69190613d44565b925184518416931916929092179092525050505050565b600060015b6134ff60ff821684613e2a565b600160ff83161b1161351d578061351581613ea7565b9150506134f2565b6118cc600182613e84565b8051805160208201516000929161353e91613e2a565b836020015110915050919050565b6060831561355b5750816118cc565b82511561356b5782518084602001fd5b8160405162461bcd60e51b81526004016103c29190614113565b6111a78061412783390190565b6000602082840312156135a457600080fd5b5035919050565b6001600160a01b0381168114610c4157600080fd5b6000602082840312156135d257600080fd5b8135610ee7816135ab565b80356113a5816135ab565b6000806000606084860312156135fd57600080fd5b8335613608816135ab565b92506020840135613618816135ab565b929592945050506040919091013590565b634e487b7160e01b600052604160045260246000fd5b60405161034081016001600160401b038111828210171561366257613662613629565b60405290565b604051601f8201601f191681016001600160401b038111828210171561369057613690613629565b604052919050565b60006001600160401b038211156136b1576136b1613629565b50601f01601f191660200190565b600082601f8301126136d057600080fd5b81356136e36136de82613698565b613668565b8181528460208386010111156136f857600080fd5b816020850160208301376000918101602001919091529392505050565b600082601f83011261372657600080fd5b813560206001600160401b0382111561374157613741613629565b8160051b613750828201613668565b928352848101820192828101908785111561376a57600080fd5b83870192505b8483101561293957823582529183019190830190613770565b600060a0828403121561379b57600080fd5b60405160a081016001600160401b0382821081831117156137be576137be613629565b8160405282935084358352602085013560208401526040850135604084015260608501359150808211156137f157600080fd5b6137fd86838701613715565b6060840152608085013591508082111561381657600080fd5b5061382385828601613715565b6080830152505092915050565b60006060828403121561384257600080fd5b604051606081016001600160401b03828210818311171561386557613865613629565b816040528293508435835260208501356020840152604085013591508082111561388e57600080fd5b5061389b858286016136bf565b6040830152505092915050565b6000806000606084860312156138bd57600080fd5b83356001600160401b03808211156138d457600080fd5b9085019061034082880312156138e957600080fd5b6138f161363f565b823581526020830135602082015261390b604084016135dd565b6040820152606083013560608201526080830135608082015260a083013560a082015260c083013560c082015260e083013560e0820152610100808401358381111561395657600080fd5b6139628a8287016136bf565b918301919091525061012083810135908201526101408084013590820152610160808401359082015261018080840135908201526101a080840135838111156139aa57600080fd5b6139b68a8287016136bf565b91830191909152506101c083810135908201526101e080840135908201526102008084013590820152610220808401359082015261024080840135838111156139fe57600080fd5b613a0a8a8287016136bf565b8284015250506102608084013583811115613a2457600080fd5b613a308a8287016136bf565b8284015250506102808084013583811115613a4a57600080fd5b613a568a8287016136bf565b8284015250506102a08084013583811115613a7057600080fd5b613a7c8a8287016136bf565b8284015250506102c08084013583811115613a9657600080fd5b613aa28a8287016136bf565b8284015250506102e08084013583811115613abc57600080fd5b613ac88a8287016136bf565b8284015250506103008084013583811115613ae257600080fd5b613aee8a8287016136bf565b8284015250506103208084013583811115613b0857600080fd5b613b148a8287016136bf565b828401525050809550506020860135915080821115613b3257600080fd5b613b3e87838801613789565b93506040860135915080821115613b5457600080fd5b50613b6186828701613830565b9150509250925092565b600060208284031215613b7d57600080fd5b815160ff81168114610ee757600080fd5b60005b83811015613ba9578181015183820152602001613b91565b838111156112f65750506000910152565b600082601f830112613bcb57600080fd5b8151613bd96136de82613698565b818152846020838601011115613bee57600080fd5b612be4826020830160208701613b8e565b600060208284031215613c1157600080fd5b81516001600160401b03811115613c2757600080fd5b612be484828501613bba565b60008151808452613c4b816020860160208601613b8e565b601f01601f19169290920160200192915050565b604081526000613c726040830185613c33565b8281036020840152613c848185613c33565b95945050505050565b600060208284031215613c9f57600080fd5b81518015158114610ee757600080fd5b6020808252818101527f4f776e61626c653a2063616c6c6572206973206e6f7420746865206f776e6572604082015260600190565b600060208284031215613cf657600080fd5b5051919050565b634e487b7160e01b600052603260045260246000fd5b634e487b7160e01b600052601160045260246000fd5b6000600019821415613d3d57613d3d613d13565b5060010190565b600082821015613d5657613d56613d13565b500390565b6020808252602e908201527f496e697469616c697a61626c653a20636f6e747261637420697320616c72656160408201526d191e481a5b9a5d1a585b1a5e995960921b606082015260800190565b6020808252602b908201527f496e697469616c697a61626c653a20636f6e7472616374206973206e6f74206960408201526a6e697469616c697a696e6760a81b606082015260800190565b815160009082906020808601845b83811015613e1e57815185529382019390820190600101613e02565b50929695505050505050565b60008219821115613e3d57613e3d613d13565b500190565b600060ff821660ff84168060ff03821115613e5f57613e5f613d13565b019392505050565b600060ff821680613e7a57613e7a613d13565b6000190192915050565b600060ff821660ff841680821015613e9e57613e9e613d13565b90039392505050565b600060ff821660ff811415613ebe57613ebe613d13565b60010192915050565b60008060408385031215613eda57600080fd5b825191506020830151613eec816135ab565b809150509250929050565b60008060408385031215613f0a57600080fd5b82516001600160401b0380821115613f2157600080fd5b613f2d86838701613bba565b93506020850151915080821115613f4357600080fd5b50613f5085828601613bba565b9150509250929050565b606081526000613f6d6060830186613c33565b8281036020840152613f7f8186613c33565b91505060ff83166040830152949350505050565b600081613fa257613fa2613d13565b506000190190565b600181815b80851115613fe5578160001904821115613fcb57613fcb613d13565b80851615613fd857918102915b93841c9390800290613faf565b509250929050565b600082613ffc57506001610eea565b8161400957506000610eea565b816001811461401f576002811461402957614045565b6001915050610eea565b60ff84111561403a5761403a613d13565b50506001821b610eea565b5060208310610133831016604e8410600b8410161715614068575081810a610eea565b6140728383613faa565b806000190482111561408657614086613d13565b029392505050565b6000610ee78383613fed565b634e487b7160e01b600052601260045260246000fd5b6000826140bf576140bf61409a565b500490565b60008160001904831182151516156140de576140de613d13565b500290565b6000826140f2576140f261409a565b500690565b60008251614109818460208701613b8e565b9190910192915050565b602081526000610ee76020830184613c3356fe608060405234801561001057600080fd5b50611187806100206000396000f3fe608060405234801561001057600080fd5b50600436106101165760003560e01c806370a08231116100a257806395d89b411161007157806395d89b411461023d578063a457c2d714610245578063a9059cbb14610258578063dd62ed3e1461026b578063f2fde38b1461027e57600080fd5b806370a08231146101de578063715018a61461020757806379cc67901461020f5780638da5cb5b1461022257600080fd5b806323b872dd116100e957806323b872dd14610183578063313ce5671461019657806339509351146101a557806340c10f19146101b857806342966c68146101cb57600080fd5b806306fdde031461011b578063095ea7b3146101395780631624f6c61461015c57806318160ddd14610171575b600080fd5b610123610291565b6040516101309190610da2565b60405180910390f35b61014c610147366004610e0e565b610323565b6040519015158152602001610130565b61016f61016a366004610edb565b61033b565b005b6035545b604051908152602001610130565b61014c610191366004610f59565b6103bd565b60405160128152602001610130565b61014c6101b3366004610e0e565b6103e1565b61016f6101c6366004610e0e565b610403565b61016f6101d9366004610f95565b610444565b6101756101ec366004610fae565b6001600160a01b031660009081526033602052604090205490565b61016f610451565b61016f61021d366004610e0e565b610487565b6097546040516001600160a01b039091168152602001610130565b61012361049c565b61014c610253366004610e0e565b6104ab565b61014c610266366004610e0e565b610526565b610175610279366004610fd0565b610534565b61016f61028c366004610fae565b61055f565b6060603680546102a090611003565b80601f01602080910402602001604051908101604052809291908181526020018280546102cc90611003565b80156103195780601f106102ee57610100808354040283529160200191610319565b820191906000526020600020905b8154815290600101906020018083116102fc57829003601f168201915b5050505050905090565b6000336103318185856105f7565b5060019392505050565b6000610347600161071c565b9050801561035f576000805461ff0019166101001790555b61036984846107a9565b6103716107da565b80156103b7576000805461ff0019169055604051600181527f7f26b83ff96e1f2b6a682f133852f6798a09c465da95921460cefb38474024989060200160405180910390a15b50505050565b6000336103cb858285610801565b6103d6858585610875565b506001949350505050565b6000336103318185856103f48383610534565b6103fe9190611054565b6105f7565b6097546001600160a01b031633146104365760405162461bcd60e51b815260040161042d9061106c565b60405180910390fd5b6104408282610a43565b5050565b61044e3382610b22565b50565b6097546001600160a01b0316331461047b5760405162461bcd60e51b815260040161042d9061106c565b6104856000610c6d565b565b610492823383610801565b6104408282610b22565b6060603780546102a090611003565b600033816104b98286610534565b9050838110156105195760405162461bcd60e51b815260206004820152602560248201527f45524332303a2064656372656173656420616c6c6f77616e63652062656c6f77604482015264207a65726f60d81b606482015260840161042d565b6103d682868684036105f7565b600033610331818585610875565b6001600160a01b03918216600090815260346020908152604080832093909416825291909152205490565b6097546001600160a01b031633146105895760405162461bcd60e51b815260040161042d9061106c565b6001600160a01b0381166105ee5760405162461bcd60e51b815260206004820152602660248201527f4f776e61626c653a206e6577206f776e657220697320746865207a65726f206160448201526564647265737360d01b606482015260840161042d565b61044e81610c6d565b6001600160a01b0383166106595760405162461bcd60e51b8152602060048201526024808201527f45524332303a20617070726f76652066726f6d20746865207a65726f206164646044820152637265737360e01b606482015260840161042d565b6001600160a01b0382166106ba5760405162461bcd60e51b815260206004820152602260248201527f45524332303a20617070726f766520746f20746865207a65726f206164647265604482015261737360f01b606482015260840161042d565b6001600160a01b0383811660008181526034602090815260408083209487168084529482529182902085905590518481527f8c5be1e5ebec7d5bd14f71427d1e84f3dd0314c0f7b2291e5b200ac8c7c3b92591015b60405180910390a3505050565b60008054610100900460ff1615610763578160ff16600114801561073f5750303b155b61075b5760405162461bcd60e51b815260040161042d906110a1565b506000919050565b60005460ff80841691161061078a5760405162461bcd60e51b815260040161042d906110a1565b506000805460ff191660ff92909216919091179055600190565b919050565b600054610100900460ff166107d05760405162461bcd60e51b815260040161042d906110ef565b6104408282610cbf565b600054610100900460ff166104855760405162461bcd60e51b815260040161042d906110ef565b600061080d8484610534565b905060001981146103b757818110156108685760405162461bcd60e51b815260206004820152601d60248201527f45524332303a20696e73756666696369656e7420616c6c6f77616e6365000000604482015260640161042d565b6103b784848484036105f7565b6001600160a01b0383166108d95760405162461bcd60e51b815260206004820152602560248201527f45524332303a207472616e736665722066726f6d20746865207a65726f206164604482015264647265737360d81b606482015260840161042d565b6001600160a01b03821661093b5760405162461bcd60e51b815260206004820152602360248201527f45524332303a207472616e7366657220746f20746865207a65726f206164647260448201526265737360e81b606482015260840161042d565b6001600160a01b038316600090815260336020526040902054818110156109b35760405162461bcd60e51b815260206004820152602660248201527f45524332303a207472616e7366657220616d6f756e7420657863656564732062604482015265616c616e636560d01b606482015260840161042d565b6001600160a01b038085166000908152603360205260408082208585039055918516815290812080548492906109ea908490611054565b92505081905550826001600160a01b0316846001600160a01b03167fddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef84604051610a3691815260200190565b60405180910390a36103b7565b6001600160a01b038216610a995760405162461bcd60e51b815260206004820152601f60248201527f45524332303a206d696e7420746f20746865207a65726f206164647265737300604482015260640161042d565b8060356000828254610aab9190611054565b90915550506001600160a01b03821660009081526033602052604081208054839290610ad8908490611054565b90915550506040518181526001600160a01b038316906000907fddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef9060200160405180910390a35050565b6001600160a01b038216610b825760405162461bcd60e51b815260206004820152602160248201527f45524332303a206275726e2066726f6d20746865207a65726f206164647265736044820152607360f81b606482015260840161042d565b6001600160a01b03821660009081526033602052604090205481811015610bf65760405162461bcd60e51b815260206004820152602260248201527f45524332303a206275726e20616d6f756e7420657863656564732062616c616e604482015261636560f01b606482015260840161042d565b6001600160a01b0383166000908152603360205260408120838303905560358054849290610c2590849061113a565b90915550506040518281526000906001600160a01b038516907fddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef9060200161070f565b505050565b609780546001600160a01b038381166001600160a01b0319831681179093556040519116919082907f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e090600090a35050565b600054610100900460ff16610ce65760405162461bcd60e51b815260040161042d906110ef565b8151610cf9906036906020850190610d09565b508051610c689060379060208401905b828054610d1590611003565b90600052602060002090601f016020900481019282610d375760008555610d7d565b82601f10610d5057805160ff1916838001178555610d7d565b82800160010185558215610d7d579182015b82811115610d7d578251825591602001919060010190610d62565b50610d89929150610d8d565b5090565b5b80821115610d895760008155600101610d8e565b600060208083528351808285015260005b81811015610dcf57858101830151858201604001528201610db3565b81811115610de1576000604083870101525b50601f01601f1916929092016040019392505050565b80356001600160a01b03811681146107a457600080fd5b60008060408385031215610e2157600080fd5b610e2a83610df7565b946020939093013593505050565b634e487b7160e01b600052604160045260246000fd5b600082601f830112610e5f57600080fd5b813567ffffffffffffffff80821115610e7a57610e7a610e38565b604051601f8301601f19908116603f01168101908282118183101715610ea257610ea2610e38565b81604052838152866020858801011115610ebb57600080fd5b836020870160208301376000602085830101528094505050505092915050565b600080600060608486031215610ef057600080fd5b833567ffffffffffffffff80821115610f0857600080fd5b610f1487838801610e4e565b94506020860135915080821115610f2a57600080fd5b50610f3786828701610e4e565b925050604084013560ff81168114610f4e57600080fd5b809150509250925092565b600080600060608486031215610f6e57600080fd5b610f7784610df7565b9250610f8560208501610df7565b9150604084013590509250925092565b600060208284031215610fa757600080fd5b5035919050565b600060208284031215610fc057600080fd5b610fc982610df7565b9392505050565b60008060408385031215610fe357600080fd5b610fec83610df7565b9150610ffa60208401610df7565b90509250929050565b600181811c9082168061101757607f821691505b6020821081141561103857634e487b7160e01b600052602260045260246000fd5b50919050565b634e487b7160e01b600052601160045260246000fd5b600082198211156110675761106761103e565b500190565b6020808252818101527f4f776e61626c653a2063616c6c6572206973206e6f7420746865206f776e6572604082015260600190565b6020808252602e908201527f496e697469616c697a61626c653a20636f6e747261637420697320616c72656160408201526d191e481a5b9a5d1a585b1a5e995960921b606082015260800190565b6020808252602b908201527f496e697469616c697a61626c653a20636f6e7472616374206973206e6f74206960408201526a6e697469616c697a696e6760a81b606082015260800190565b60008282101561114c5761114c61103e565b50039056fea2646970667358221220a61c5b3bf7a7628847ce1673f6c1eb638e31256a6c6b7b7baac5b4557adbc57f64736f6c63430008090033a2646970667358221220433c8ce4a5ac468f81c26818520ace4f6f0e7500d366dfd6ecb6cfe0ad81877564736f6c63430008090033",
  "deployedBytecode": "0x608060405234801561001057600080fd5b506004361061012c5760003560e01c80638487b9cf116100ad578063cd06c3a111610071578063cd06c3a11461028b578063d650d3f7146102a6578063e05bdaf7146102cf578063e71575e8146102f8578063f2fde38b1461032157600080fd5b80638487b9cf146101f85780638ab3124a146102215780638da5cb5b14610254578063ae24fbb414610265578063bf21980b1461027857600080fd5b80636aa92327116100f45780636aa92327146101af578063715018a6146101c25780637750c9f0146101ca5780638129fc1c146101dd57806381bac14f146101e557600080fd5b80631b7f3e231461013157806335c6814d146101615780634ae83c8e146101745780634d2be8e51461018957806359508f8f1461019c575b600080fd5b606b54610144906001600160a01b031681565b6040516001600160a01b0390911681526020015b60405180910390f35b61014461016f366004613592565b610334565b6101876101823660046135c0565b61035e565b005b600654610144906001600160a01b031681565b6101876101aa3660046135e8565b610573565b6101876101bd3660046138a8565b6106d4565b610187610973565b6101876101d83660046135e8565b6109a9565b610187610bc9565b6101876101f33660046135c0565b610c44565b6101446102063660046135c0565b6005602052600090815260409020546001600160a01b031681565b61024461022f366004613592565b606c6020526000908152604090205460ff1681565b6040519015158152602001610158565b6039546001600160a01b0316610144565b610144610273366004613592565b610c90565b6101876102863660046135c0565b610ca0565b60005460015460408051928352602083019190915201610158565b6101446102b43660046135c0565b6003602052600090815260409020546001600160a01b031681565b6101446102dd3660046135c0565b6004602052600090815260409020546001600160a01b031681565b6101446103063660046135c0565b6002602052600090815260409020546001600160a01b031681565b61018761032f3660046135c0565b610cec565b6001818154811061034457600080fd5b6000918252602090912001546001600160a01b0316905081565b6001600160a01b0381811660009081526002602052604090205416156103cb5760405162461bcd60e51b815260206004820152601760248201527f746f6b656e20697320616c7265616479206d617070656400000000000000000060448201526064015b60405180910390fd5b6000819050806001600160a01b031663313ce5676040518163ffffffff1660e01b815260040160206040518083038186803b15801561040957600080fd5b505afa15801561041d573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906104419190613b6b565b60ff16826001600160a01b03167fc13b93ab57586894396c38a46a06c88056fdbb23c7c595f8d08274f9a8593a42836001600160a01b03166306fdde036040518163ffffffff1660e01b815260040160006040518083038186803b1580156104a857600080fd5b505afa1580156104bc573d6000803e3d6000fd5b505050506040513d6000823e601f3d908101601f191682016040526104e49190810190613bff565b846001600160a01b03166395d89b416040518163ffffffff1660e01b815260040160006040518083038186803b15801561051d57600080fd5b505afa158015610531573d6000803e3d6000fd5b505050506040513d6000823e601f3d908101601f191682016040526105599190810190613bff565b604051610567929190613c5f565b60405180910390a35050565b6001600160a01b0382166105c95760405162461bcd60e51b815260206004820152601b60248201527f726563697069656e742069732061207a65726f2061646472657373000000000060448201526064016103c2565b6001600160a01b03838116600090815260056020526040902054166106285760405162461bcd60e51b8152602060048201526015602482015274189c9a5919d948191bd95cc81b9bdd08195e1a5cdd605a1b60448201526064016103c2565b60405163079cc67960e41b8152336004820152602481018290526001600160a01b038416906379cc679090604401600060405180830381600087803b15801561067057600080fd5b505af1158015610684573d6000803e3d6000fd5b5050604080518481526001600160a01b038681166020830152339450871692507f3dd1df88dc92e2788892542d81f999d720a44b4c127065d45c128f4f59fdc373910160405180910390a3505050565b606b5461020084015183516040516303ce246160e61b8152600481019290925260248201526001600160a01b039091169063f38918409060440160206040518083038186803b15801561072657600080fd5b505afa15801561073a573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061075e9190613c8d565b6107aa5760405162461bcd60e51b815260206004820152601c60248201527f636865636b706f696e742076616c69646174696f6e206661696c65640000000060448201526064016103c2565b60006107b584610d84565b60a08501519091506000806107ca8787610d9d565b8651919350915083146108145760405162461bcd60e51b81526020600482015260126024820152711a5b9d985b1a59081c1c9bdbd9881c9bdbdd60721b60448201526064016103c2565b8161086c5760405162461bcd60e51b815260206004820152602260248201527f626c6f636b2068656164657220636f756c64206e6f7420626520766572696669604482015261195960f21b60648201526084016103c2565b602080860151604080519283018790528201859052606082015260009060800160408051601f1981840301815291815281516020928301206000818152606c90935291205490915060ff16156108f45760405162461bcd60e51b815260206004820152600d60248201526c646f75626c65207370656e742160981b60448201526064016103c2565b6000818152606c60205260408120805460ff191660011790556109178988610e7b565b9050600061092482610ef0565b9050600081116109675760405162461bcd60e51b815260206004820152600e60248201526d1b9bc81d985b1a5908195d995b9d60921b60448201526064016103c2565b50505050505050505050565b6039546001600160a01b0316331461099d5760405162461bcd60e51b81526004016103c290613caf565b6109a76000611239565b565b6001600160a01b0382166109ff5760405162461bcd60e51b815260206004820152601b60248201527f726563697069656e742069732061207a65726f2061646472657373000000000060448201526064016103c2565b6001600160a01b0383811660009081526002602052604090205416610a5e5760405162461bcd60e51b8152602060048201526015602482015274189c9a5919d948191bd95cc81b9bdd08195e1a5cdd605a1b60448201526064016103c2565b6040516370a0823160e01b81523060048201526000906001600160a01b038516906370a082319060240160206040518083038186803b158015610aa057600080fd5b505afa158015610ab4573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610ad89190613ce4565b9050610aef6001600160a01b03851633308561128b565b6040516370a0823160e01b81523060048201526000906001600160a01b038616906370a082319060240160206040518083038186803b158015610b3157600080fd5b505afa158015610b45573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610b699190613ce4565b90506000610b7782846112fc565b604080518281526001600160a01b03888116602083015292935033928916917f4c6ab40ee4cfa212a441d32ee2897945b4a52461284f9369e23fdf8faa6cdd69910160405180910390a3505050505050565b6000610bd56001611308565b90508015610bf1576006805460ff60a81b1916600160a81b1790555b610bf96113aa565b8015610c41576006805460ff60a81b19169055604051600181527f7f26b83ff96e1f2b6a682f133852f6798a09c465da95921460cefb38474024989060200160405180910390a15b50565b6039546001600160a01b03163314610c6e5760405162461bcd60e51b81526004016103c290613caf565b600680546001600160a01b0319166001600160a01b0392909216919091179055565b6000818154811061034457600080fd5b6039546001600160a01b03163314610cca5760405162461bcd60e51b81526004016103c290613caf565b606b80546001600160a01b0319166001600160a01b0392909216919091179055565b6039546001600160a01b03163314610d165760405162461bcd60e51b81526004016103c290613caf565b6001600160a01b038116610d7b5760405162461bcd60e51b815260206004820152602660248201527f4f776e61626c653a206e6577206f776e657220697320746865207a65726f206160448201526564647265737360d01b60648201526084016103c2565b610c4181611239565b6000610d8f826113db565b805190602001209050919050565b600060606000610dac85610d84565b85519091508114610df657505060408051808201909152601b81527f4865616465722064617461206f72206861736820696e76616c69640000000000602082015260009150610e74565b610e1884600001518560200151866040015184886060015189608001516118d3565b925082610e5e57505060408051808201909152601c81527f766572696679486561646572202d20696e76616c69642070726f6f6600000000602082015260009150610e74565b5050604080516020810190915260008152600191505b9250929050565b805160a083015160609114610ede5760405162461bcd60e51b8152602060048201526024808201527f76657269667952656365697074202d20646966666572656e74207472696520726044820152636f6f747360e01b60648201526084016103c2565b610ee782611d1f565b90505b92915050565b600080610efc83611d38565b90506000610f2382600081518110610f1657610f16613cfd565b6020026020010151611dd0565b905080600114610f665760405162461bcd60e51b815260206004820152600e60248201526d1c995d995c9d081c9958d95a5c1d60921b60448201526064016103c2565b6000610f8b83600381518110610f7e57610f7e613cfd565b6020026020010151611e4b565b905060005b8151811015611230576000610fb0838381518110610f7e57610f7e613cfd565b90506000610fd782600081518110610fca57610fca613cfd565b6020026020010151611f60565b6006549091506001600160a01b03808316911614610ff657505061121e565b600061100e83600181518110610f7e57610f7e613cfd565b9050600081516001600160401b0381111561102b5761102b613629565b604051908082528060200260200182016040528015611054578160200160208202803683370190505b50905060005b82518110156110aa57611078838281518110610f1657610f16613cfd565b60001b82828151811061108d5761108d613cfd565b6020908102919091010152806110a281613d29565b91505061105a565b5060006110d0856002815181106110c3576110c3613cfd565b6020026020010151611f7a565b90507f4c6ab40ee4cfa212a441d32ee2897945b4a52461284f9369e23fdf8faa6cdd698260008151811061110657611106613cfd565b602002602001015114156111355761111e8282612016565b8961112881613d29565b9a5050505050505061121e565b7f3dd1df88dc92e2788892542d81f999d720a44b4c127065d45c128f4f59fdc3738260008151811061116957611169613cfd565b602002602001015114156111815761111e82826120d8565b7fc13b93ab57586894396c38a46a06c88056fdbb23c7c595f8d08274f9a8593a42826000815181106111b5576111b5613cfd565b602002602001015114156111cd5761111e8282612145565b7f78591f651c27eef63481b7fd779e44c2426cbe82c7050fe9bc90b6707efbc3d38260008151811061120157611201613cfd565b602002602001015114156112185761111e82612357565b50505050505b8061122881613d29565b915050610f90565b50505050919050565b603980546001600160a01b038381166001600160a01b0319831681179093556040519116919082907f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e090600090a35050565b6040516001600160a01b03808516602483015283166044820152606481018290526112f69085906323b872dd60e01b906084015b60408051601f198184030181529190526020810180516001600160e01b03166001600160e01b031990931692909217909152612485565b50505050565b6000610ee78284613d44565b600654600090600160a81b900460ff1615611353578160ff16600114801561132f5750303b155b61134b5760405162461bcd60e51b81526004016103c290613d5b565b506000919050565b60065460ff808416600160a01b90920416106113815760405162461bcd60e51b81526004016103c290613d5b565b506006805460ff909216600160a01b0260ff60a01b19909216919091179055600190565b919050565b600654600160a81b900460ff166113d35760405162461bcd60e51b81526004016103c290613da9565b6109a761255c565b60408051600f808252610200820190925260609160009190816020015b60608152602001906001900390816113f857905050905061143d836020015160405160200161142991815260200190565b60405160208183030381529060405261258e565b8160008151811061145057611450613cfd565b602002602001018190525061146883604001516125de565b8160018151811061147b5761147b613cfd565b60200260200101819052506114a0836060015160405160200161142991815260200190565b816002815181106114b3576114b3613cfd565b60200260200101819052506114d8836080015160405160200161142991815260200190565b816003815181106114eb576114eb613cfd565b60200260200101819052506115108360a0015160405160200161142991815260200190565b8160048151811061152357611523613cfd565b60200260200101819052506115488360c0015160405160200161142991815260200190565b8160058151811061155b5761155b613cfd565b60200260200101819052506115808360e0015160405160200161142991815260200190565b8160068151811061159357611593613cfd565b60200260200101819052506115ac83610100015161258e565b816007815181106115bf576115bf613cfd565b60200260200101819052506115d8836101200151612601565b816008815181106115eb576115eb613cfd565b6020026020010181905250611604836101400151612601565b8160098151811061161757611617613cfd565b6020026020010181905250611630836101600151612601565b81600a8151811061164357611643613cfd565b602002602001018190525061165c836101800151612601565b81600b8151811061166f5761166f613cfd565b6020026020010181905250611688836101a0015161258e565b81600c8151811061169b5761169b613cfd565b60200260200101819052506116c1836101c0015160405160200161142991815260200190565b81600d815181106116d4576116d4613cfd565b60200260200101819052506116ed836101e00151612601565b81600e8151811061170057611700613cfd565b6020026020010181905250611719836102000151612601565b81600f8151811061172c5761172c613cfd565b6020026020010181905250611745836102200151612601565b8160108151811061175857611758613cfd565b602002602001018190525061177183610240015161258e565b8160118151811061178457611784613cfd565b602002602001018190525061179d83610260015161258e565b816012815181106117b0576117b0613cfd565b60200260200101819052506117c983610280015161258e565b816013815181106117dc576117dc613cfd565b60200260200101819052506117f5836102a0015161258e565b8160148151811061180857611808613cfd565b6020026020010181905250611821836102c0015161258e565b8160158151811061183457611834613cfd565b602002602001018190525061184d836102e0015161258e565b8160168151811061186057611860613cfd565b602002602001018190525061187983610300015161258e565b8160178151811061188c5761188c613cfd565b60200260200101819052506118a583610320015161258e565b816018815181106118b8576118b8613cfd565b60200260200101819052506118cc81612614565b9392505050565b6000806118df87612638565b9050858110156119295760405162461bcd60e51b8152602060048201526015602482015274496e646578206973206f7574206f662072616e676560581b60448201526064016103c2565b8360405160200161193a9190613df4565b60405160208183030381529060405280519060200120881461199e5760405162461bcd60e51b815260206004820181905260248201527f496e76616c696420726f6f7420686173682066726f6d20746865207065616b7360448201526064016103c2565b60008060006119ac8a612651565b905060005b8151811015611a41578960018383815181106119cf576119cf613cfd565b60200260200101516119e19190613d44565b10611a2f578781815181106119f8576119f8613cfd565b602002602001015192506001828281518110611a1657611a16613cfd565b6020026020010151611a289190613d44565b9350611a41565b80611a3981613d29565b9150506119b1565b5081611a855760405162461bcd60e51b815260206004820152601360248201527215185c99d95d081a5cc81b9bdd08199bdd5b99606a1b60448201526064016103c2565b600086516001611a959190613e2a565b6001600160401b03811115611aac57611aac613629565b604051908082528060200260200182016040528015611ad5578160200160208202803683370190505b509050600080600089516001611aeb9190613e42565b90505b60ff811615611b7c578684611b0283613e67565b92508260ff1681518110611b1857611b18613cfd565b6020026020010181815250508c871415611b3157611b7c565b611b44611b3f886001613e2a565b612770565b9093509150611b54600184613d44565b8d11611b6a57611b65600184613d44565b611b75565b611b75600183613d44565b9650611aee565b60005b84518260ff161015611cc157848260ff1681518110611ba057611ba0613cfd565b602002602001015197508160ff1660001415611bbd57508b611caf565b84611bc9600184613e84565b60ff1681518110611bdc57611bdc613cfd565b6020026020010151600189611bf19190613d44565b1415611c5557611c4e8b611c06600185613e84565b60ff1681518110611c1957611c19613cfd565b602002602001015182604080516020808201949094528082019290925280518083038201815260609092019052805191012090565b9050611caf565b611cac818c611c65600186613e84565b60ff1681518110611c7857611c78613cfd565b6020026020010151604080516020808201949094528082019290925280518083038201815260609092019052805191012090565b90505b81611cb981613ea7565b925050611b7f565b868114611d095760405162461bcd60e51b815260206004820152601660248201527512185cda1959081c19585ac81a5cc81a5b9d985b1a5960521b60448201526064016103c2565b5060019f9e505050505050505050505050505050565b6060610eea8260000151836020015184604001516127ed565b60606000611d6d8360408051808201825260008082526020918201528151808301909252825182529182019181019190915290565b9050607f60f81b83600081518110611d8757611d87613cfd565b01602001516001600160f81b03191611611dc757600181602001818151611dae9190613e2a565b90525080516001908290611dc3908390613d44565b9052505b6118cc81611e4b565b805160009015801590611de557508151602110155b611dee57600080fd5b6000611dfd8360200151612944565b90506000818460000151611e119190613d44565b9050600080838660200151611e269190613e2a565b9050805191506020831015611e4257826020036101000a820491505b50949350505050565b6060611e56826129c5565b611e5f57600080fd5b6000611e6a836129fe565b90506000816001600160401b03811115611e8657611e86613629565b604051908082528060200260200182016040528015611ecb57816020015b6040805180820190915260008082526020820152815260200190600190039081611ea45790505b5090506000611edd8560200151612944565b8560200151611eec9190613e2a565b90506000805b84811015611f5557611f0383612a81565b9150604051806040016040528083815260200184815250848281518110611f2c57611f2c613cfd565b6020908102919091010152611f418284613e2a565b925080611f4d81613d29565b915050611ef2565b509195945050505050565b8051600090601514611f7157600080fd5b610eea82611dd0565b8051606090611f8857600080fd5b6000611f978360200151612944565b90506000818460000151611fab9190613d44565b90506000816001600160401b03811115611fc757611fc7613629565b6040519080825280601f01601f191660200182016040528015611ff1576020820181803683370190505b5090506000816020019050611e4284876020015161200f9190613e2a565b8285612b2a565b60008260018151811061202b5761202b613cfd565b602002602001015160001c90506000808380602001905181019061204f9190613ec7565b6001600160a01b03808616600090815260046020526040902054929450909250168061207a57600080fd5b6040516340c10f1960e01b81526001600160a01b038381166004830152602482018590528216906340c10f1990604401600060405180830381600087803b1580156120c457600080fd5b505af1158015610967573d6000803e3d6000fd5b6000826001815181106120ed576120ed613cfd565b602002602001015160001c9050600080838060200190518101906121119190613ec7565b6001600160a01b038086166000908152600360205260409020549294509092501661213d818385612ba5565b505050505050565b60008260018151811061215a5761215a613cfd565b6020908102919091018101516001600160a01b038082166000908152600490935260409092205490925016156121c95760405162461bcd60e51b8152602060048201526014602482015273189c9a5919d948185b1c9958591e48195e1a5cdd60621b60448201526064016103c2565b6000836002815181106121de576121de613cfd565b602002602001015160001c9050600080848060200190518101906122029190613ef7565b60405191935091506001600160a01b03851690600090829061222390613585565b8190604051809103906000f5905080158015612243573d6000803e3d6000fd5b50604051630b127b6360e11b81529091506001600160a01b03821690631624f6c69061227790879087908a90600401613f5a565b600060405180830381600087803b15801561229157600080fd5b505af11580156122a5573d6000803e3d6000fd5b5050506001600160a01b0380831660008181526005602090815260408083208054958d166001600160a01b03199687168117909155808452600490925280832080548616851790556001805480820182559084527fb10e2d527612073b26eecdfd717e6a320cf44b4afac2b0732d9fcbe2b7fa0cf6018054909516841790945592519193507f78591f651c27eef63481b7fd779e44c2426cbe82c7050fe9bc90b6707efbc3d391a35050505050505050565b60008160018151811061236c5761236c613cfd565b602002602001015160001c905060008260028151811061238e5761238e613cfd565b6020908102919091018101516001600160a01b038481166000908152600290935260409092205490925016156124065760405162461bcd60e51b815260206004820152601e60248201527f6d697373696e67206d617070696e6720746f2061636b6e6f776c65646765000060448201526064016103c2565b6001600160a01b0391821660008181526002602090815260408083208054969095166001600160a01b0319968716811790955593825260039052918220805484168217905581546001810183559180527f290decd9548b62a8d60345a988386fc84ba6bc95484008f6362f93160ef3e563909101805490921617905550565b60006124da826040518060400160405280602081526020017f5361666545524332303a206c6f772d6c6576656c2063616c6c206661696c6564815250856001600160a01b0316612bd59092919063ffffffff16565b80519091501561255757808060200190518101906124f89190613c8d565b6125575760405162461bcd60e51b815260206004820152602a60248201527f5361666545524332303a204552433230206f7065726174696f6e20646964206e6044820152691bdd081cdd58d8d9595960b21b60648201526084016103c2565b505050565b600654600160a81b900460ff166125855760405162461bcd60e51b81526004016103c290613da9565b6109a733611239565b606080825160011480156125bd57506080836000815181106125b2576125b2613cfd565b016020015160f81c11155b156125c9575081610eea565b610ee76125d884516080612bec565b84612da2565b60408051600560a21b83186014820152603481019091526060906118cc8161258e565b6060610eea61260f83612e1f565b61258e565b6060600061262183612f53565b90506118cc612632825160c0612bec565b82612da2565b600061264382613084565b610eea90600184901b613d44565b606061265c82613084565b6001600160401b0381111561267357612673613629565b60405190808252806020026020018201604052801561269c578160200160208202803683370190505b50905060008060ff5b8015612718576126b6600182613d44565b6001901b8516156127065760016126cf81831b84613e2a565b6126d99190613d44565b91508184846126e781613d29565b9550815181106126f9576126f9613cfd565b6020026020010181815250505b8061271081613f93565b9150506126a5565b50825182146127695760405162461bcd60e51b815260206004820152601760248201527f496e76616c6964206269742063616c63756c6174696f6e00000000000000000060448201526064016103c2565b5050919050565b600080600161277e846130b7565b6127889190613e84565b60ff166001901b8361279a9190613d44565b91506127a7600184613d44565b9050808214156127e85760405162461bcd60e51b815260206004820152600c60248201526b139bdd0818481c185c995b9d60a21b60448201526064016103c2565b915091565b606060006128228360408051808201825260008082526020918201528151808301909252825182529182019181019190915290565b9050600061282f82613118565b9050600061283c836129fe565b905060005b818110156128f25761285283613184565b600888901c9790945060ff16612867856131e1565b89146128b55760405162461bcd60e51b815260206004820152601a60248201527f50726f6f664c69623a20696e76616c696420686173686c696e6b00000000000060448201526064016103c2565b6128bf85826131fc565b94506128cc600184613d44565b8210156128df576128dc85611dd0565b98505b50806128ea81613d29565b915050612841565b5085156129305760405162461bcd60e51b815260206004820152600c60248201526b0d2dcecc2d8d2c840e0c2e8d60a31b60448201526064016103c2565b61293983611f7a565b979650505050505050565b8051600090811a608081101561295d5750600092915050565b60b8811080612978575060c08110801590612978575060f881105b156129865750600192915050565b60c08110156129b35761299b600160b8613e84565b6129a89060ff1682613d44565b6118cc906001613e2a565b61299b600160f8613e84565b50919050565b80516000906129d657506000919050565b6020820151805160001a9060c08210156129f4575060009392505050565b5060019392505050565b8051600090612a0f57506000919050565b600080612a1f8460200151612944565b8460200151612a2e9190613e2a565b9050600084600001518560200151612a469190613e2a565b90505b80821015612a7857612a5a82612a81565b612a649083613e2a565b915082612a7081613d29565b935050612a49565b50909392505050565b80516000908190811a6080811015612a9c5760019150612b23565b60b8811015612ac257612ab0608082613d44565b612abb906001613e2a565b9150612b23565b60c0811015612aef5760b78103600185019450806020036101000a85510460018201810193505050612b23565b60f8811015612b0357612ab060c082613d44565b60f78103600185019450806020036101000a855104600182018101935050505b5092915050565b80612b3457505050565b60208110612b6c5782518252612b4b602084613e2a565b9250612b58602083613e2a565b9150612b65602082613d44565b9050612b34565b60006001612b7b836020613d44565b612b879061010061408e565b612b919190613d44565b935183518516941916939093179091525050565b6040516001600160a01b03831660248201526044810182905261255790849063a9059cbb60e01b906064016112bf565b6060612be4848460008561334f565b949350505050565b6060806038841015612c565760408051600180825281830190925290602082018180368337019050509050612c218385613e2a565b601f1a60f81b81600081518110612c3a57612c3a613cfd565b60200101906001600160f81b031916908160001a905350610ee7565b600060015b612c6581876140b0565b15612c8b5781612c7481613d29565b9250612c849050610100826140c4565b9050612c5b565b612c96826001613e2a565b6001600160401b03811115612cad57612cad613629565b6040519080825280601f01601f191660200182016040528015612cd7576020820181803683370190505b509250612ce48583613e2a565b612cef906037613e2a565b601f1a60f81b83600081518110612d0857612d08613cfd565b60200101906001600160f81b031916908160001a905350600190505b818111612d9957610100612d388284613d44565b612d449061010061408e565b612d4e90886140b0565b612d5891906140e3565b601f1a60f81b838281518110612d7057612d70613cfd565b60200101906001600160f81b031916908160001a90535080612d9181613d29565b915050612d24565b50509392505050565b6060806040519050835180825260208201818101602087015b81831015612dd3578051835260209283019201612dbb565b50855184518101855292509050808201602086015b81831015612e00578051835260209283019201612de8565b508651929092011591909101601f01601f191660405250905092915050565b6040805160208082528183019092526060916000919060208201818036833701905050905082602082015260005b6020811015612e9357818181518110612e6857612e68613cfd565b01602001516001600160f81b03191615612e8157612e93565b80612e8b81613d29565b915050612e4d565b6000612ea0826020613d44565b6001600160401b03811115612eb757612eb7613629565b6040519080825280601f01601f191660200182016040528015612ee1576020820181803683370190505b50905060005b8151811015611e42578383612efb81613d29565b945081518110612f0d57612f0d613cfd565b602001015160f81c60f81b828281518110612f2a57612f2a613cfd565b60200101906001600160f81b031916908160001a90535080612f4b81613d29565b915050612ee7565b6060815160001415612f75576040805160008082526020820190925290612b23565b6000805b8351811015612fbc57838181518110612f9457612f94613cfd565b60200260200101515182612fa89190613e2a565b915080612fb481613d29565b915050612f79565b6000826001600160401b03811115612fd657612fd6613629565b6040519080825280601f01601f191660200182016040528015613000576020820181803683370190505b50600092509050602081015b8551831015611e4257600086848151811061302957613029613cfd565b60200260200101519050600060208201905061304783828451613475565b87858151811061305957613059613cfd565b6020026020010151518361306d9190613e2a565b92505050828061307c90613d29565b93505061300c565b6000815b80156129bf576130996002826140e3565b600114156130af57816130ab81613d29565b9250505b60011c613088565b600081815b80821115613104576130d5600160ff851681901b613d44565b6130df9083613d44565b91506130ea826134ed565b92506130fd600160ff851681901b613d44565b90506130bc565b61310e8282613d44565b612be49084613e84565b6040805160808101825260009181018281526060820183905281526020810191909152613144826129c5565b61314d57600080fd5b600061315c8360200151612944565b836020015161316b9190613e2a565b6040805180820190915293845260208401525090919050565b60408051808201909152600080825260208201526131a182613528565b6131aa57600080fd5b602082015160006131ba82612a81565b90506131c68183613e2a565b60209485015260408051808201909152908152928301525090565b80516000906131ef57600080fd5b5080516020909101512090565b6040805180820190915260008082526020820152613219836129c5565b61326f5760405162461bcd60e51b815260206004820152602160248201527f524c504465636f646572206974657261746f72206973206e6f742061206c69736044820152601d60fa1b60648201526084016103c2565b8251602084015160009161328291613e2a565b905060006132938560200151612944565b85602001516132a29190613e2a565b90506000805b858110156132d9576132b983612a81565b91506132c58284613e2a565b9250806132d181613d29565b9150506132a8565b506132e382612a81565b9050826132f08284613e2a565b11156133325760405162461bcd60e51b8152602060048201526011602482015270524c50206974656d206f766572666c6f7760781b60448201526064016103c2565b604080518082019091529081526020810191909152949350505050565b6060824710156133b05760405162461bcd60e51b815260206004820152602660248201527f416464726573733a20696e73756666696369656e742062616c616e636520666f6044820152651c8818d85b1b60d21b60648201526084016103c2565b6001600160a01b0385163b6134075760405162461bcd60e51b815260206004820152601d60248201527f416464726573733a2063616c6c20746f206e6f6e2d636f6e747261637400000060448201526064016103c2565b600080866001600160a01b0316858760405161342391906140f7565b60006040518083038185875af1925050503d8060008114613460576040519150601f19603f3d011682016040523d82523d6000602084013e613465565b606091505b509150915061293982828661354c565b8282825b602081106134b15781518352613490602084613e2a565b925061349d602083613e2a565b91506134aa602082613d44565b9050613479565b600060016134c0836020613d44565b6134cc9061010061408e565b6134d69190613d44565b925184518416931916929092179092525050505050565b600060015b6134ff60ff821684613e2a565b600160ff83161b1161351d578061351581613ea7565b9150506134f2565b6118cc600182613e84565b8051805160208201516000929161353e91613e2a565b836020015110915050919050565b6060831561355b5750816118cc565b82511561356b5782518084602001fd5b8160405162461bcd60e51b81526004016103c29190614113565b6111a78061412783390190565b6000602082840312156135a457600080fd5b5035919050565b6001600160a01b0381168114610c4157600080fd5b6000602082840312156135d257600080fd5b8135610ee7816135ab565b80356113a5816135ab565b6000806000606084860312156135fd57600080fd5b8335613608816135ab565b92506020840135613618816135ab565b929592945050506040919091013590565b634e487b7160e01b600052604160045260246000fd5b60405161034081016001600160401b038111828210171561366257613662613629565b60405290565b604051601f8201601f191681016001600160401b038111828210171561369057613690613629565b604052919050565b60006001600160401b038211156136b1576136b1613629565b50601f01601f191660200190565b600082601f8301126136d057600080fd5b81356136e36136de82613698565b613668565b8181528460208386010111156136f857600080fd5b816020850160208301376000918101602001919091529392505050565b600082601f83011261372657600080fd5b813560206001600160401b0382111561374157613741613629565b8160051b613750828201613668565b928352848101820192828101908785111561376a57600080fd5b83870192505b8483101561293957823582529183019190830190613770565b600060a0828403121561379b57600080fd5b60405160a081016001600160401b0382821081831117156137be576137be613629565b8160405282935084358352602085013560208401526040850135604084015260608501359150808211156137f157600080fd5b6137fd86838701613715565b6060840152608085013591508082111561381657600080fd5b5061382385828601613715565b6080830152505092915050565b60006060828403121561384257600080fd5b604051606081016001600160401b03828210818311171561386557613865613629565b816040528293508435835260208501356020840152604085013591508082111561388e57600080fd5b5061389b858286016136bf565b6040830152505092915050565b6000806000606084860312156138bd57600080fd5b83356001600160401b03808211156138d457600080fd5b9085019061034082880312156138e957600080fd5b6138f161363f565b823581526020830135602082015261390b604084016135dd565b6040820152606083013560608201526080830135608082015260a083013560a082015260c083013560c082015260e083013560e0820152610100808401358381111561395657600080fd5b6139628a8287016136bf565b918301919091525061012083810135908201526101408084013590820152610160808401359082015261018080840135908201526101a080840135838111156139aa57600080fd5b6139b68a8287016136bf565b91830191909152506101c083810135908201526101e080840135908201526102008084013590820152610220808401359082015261024080840135838111156139fe57600080fd5b613a0a8a8287016136bf565b8284015250506102608084013583811115613a2457600080fd5b613a308a8287016136bf565b8284015250506102808084013583811115613a4a57600080fd5b613a568a8287016136bf565b8284015250506102a08084013583811115613a7057600080fd5b613a7c8a8287016136bf565b8284015250506102c08084013583811115613a9657600080fd5b613aa28a8287016136bf565b8284015250506102e08084013583811115613abc57600080fd5b613ac88a8287016136bf565b8284015250506103008084013583811115613ae257600080fd5b613aee8a8287016136bf565b8284015250506103208084013583811115613b0857600080fd5b613b148a8287016136bf565b828401525050809550506020860135915080821115613b3257600080fd5b613b3e87838801613789565b93506040860135915080821115613b5457600080fd5b50613b6186828701613830565b9150509250925092565b600060208284031215613b7d57600080fd5b815160ff81168114610ee757600080fd5b60005b83811015613ba9578181015183820152602001613b91565b838111156112f65750506000910152565b600082601f830112613bcb57600080fd5b8151613bd96136de82613698565b818152846020838601011115613bee57600080fd5b612be4826020830160208701613b8e565b600060208284031215613c1157600080fd5b81516001600160401b03811115613c2757600080fd5b612be484828501613bba565b60008151808452613c4b816020860160208601613b8e565b601f01601f19169290920160200192915050565b604081526000613c726040830185613c33565b8281036020840152613c848185613c33565b95945050505050565b600060208284031215613c9f57600080fd5b81518015158114610ee757600080fd5b6020808252818101527f4f776e61626c653a2063616c6c6572206973206e6f7420746865206f776e6572604082015260600190565b600060208284031215613cf657600080fd5b5051919050565b634e487b7160e01b600052603260045260246000fd5b634e487b7160e01b600052601160045260246000fd5b6000600019821415613d3d57613d3d613d13565b5060010190565b600082821015613d5657613d56613d13565b500390565b6020808252602e908201527f496e697469616c697a61626c653a20636f6e747261637420697320616c72656160408201526d191e481a5b9a5d1a585b1a5e995960921b606082015260800190565b6020808252602b908201527f496e697469616c697a61626c653a20636f6e7472616374206973206e6f74206960408201526a6e697469616c697a696e6760a81b606082015260800190565b815160009082906020808601845b83811015613e1e57815185529382019390820190600101613e02565b50929695505050505050565b60008219821115613e3d57613e3d613d13565b500190565b600060ff821660ff84168060ff03821115613e5f57613e5f613d13565b019392505050565b600060ff821680613e7a57613e7a613d13565b6000190192915050565b600060ff821660ff841680821015613e9e57613e9e613d13565b90039392505050565b600060ff821660ff811415613ebe57613ebe613d13565b60010192915050565b60008060408385031215613eda57600080fd5b825191506020830151613eec816135ab565b809150509250929050565b60008060408385031215613f0a57600080fd5b82516001600160401b0380821115613f2157600080fd5b613f2d86838701613bba565b93506020850151915080821115613f4357600080fd5b50613f5085828601613bba565b9150509250929050565b606081526000613f6d6060830186613c33565b8281036020840152613f7f8186613c33565b91505060ff83166040830152949350505050565b600081613fa257613fa2613d13565b506000190190565b600181815b80851115613fe5578160001904821115613fcb57613fcb613d13565b80851615613fd857918102915b93841c9390800290613faf565b509250929050565b600082613ffc57506001610eea565b8161400957506000610eea565b816001811461401f576002811461402957614045565b6001915050610eea565b60ff84111561403a5761403a613d13565b50506001821b610eea565b5060208310610133831016604e8410600b8410161715614068575081810a610eea565b6140728383613faa565b806000190482111561408657614086613d13565b029392505050565b6000610ee78383613fed565b634e487b7160e01b600052601260045260246000fd5b6000826140bf576140bf61409a565b500490565b60008160001904831182151516156140de576140de613d13565b500290565b6000826140f2576140f261409a565b500690565b60008251614109818460208701613b8e565b9190910192915050565b602081526000610ee76020830184613c3356fe608060405234801561001057600080fd5b50611187806100206000396000f3fe608060405234801561001057600080fd5b50600436106101165760003560e01c806370a08231116100a257806395d89b411161007157806395d89b411461023d578063a457c2d714610245578063a9059cbb14610258578063dd62ed3e1461026b578063f2fde38b1461027e57600080fd5b806370a08231146101de578063715018a61461020757806379cc67901461020f5780638da5cb5b1461022257600080fd5b806323b872dd116100e957806323b872dd14610183578063313ce5671461019657806339509351146101a557806340c10f19146101b857806342966c68146101cb57600080fd5b806306fdde031461011b578063095ea7b3146101395780631624f6c61461015c57806318160ddd14610171575b600080fd5b610123610291565b6040516101309190610da2565b60405180910390f35b61014c610147366004610e0e565b610323565b6040519015158152602001610130565b61016f61016a366004610edb565b61033b565b005b6035545b604051908152602001610130565b61014c610191366004610f59565b6103bd565b60405160128152602001610130565b61014c6101b3366004610e0e565b6103e1565b61016f6101c6366004610e0e565b610403565b61016f6101d9366004610f95565b610444565b6101756101ec366004610fae565b6001600160a01b031660009081526033602052604090205490565b61016f610451565b61016f61021d366004610e0e565b610487565b6097546040516001600160a01b039091168152602001610130565b61012361049c565b61014c610253366004610e0e565b6104ab565b61014c610266366004610e0e565b610526565b610175610279366004610fd0565b610534565b61016f61028c366004610fae565b61055f565b6060603680546102a090611003565b80601f01602080910402602001604051908101604052809291908181526020018280546102cc90611003565b80156103195780601f106102ee57610100808354040283529160200191610319565b820191906000526020600020905b8154815290600101906020018083116102fc57829003601f168201915b5050505050905090565b6000336103318185856105f7565b5060019392505050565b6000610347600161071c565b9050801561035f576000805461ff0019166101001790555b61036984846107a9565b6103716107da565b80156103b7576000805461ff0019169055604051600181527f7f26b83ff96e1f2b6a682f133852f6798a09c465da95921460cefb38474024989060200160405180910390a15b50505050565b6000336103cb858285610801565b6103d6858585610875565b506001949350505050565b6000336103318185856103f48383610534565b6103fe9190611054565b6105f7565b6097546001600160a01b031633146104365760405162461bcd60e51b815260040161042d9061106c565b60405180910390fd5b6104408282610a43565b5050565b61044e3382610b22565b50565b6097546001600160a01b0316331461047b5760405162461bcd60e51b815260040161042d9061106c565b6104856000610c6d565b565b610492823383610801565b6104408282610b22565b6060603780546102a090611003565b600033816104b98286610534565b9050838110156105195760405162461bcd60e51b815260206004820152602560248201527f45524332303a2064656372656173656420616c6c6f77616e63652062656c6f77604482015264207a65726f60d81b606482015260840161042d565b6103d682868684036105f7565b600033610331818585610875565b6001600160a01b03918216600090815260346020908152604080832093909416825291909152205490565b6097546001600160a01b031633146105895760405162461bcd60e51b815260040161042d9061106c565b6001600160a01b0381166105ee5760405162461bcd60e51b815260206004820152602660248201527f4f776e61626c653a206e6577206f776e657220697320746865207a65726f206160448201526564647265737360d01b606482015260840161042d565b61044e81610c6d565b6001600160a01b0383166106595760405162461bcd60e51b8152602060048201526024808201527f45524332303a20617070726f76652066726f6d20746865207a65726f206164646044820152637265737360e01b606482015260840161042d565b6001600160a01b0382166106ba5760405162461bcd60e51b815260206004820152602260248201527f45524332303a20617070726f766520746f20746865207a65726f206164647265604482015261737360f01b606482015260840161042d565b6001600160a01b0383811660008181526034602090815260408083209487168084529482529182902085905590518481527f8c5be1e5ebec7d5bd14f71427d1e84f3dd0314c0f7b2291e5b200ac8c7c3b92591015b60405180910390a3505050565b60008054610100900460ff1615610763578160ff16600114801561073f5750303b155b61075b5760405162461bcd60e51b815260040161042d906110a1565b506000919050565b60005460ff80841691161061078a5760405162461bcd60e51b815260040161042d906110a1565b506000805460ff191660ff92909216919091179055600190565b919050565b600054610100900460ff166107d05760405162461bcd60e51b815260040161042d906110ef565b6104408282610cbf565b600054610100900460ff166104855760405162461bcd60e51b815260040161042d906110ef565b600061080d8484610534565b905060001981146103b757818110156108685760405162461bcd60e51b815260206004820152601d60248201527f45524332303a20696e73756666696369656e7420616c6c6f77616e6365000000604482015260640161042d565b6103b784848484036105f7565b6001600160a01b0383166108d95760405162461bcd60e51b815260206004820152602560248201527f45524332303a207472616e736665722066726f6d20746865207a65726f206164604482015264647265737360d81b606482015260840161042d565b6001600160a01b03821661093b5760405162461bcd60e51b815260206004820152602360248201527f45524332303a207472616e7366657220746f20746865207a65726f206164647260448201526265737360e81b606482015260840161042d565b6001600160a01b038316600090815260336020526040902054818110156109b35760405162461bcd60e51b815260206004820152602660248201527f45524332303a207472616e7366657220616d6f756e7420657863656564732062604482015265616c616e636560d01b606482015260840161042d565b6001600160a01b038085166000908152603360205260408082208585039055918516815290812080548492906109ea908490611054565b92505081905550826001600160a01b0316846001600160a01b03167fddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef84604051610a3691815260200190565b60405180910390a36103b7565b6001600160a01b038216610a995760405162461bcd60e51b815260206004820152601f60248201527f45524332303a206d696e7420746f20746865207a65726f206164647265737300604482015260640161042d565b8060356000828254610aab9190611054565b90915550506001600160a01b03821660009081526033602052604081208054839290610ad8908490611054565b90915550506040518181526001600160a01b038316906000907fddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef9060200160405180910390a35050565b6001600160a01b038216610b825760405162461bcd60e51b815260206004820152602160248201527f45524332303a206275726e2066726f6d20746865207a65726f206164647265736044820152607360f81b606482015260840161042d565b6001600160a01b03821660009081526033602052604090205481811015610bf65760405162461bcd60e51b815260206004820152602260248201527f45524332303a206275726e20616d6f756e7420657863656564732062616c616e604482015261636560f01b606482015260840161042d565b6001600160a01b0383166000908152603360205260408120838303905560358054849290610c2590849061113a565b90915550506040518281526000906001600160a01b038516907fddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef9060200161070f565b505050565b609780546001600160a01b038381166001600160a01b0319831681179093556040519116919082907f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e090600090a35050565b600054610100900460ff16610ce65760405162461bcd60e51b815260040161042d906110ef565b8151610cf9906036906020850190610d09565b508051610c689060379060208401905b828054610d1590611003565b90600052602060002090601f016020900481019282610d375760008555610d7d565b82601f10610d5057805160ff1916838001178555610d7d565b82800160010185558215610d7d579182015b82811115610d7d578251825591602001919060010190610d62565b50610d89929150610d8d565b5090565b5b80821115610d895760008155600101610d8e565b600060208083528351808285015260005b81811015610dcf57858101830151858201604001528201610db3565b81811115610de1576000604083870101525b50601f01601f1916929092016040019392505050565b80356001600160a01b03811681146107a457600080fd5b60008060408385031215610e2157600080fd5b610e2a83610df7565b946020939093013593505050565b634e487b7160e01b600052604160045260246000fd5b600082601f830112610e5f57600080fd5b813567ffffffffffffffff80821115610e7a57610e7a610e38565b604051601f8301601f19908116603f01168101908282118183101715610ea257610ea2610e38565b81604052838152866020858801011115610ebb57600080fd5b836020870160208301376000602085830101528094505050505092915050565b600080600060608486031215610ef057600080fd5b833567ffffffffffffffff80821115610f0857600080fd5b610f1487838801610e4e565b94506020860135915080821115610f2a57600080fd5b50610f3786828701610e4e565b925050604084013560ff81168114610f4e57600080fd5b809150509250925092565b600080600060608486031215610f6e57600080fd5b610f7784610df7565b9250610f8560208501610df7565b9150604084013590509250925092565b600060208284031215610fa757600080fd5b5035919050565b600060208284031215610fc057600080fd5b610fc982610df7565b9392505050565b60008060408385031215610fe357600080fd5b610fec83610df7565b9150610ffa60208401610df7565b90509250929050565b600181811c9082168061101757607f821691505b6020821081141561103857634e487b7160e01b600052602260045260246000fd5b50919050565b634e487b7160e01b600052601160045260246000fd5b600082198211156110675761106761103e565b500190565b6020808252818101527f4f776e61626c653a2063616c6c6572206973206e6f7420746865206f776e6572604082015260600190565b6020808252602e908201527f496e697469616c697a61626c653a20636f6e747261637420697320616c72656160408201526d191e481a5b9a5d1a585b1a5e995960921b606082015260800190565b6020808252602b908201527f496e697469616c697a61626c653a20636f6e7472616374206973206e6f74206960408201526a6e697469616c697a696e6760a81b606082015260800190565b60008282101561114c5761114c61103e565b50039056fea2646970667358221220a61c5b3bf7a7628847ce1673f6c1eb638e31256a6c6b7b7baac5b4557adbc57f64736f6c63430008090033a2646970667358221220433c8ce4a5ac468f81c26818520ace4f6f0e7500d366dfd6ecb6cfe0ad81877564736f6c63430008090033",
  "devdoc": {
    "kind": "dev",
    "methods": {
      "owner()": {
        "details": "Returns the address of the current owner."
      },
      "renounceOwnership()": {
        "details": "Leaves the contract without owner. It will not be possible to call `onlyOwner` functions anymore. Can only be called by the current owner. NOTE: Renouncing ownership will leave the contract without an owner, thereby removing any functionality that is only available to the owner."
      },
      "transferOwnership(address)": {
        "details": "Transfers ownership of the contract to a new account (`newOwner`). Can only be called by the current owner."
      }
    },
    "version": 1
  },
  "userdoc": {
    "kind": "user",
    "methods": {},
    "version": 1
  },
  "storageLayout": {
    "storage": [
      {
        "astId": 9147,
        "contract": "contracts/TokenLockerOnEthereum.sol:TokenLockerOnEthereum",
        "label": "TxTokens",
        "offset": 0,
        "slot": "0",
        "type": "t_array(t_contract(IERC20Upgradeable)1478)dyn_storage"
      },
      {
        "astId": 9151,
        "contract": "contracts/TokenLockerOnEthereum.sol:TokenLockerOnEthereum",
        "label": "RxTokens",
        "offset": 0,
        "slot": "1",
        "type": "t_array(t_contract(BridgedToken)2788)dyn_storage"
      },
      {
        "astId": 9155,
        "contract": "contracts/TokenLockerOnEthereum.sol:TokenLockerOnEthereum",
        "label": "TxMapped",
        "offset": 0,
        "slot": "2",
        "type": "t_mapping(t_address,t_address)"
      },
      {
        "astId": 9160,
        "contract": "contracts/TokenLockerOnEthereum.sol:TokenLockerOnEthereum",
        "label": "TxMappedInv",
        "offset": 0,
        "slot": "3",
        "type": "t_mapping(t_address,t_contract(IERC20Upgradeable)1478)"
      },
      {
        "astId": 9165,
        "contract": "contracts/TokenLockerOnEthereum.sol:TokenLockerOnEthereum",
        "label": "RxMapped",
        "offset": 0,
        "slot": "4",
        "type": "t_mapping(t_address,t_contract(BridgedToken)2788)"
      },
      {
        "astId": 9169,
        "contract": "contracts/TokenLockerOnEthereum.sol:TokenLockerOnEthereum",
        "label": "RxMappedInv",
        "offset": 0,
        "slot": "5",
        "type": "t_mapping(t_address,t_address)"
      },
      {
        "astId": 8275,
        "contract": "contracts/TokenLockerOnEthereum.sol:TokenLockerOnEthereum",
        "label": "otherSideBridge",
        "offset": 0,
        "slot": "6",
        "type": "t_address"
      },
      {
        "astId": 543,
        "contract": "contracts/TokenLockerOnEthereum.sol:TokenLockerOnEthereum",
        "label": "_initialized",
        "offset": 20,
        "slot": "6",
        "type": "t_uint8"
      },
      {
        "astId": 546,
        "contract": "contracts/TokenLockerOnEthereum.sol:TokenLockerOnEthereum",
        "label": "_initializing",
        "offset": 21,
        "slot": "6",
        "type": "t_bool"
      },
      {
        "astId": 2075,
        "contract": "contracts/TokenLockerOnEthereum.sol:TokenLockerOnEthereum",
        "label": "__gap",
        "offset": 0,
        "slot": "7",
        "type": "t_array(t_uint256)50_storage"
      },
      {
        "astId": 423,
        "contract": "contracts/TokenLockerOnEthereum.sol:TokenLockerOnEthereum",
        "label": "_owner",
        "offset": 0,
        "slot": "57",
        "type": "t_address"
      },
      {
        "astId": 535,
        "contract": "contracts/TokenLockerOnEthereum.sol:TokenLockerOnEthereum",
        "label": "__gap",
        "offset": 0,
        "slot": "58",
        "type": "t_array(t_uint256)49_storage"
      },
      {
        "astId": 8794,
        "contract": "contracts/TokenLockerOnEthereum.sol:TokenLockerOnEthereum",
        "label": "lightclient",
        "offset": 0,
        "slot": "107",
        "type": "t_contract(HarmonyLightClient)5823"
      },
      {
        "astId": 8798,
        "contract": "contracts/TokenLockerOnEthereum.sol:TokenLockerOnEthereum",
        "label": "spentReceipt",
        "offset": 0,
        "slot": "108",
        "type": "t_mapping(t_bytes32,t_bool)"
      }
    ],
    "types": {
      "t_address": {
        "encoding": "inplace",
        "label": "address",
        "numberOfBytes": "20"
      },
      "t_array(t_contract(BridgedToken)2788)dyn_storage": {
        "base": "t_contract(BridgedToken)2788",
        "encoding": "dynamic_array",
        "label": "contract BridgedToken[]",
        "numberOfBytes": "32"
      },
      "t_array(t_contract(IERC20Upgradeable)1478)dyn_storage": {
        "base": "t_contract(IERC20Upgradeable)1478",
        "encoding": "dynamic_array",
        "label": "contract IERC20Upgradeable[]",
        "numberOfBytes": "32"
      },
      "t_array(t_uint256)49_storage": {
        "base": "t_uint256",
        "encoding": "inplace",
        "label": "uint256[49]",
        "numberOfBytes": "1568"
      },
      "t_array(t_uint256)50_storage": {
        "base": "t_uint256",
        "encoding": "inplace",
        "label": "uint256[50]",
        "numberOfBytes": "1600"
      },
      "t_bool": {
        "encoding": "inplace",
        "label": "bool",
        "numberOfBytes": "1"
      },
      "t_bytes32": {
        "encoding": "inplace",
        "label": "bytes32",
        "numberOfBytes": "32"
      },
      "t_contract(BridgedToken)2788": {
        "encoding": "inplace",
        "label": "contract BridgedToken",
        "numberOfBytes": "20"
      },
      "t_contract(HarmonyLightClient)5823": {
        "encoding": "inplace",
        "label": "contract HarmonyLightClient",
        "numberOfBytes": "20"
      },
      "t_contract(IERC20Upgradeable)1478": {
        "encoding": "inplace",
        "label": "contract IERC20Upgradeable",
        "numberOfBytes": "20"
      },
      "t_mapping(t_address,t_address)": {
        "encoding": "mapping",
        "key": "t_address",
        "label": "mapping(address => address)",
        "numberOfBytes": "32",
        "value": "t_address"
      },
      "t_mapping(t_address,t_contract(BridgedToken)2788)": {
        "encoding": "mapping",
        "key": "t_address",
        "label": "mapping(address => contract BridgedToken)",
        "numberOfBytes": "32",
        "value": "t_contract(BridgedToken)2788"
      },
      "t_mapping(t_address,t_contract(IERC20Upgradeable)1478)": {
        "encoding": "mapping",
        "key": "t_address",
        "label": "mapping(address => contract IERC20Upgradeable)",
        "numberOfBytes": "32",
        "value": "t_contract(IERC20Upgradeable)1478"
      },
      "t_mapping(t_bytes32,t_bool)": {
        "encoding": "mapping",
        "key": "t_bytes32",
        "label": "mapping(bytes32 => bool)",
        "numberOfBytes": "32",
        "value": "t_bool"
      },
      "t_uint256": {
        "encoding": "inplace",
        "label": "uint256",
        "numberOfBytes": "32"
      },
      "t_uint8": {
        "encoding": "inplace",
        "label": "uint8",
        "numberOfBytes": "1"
      }
    }
  }
}