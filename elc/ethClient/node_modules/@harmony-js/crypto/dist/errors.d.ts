/**
 * ## About this package
 *
 * `@harmony-js/crypot` provides a series of functions to deal with keys
 *
 * ## How to use this package
 *
 * ### Create a Harmony Instance
 * ```javascript
 * const { Harmony } = require('@harmony-js/core');
 * const { ChainID, ChainType } = require('@harmony-js/utils');
 *
 * const hmy = new Harmony(
 *   'http://localhost:9500',
 *   {
 *     chainType: ChainType.Harmony,
 *     chainId: ChainID.HmyLocal,
 *   },
 * );
 * ```
 *
 * ### Some examples
 *
 * ```javascript
 * // randomBytes
 * const bytes = hmy.crypto.randomBytes(20);
 * console.log(bytes)
 *
 * // encryptPhrase
 * const myPhrase = hmy.wallet.newMnemonic();
 * const pwd = '1234';
 * hmy.crypto.encryptPhrase(myPhrase, pwd).then((value) => {
 *   console.log(value);
 * })
 *
 * // decryptThePhrase
 * hmy.crypto.encryptPhrase(myPhrase, pwd).then((keystore) => {
 *   hmy.crypto.decryptPhrase(JSON.parse(keystore), pwd).then((value) => {
 *     console.log(value);
 *   })
 * })
 *
 * // generatePrivateKey
 * const privateKey = hmy.crypto.generatePrivateKey();
 * console.log(privateKey)
 *
 * // getPubkeyFromPrivateKey
 * const publicKey = hmy.crypto.getPubkeyFromPrivateKey(privateKey);
 * console.log(publicKey);
 *
 * // getAddressFromPrivateKey
 * const address = hmy.crypto.getAddressFromPrivateKey(privateKey);
 * console.log(address);
 *
 * // getAddressFromPublicKey
 * const address = hmy.crypto.getAddressFromPublicKey(publicKey);
 * console.log(address);
 *
 * // toChecksumAddress
 * const checksumAddr = hmy.crypto.toChecksumAddress(address);
 * console.log(checksumAddr);
 * ```
 *
 * @packageDocumentation
 * @module harmony-crypto
 */
/** @hidden */
export declare const UNKNOWN_ERROR = "UNKNOWN_ERROR";
/** @hidden */
export declare const NOT_IMPLEMENTED = "NOT_IMPLEMENTED";
/** @hidden */
export declare const MISSING_NEW = "MISSING_NEW";
/** @hidden */
export declare const CALL_EXCEPTION = "CALL_EXCEPTION";
/** @hidden */
export declare const INVALID_ARGUMENT = "INVALID_ARGUMENT";
/** @hidden */
export declare const MISSING_ARGUMENT = "MISSING_ARGUMENT";
/** @hidden */
export declare const UNEXPECTED_ARGUMENT = "UNEXPECTED_ARGUMENT";
/** @hidden */
export declare const NUMERIC_FAULT = "NUMERIC_FAULT";
/** @hidden */
export declare const INSUFFICIENT_FUNDS = "INSUFFICIENT_FUNDS";
/** @hidden */
export declare const NONCE_EXPIRED = "NONCE_EXPIRED";
/** @hidden */
export declare const REPLACEMENT_UNDERPRICED = "REPLACEMENT_UNDERPRICED";
/** @hidden */
export declare const UNSUPPORTED_OPERATION = "UNSUPPORTED_OPERATION";
/** @hidden */
export declare function throwError(message: string, code: string | null | undefined, params: any): never;
/** @hidden */
export declare function checkNew(self: any, kind: any): void;
/** @hidden */
export declare function checkArgumentCount(count: number, expectedCount: number, suffix?: string): void;
/** @hidden */
export declare function setCensorship(censorship: boolean, permanent?: boolean): void;
/** @hidden */
export declare function checkNormalize(): void;
/** @hidden */
export declare function setLogLevel(logLevel: string): void;
/** @hidden */
export declare function warn(...args: [any?, ...any[]]): void;
/** @hidden */
export declare function info(...args: [any?, ...any[]]): void;
//# sourceMappingURL=errors.d.ts.map