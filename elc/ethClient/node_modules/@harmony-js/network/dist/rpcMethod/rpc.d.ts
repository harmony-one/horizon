/**
 * ## About this package
 *
 * `@harmony-js/network` provides functions to handle messenger, providers and subscriptions...
 *
 * ## How to use this package
 *
 * ### 1. Create a Message
 * ```javascript
 * const { HttpProvider, Messenger } = require('@harmony-js/network');
 * const { ChainType, ChainID } = require('@harmony-js/utils');
 *
 * // create a custom messenger
 * const customMessenger = new Messenger(
 *   new HttpProvider('http://localhost:9500'),
 *   ChainType.Harmony, // if you are connected to Harmony's blockchain
 *   ChainID.HmyLocal, // check if the chainId is correct
 * )
 * ```
 *
 * @packageDocumentation
 * @module harmony-network
 */
/**@ignore */
export declare const enum RPCMethod {
    GetBlockByHash = "hmy_getBlockByHash",
    GetBlockByNumber = "hmy_getBlockByNumber",
    GetBlockTransactionCountByHash = "hmy_getBlockTransactionCountByHash",
    GetBlockTransactionCountByNumber = "hmy_getBlockTransactionCountByNumber",
    GetCode = "hmy_getCode",
    GetTransactionByBlockHashAndIndex = "hmy_getTransactionByBlockHashAndIndex",
    GetTransactionByBlockNumberAndIndex = "hmy_getTransactionByBlockNumberAndIndex",
    GetTransactionByHash = "hmy_getTransactionByHash",
    GetTransactionReceipt = "hmy_getTransactionReceipt",
    GetCXReceiptByHash = "hmy_getCXReceiptByHash",
    Syncing = "hmy_syncing",
    PeerCount = "net_peerCount",
    GetBalance = "hmy_getBalance",
    GetStorageAt = "hmy_getStorageAt",
    GetTransactionCount = "hmy_getTransactionCount",
    SendTransaction = "hmy_sendTransaction",
    SendRawTransaction = "hmy_sendRawTransaction",
    Subscribe = "hmy_subscribe",
    GetPastLogs = "hmy_getLogs",
    GetWork = "hmy_getWork",
    GetProof = "hmy_getProof",
    GetFilterChanges = "hmy_getFilterChanges",
    NewPendingTransactionFilter = "hmy_newPendingTransactionFilter",
    NewBlockFilter = "hmy_newBlockFilter",
    NewFilter = "hmy_newFilter",
    Call = "hmy_call",
    EstimateGas = "hmy_estimateGas",
    GasPrice = "hmy_gasPrice",
    BlockNumber = "hmy_blockNumber",
    UnSubscribe = "hmy_unsubscribe",
    NetVersion = "net_version",
    ProtocolVersion = "hmy_protocolVersion",
    GetShardingStructure = "hmy_getShardingStructure",
    SendRawStakingTransaction = "hmy_sendRawStakingTransaction"
}
/**@ignore */
export declare const enum RPCErrorCode {
    RPC_INVALID_REQUEST = -32600,
    RPC_METHOD_NOT_FOUND = -32601,
    RPC_INVALID_PARAMS = -32602,
    RPC_INTERNAL_ERROR = -32603,
    RPC_PARSE_ERROR = -32700,
    RPC_MISC_ERROR = -1,
    RPC_TYPE_ERROR = -3,
    RPC_INVALID_ADDRESS_OR_KEY = -5,
    RPC_INVALID_PARAMETER = -8,
    RPC_DATABASE_ERROR = -20,
    RPC_DESERIALIZATION_ERROR = -22,
    RPC_VERIFY_ERROR = -25,
    RPC_VERIFY_REJECTED = -26,
    RPC_IN_WARMUP = -28,
    RPC_METHOD_DEPRECATED = -32
}
//# sourceMappingURL=rpc.d.ts.map