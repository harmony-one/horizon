/**
 * Test Banner
 */

(function (global, factory) {
    typeof exports === 'object' && typeof module !== 'undefined' ? factory(exports, require('@harmony-js/crypto'), require('@harmony-js/transaction'), require('@harmony-js/utils'), require('text-encoding')) :
    typeof define === 'function' && define.amd ? define(['exports', '@harmony-js/crypto', '@harmony-js/transaction', '@harmony-js/utils', 'text-encoding'], factory) :
    (factory((global.harmonyStaking = {}),global['@harmony-js/crypto'],global['@harmony-js/transaction'],global['@harmony-js/utils'],global['text-encoding']));
}(this, (function (exports,crypto,transaction,utils,textEncoding) { 'use strict';

    /*! *****************************************************************************
    Copyright (c) Microsoft Corporation.

    Permission to use, copy, modify, and/or distribute this software for any
    purpose with or without fee is hereby granted.

    THE SOFTWARE IS PROVIDED "AS IS" AND THE AUTHOR DISCLAIMS ALL WARRANTIES WITH
    REGARD TO THIS SOFTWARE INCLUDING ALL IMPLIED WARRANTIES OF MERCHANTABILITY
    AND FITNESS. IN NO EVENT SHALL THE AUTHOR BE LIABLE FOR ANY SPECIAL, DIRECT,
    INDIRECT, OR CONSEQUENTIAL DAMAGES OR ANY DAMAGES WHATSOEVER RESULTING FROM
    LOSS OF USE, DATA OR PROFITS, WHETHER IN AN ACTION OF CONTRACT, NEGLIGENCE OR
    OTHER TORTIOUS ACTION, ARISING OUT OF OR IN CONNECTION WITH THE USE OR
    PERFORMANCE OF THIS SOFTWARE.
    ***************************************************************************** */
    /* global Reflect, Promise */

    var extendStatics = function(d, b) {
        extendStatics = Object.setPrototypeOf ||
            ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||
            function (d, b) { for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p]; };
        return extendStatics(d, b);
    };

    function __extends(d, b) {
        extendStatics(d, b);
        function __() { this.constructor = d; }
        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
    }

    function __awaiter(thisArg, _arguments, P, generator) {
        function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }
        return new (P || (P = Promise))(function (resolve, reject) {
            function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
            function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
            function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }
            step((generator = generator.apply(thisArg, _arguments || [])).next());
        });
    }

    function __generator(thisArg, body) {
        var _ = { label: 0, sent: function() { if (t[0] & 1) throw t[1]; return t[1]; }, trys: [], ops: [] }, f, y, t, g;
        return g = { next: verb(0), "throw": verb(1), "return": verb(2) }, typeof Symbol === "function" && (g[Symbol.iterator] = function() { return this; }), g;
        function verb(n) { return function (v) { return step([n, v]); }; }
        function step(op) {
            if (f) throw new TypeError("Generator is already executing.");
            while (_) try {
                if (f = 1, y && (t = op[0] & 2 ? y["return"] : op[0] ? y["throw"] || ((t = y["return"]) && t.call(y), 0) : y.next) && !(t = t.call(y, op[1])).done) return t;
                if (y = 0, t) op = [op[0] & 2, t.value];
                switch (op[0]) {
                    case 0: case 1: t = op; break;
                    case 4: _.label++; return { value: op[1], done: false };
                    case 5: _.label++; y = op[1]; op = [0]; continue;
                    case 7: op = _.ops.pop(); _.trys.pop(); continue;
                    default:
                        if (!(t = _.trys, t = t.length > 0 && t[t.length - 1]) && (op[0] === 6 || op[0] === 2)) { _ = 0; continue; }
                        if (op[0] === 3 && (!t || (op[1] > t[0] && op[1] < t[3]))) { _.label = op[1]; break; }
                        if (op[0] === 6 && _.label < t[1]) { _.label = t[1]; t = op; break; }
                        if (t && _.label < t[2]) { _.label = t[2]; _.ops.push(op); break; }
                        if (t[2]) _.ops.pop();
                        _.trys.pop(); continue;
                }
                op = body.call(thisArg, _);
            } catch (e) { op = [6, e]; y = 0; } finally { f = t = 0; }
            if (op[0] & 5) throw op[1]; return { value: op[0] ? op[1] : void 0, done: true };
        }
    }

    function __read(o, n) {
        var m = typeof Symbol === "function" && o[Symbol.iterator];
        if (!m) return o;
        var i = m.call(o), r, ar = [], e;
        try {
            while ((n === void 0 || n-- > 0) && !(r = i.next()).done) ar.push(r.value);
        }
        catch (error) { e = { error: error }; }
        finally {
            try {
                if (r && !r.done && (m = i["return"])) m.call(i);
            }
            finally { if (e) throw e.error; }
        }
        return ar;
    }

    /**
     * @packageDocumentation
     * @module harmony-staking
     */
    /** @hidden */
    var StakingSettings = /** @class */ (function () {
        function StakingSettings() {
        }
        StakingSettings.PRECISION = 18;
        StakingSettings.MAX_DECIMAL = 1000000000000000000;
        return StakingSettings;
    }());
    (function (Directive) {
        Directive[Directive["DirectiveCreateValidator"] = 0] = "DirectiveCreateValidator";
        Directive[Directive["DirectiveEditValidator"] = 1] = "DirectiveEditValidator";
        Directive[Directive["DirectiveDelegate"] = 2] = "DirectiveDelegate";
        Directive[Directive["DirectiveUndelegate"] = 3] = "DirectiveUndelegate";
        Directive[Directive["DirectiveCollectRewards"] = 4] = "DirectiveCollectRewards";
    })(exports.Directive || (exports.Directive = {}));
    var StakingTransaction = /** @class */ (function (_super) {
        __extends(StakingTransaction, _super);
        function StakingTransaction(directive, stakeMsg, nonce, gasPrice, gasLimit, chainID, messenger, txStatus) {
            if (messenger === void 0) { messenger = transaction.defaultMessenger; }
            if (txStatus === void 0) { txStatus = "INITIALIZED" /* INTIALIZED */; }
            var _this = _super.call(this, messenger, txStatus) || this;
            _this.directive = directive;
            _this.stakeMsg = stakeMsg;
            _this.nonce = nonce;
            _this.gasLimit = gasLimit;
            _this.gasPrice = gasPrice;
            _this.rawTransaction = '0x';
            _this.unsignedRawTransaction = '0x';
            _this.signature = {
                r: '',
                s: '',
                recoveryParam: 0,
                v: 0,
            };
            _this.chainId = chainID;
            _this.from = '0x';
            return _this;
        }
        StakingTransaction.prototype.encode = function () {
            var raw = [];
            // TODO: temporary hack for converting 0x00 to 0x
            if (!this.directive) {
                raw.push('0x');
            }
            else {
                raw.push(crypto.hexlify(this.directive));
            }
            raw.push(this.stakeMsg.encode());
            if (!this.nonce) {
                raw.push('0x');
            }
            else {
                raw.push(crypto.hexlify(this.nonce));
            }
            raw.push(crypto.hexlify(this.gasPrice));
            raw.push(crypto.hexlify(this.gasLimit));
            if (this.chainId != null && this.chainId !== 0) {
                raw.push(crypto.hexlify(this.chainId));
                raw.push('0x');
                raw.push('0x');
            }
            return [crypto.encode(raw), raw];
        };
        StakingTransaction.prototype.rlpSign = function (prv) {
            var _a = __read(this.encode(), 2), unsignedRawTransaction = _a[0], raw = _a[1];
            this.setUnsigned(unsignedRawTransaction);
            var signature = crypto.sign(crypto.keccak256(unsignedRawTransaction), prv);
            var signed = this.getRLPSigned(raw, signature);
            return [signature, signed];
        };
        StakingTransaction.prototype.getRLPSigned = function (raw, signature) {
            var sig = crypto.splitSignature(signature);
            var v = 27 + (sig.recoveryParam || 0);
            raw.pop();
            raw.pop();
            raw.pop();
            v += this.chainId * 2 + 8;
            raw.push(crypto.hexlify(v));
            raw.push(crypto.stripZeros(crypto.arrayify(sig.r) || []));
            raw.push(crypto.stripZeros(crypto.arrayify(sig.s) || []));
            return crypto.encode(raw);
        };
        StakingTransaction.prototype.sendTransaction = function () {
            return __awaiter(this, void 0, void 0, function () {
                var res;
                return __generator(this, function (_a) {
                    switch (_a.label) {
                        case 0:
                            if (this.rawTransaction === 'tx' || this.rawTransaction === undefined) {
                                throw new Error('Transaction not signed');
                            }
                            if (!this.messenger) {
                                throw new Error('Messenger not found');
                            }
                            return [4 /*yield*/, this.messenger.send("hmy_sendRawStakingTransaction" /* SendRawStakingTransaction */, this.rawTransaction, this.messenger.chainType, this.messenger.currentShard)];
                        case 1:
                            res = _a.sent();
                            if (res.isResult()) {
                                this.id = res.result;
                                this.emitTransactionHash(this.id);
                                this.setTxStatus("PENDING" /* PENDING */);
                                return [2 /*return*/, [this, res.result]];
                            }
                            else if (res.isError()) {
                                this.emitConfirm("transaction failed:" + res.error.message);
                                this.setTxStatus("REJECTED" /* REJECTED */);
                                return [2 /*return*/, [this, "transaction failed:" + res.error.message]];
                            }
                            else {
                                this.emitError('transaction failed');
                                throw new Error('transaction failed');
                            }
                            return [2 /*return*/];
                    }
                });
            });
        };
        StakingTransaction.prototype.setUnsigned = function (unSigned) {
            this.unsignedRawTransaction = unSigned;
        };
        StakingTransaction.prototype.setRawTransaction = function (rawTransaction) {
            this.rawTransaction = rawTransaction;
        };
        StakingTransaction.prototype.setSignature = function (signature) {
            this.signature = {
                r: signature.r,
                s: signature.s,
                v: signature.v,
                recoveryParam: signature.recoveryParam,
            };
        };
        StakingTransaction.prototype.setNonce = function (nonce) {
            this.nonce = nonce;
        };
        StakingTransaction.prototype.setFromAddress = function (address) {
            this.from = address;
        };
        StakingTransaction.prototype.getUnsignedRawTransaction = function () {
            return this.unsignedRawTransaction;
        };
        StakingTransaction.prototype.getRawTransaction = function () {
            return this.rawTransaction;
        };
        StakingTransaction.prototype.getSignature = function () {
            return this.signature;
        };
        StakingTransaction.prototype.getFromAddress = function () {
            return this.from;
        };
        StakingTransaction.prototype.confirm = function (txHash, maxAttempts, interval, shardID, toShardID) {
            if (maxAttempts === void 0) { maxAttempts = 20; }
            if (interval === void 0) { interval = 1000; }
            if (shardID === void 0) { shardID = this.messenger.currentShard; }
            if (toShardID === void 0) { toShardID = 0; }
            return __awaiter(this, void 0, void 0, function () {
                var txConfirmed, cxConfirmed;
                return __generator(this, function (_a) {
                    switch (_a.label) {
                        case 0: return [4 /*yield*/, this.txConfirm(txHash, maxAttempts, interval, shardID)];
                        case 1:
                            txConfirmed = _a.sent();
                            if (shardID === toShardID) {
                                return [2 /*return*/, txConfirmed];
                            }
                            if (!txConfirmed.isConfirmed()) return [3 /*break*/, 3];
                            return [4 /*yield*/, this.cxConfirm(txHash, maxAttempts, interval, toShardID)];
                        case 2:
                            cxConfirmed = _a.sent();
                            return [2 /*return*/, cxConfirmed];
                        case 3: return [2 /*return*/, txConfirmed];
                    }
                });
            });
        };
        return StakingTransaction;
    }(transaction.TransactionBase));
    /** @hidden */
    var Description = /** @class */ (function () {
        function Description(name, identity, website, securityContact, details) {
            this.name = name;
            this.identity = identity;
            this.website = website;
            this.securityContact = securityContact;
            this.details = details;
        }
        Description.prototype.encode = function () {
            var raw = [];
            var enc = new textEncoding.TextEncoder();
            raw.push(enc.encode(this.name));
            raw.push(enc.encode(this.identity));
            raw.push(enc.encode(this.website));
            raw.push(enc.encode(this.securityContact));
            raw.push(enc.encode(this.details));
            return raw;
        };
        return Description;
    }());
    /** @hidden */
    var Decimal = /** @class */ (function () {
        function Decimal(value) {
            if (value.length === 0) {
                throw new Error("decimal string is empty");
            }
            var value1 = value;
            if (value[0] === '-') {
                throw new Error("decimal fraction should be be between [0, 1]");
            }
            if (value[0] === '+') {
                value1 = value.substr(1);
            }
            if (value1.length === 0) {
                throw new Error("decimal string is empty");
            }
            var spaced = value1.split(' ');
            if (spaced.length > 1) {
                throw new Error("bad decimal string");
            }
            var splitted = value1.split('.');
            var len = 0;
            var combinedStr = splitted[0];
            if (splitted.length === 2) {
                len = splitted[1].length;
                if (len === 0 || combinedStr.length === 0) {
                    throw new Error("bad decimal length");
                }
                if (splitted[1][0] === '-') {
                    throw new Error("bad decimal string");
                }
                combinedStr += splitted[1];
            }
            else if (splitted.length > 2) {
                throw new Error("too many periods to be a decimal string");
            }
            if (len > StakingSettings.PRECISION) {
                throw new Error("too much precision: precision should be less than " + StakingSettings.PRECISION);
            }
            var zerosToAdd = StakingSettings.PRECISION - len;
            combinedStr += '0'.repeat(zerosToAdd);
            combinedStr = combinedStr.replace(/^0+/, '');
            var val = new utils.Unit(combinedStr).asWei().toWei();
            if (val.gt(new utils.Unit(StakingSettings.MAX_DECIMAL.toString()).asWei().toWei())) {
                throw new Error("too large decimal fraction");
            }
            this.value = val;
        }
        Decimal.prototype.encode = function () {
            var raw = [];
            raw.push(utils.numberToHex(this.value));
            return raw;
        };
        return Decimal;
    }());
    /** @hidden */
    var CommissionRate = /** @class */ (function () {
        function CommissionRate(rate, maxRate, maxChangeRate) {
            this.rate = rate;
            this.maxRate = maxRate;
            this.maxChangeRate = maxChangeRate;
        }
        CommissionRate.prototype.encode = function () {
            var raw = [];
            raw.push(this.rate.encode());
            raw.push(this.maxRate.encode());
            raw.push(this.maxChangeRate.encode());
            return raw;
        };
        return CommissionRate;
    }());
    var CreateValidator = /** @class */ (function () {
        function CreateValidator(validatorAddress, description, commissionRates, minSelfDelegation, maxTotalDelegation, slotPubKeys, amount) {
            this.validatorAddress = validatorAddress;
            this.description = description;
            this.commissionRates = commissionRates;
            this.minSelfDelegation = minSelfDelegation;
            this.maxTotalDelegation = maxTotalDelegation;
            this.slotPubKeys = slotPubKeys;
            this.amount = amount;
        }
        CreateValidator.prototype.encode = function () {
            var raw = [];
            raw.push(crypto.hexlify(transaction.TransactionBase.normalizeAddress(this.validatorAddress)));
            raw.push(this.description.encode());
            raw.push(this.commissionRates.encode());
            raw.push(crypto.hexlify(this.minSelfDelegation));
            raw.push(crypto.hexlify(this.maxTotalDelegation));
            raw.push(this.encodeArr());
            raw.push(crypto.hexlify(this.amount));
            return raw;
        };
        CreateValidator.prototype.encodeArr = function () {
            var raw = [];
            this.slotPubKeys.forEach(function (pubKey) {
                raw.push(pubKey);
            });
            return raw;
        };
        return CreateValidator;
    }());
    var EditValidator = /** @class */ (function () {
        function EditValidator(validatorAddress, description, commissionRate, minSelfDelegation, maxTotalDelegation, slotKeyToRemove, slotKeyToAdd) {
            this.validatorAddress = validatorAddress;
            this.description = description;
            this.commissionRate = commissionRate;
            this.minSelfDelegation = minSelfDelegation;
            this.maxTotalDelegation = maxTotalDelegation;
            this.slotKeyToRemove = slotKeyToRemove;
            this.slotKeyToAdd = slotKeyToAdd;
        }
        EditValidator.prototype.encode = function () {
            var raw = [];
            raw.push(crypto.hexlify(transaction.TransactionBase.normalizeAddress(this.validatorAddress)));
            raw.push(this.description.encode());
            raw.push(this.commissionRate.encode());
            raw.push(crypto.hexlify(this.minSelfDelegation));
            raw.push(crypto.hexlify(this.maxTotalDelegation));
            raw.push(this.slotKeyToRemove);
            raw.push(this.slotKeyToAdd);
            return raw;
        };
        return EditValidator;
    }());
    var Delegate = /** @class */ (function () {
        function Delegate(delegatorAddress, validatorAddress, amount) {
            this.delegatorAddress = delegatorAddress;
            this.validatorAddress = validatorAddress;
            this.amount = amount;
        }
        Delegate.prototype.encode = function () {
            var raw = [];
            raw.push(crypto.hexlify(transaction.TransactionBase.normalizeAddress(this.delegatorAddress)));
            raw.push(crypto.hexlify(transaction.TransactionBase.normalizeAddress(this.validatorAddress)));
            raw.push(crypto.hexlify(this.amount));
            return raw;
        };
        return Delegate;
    }());
    var Undelegate = /** @class */ (function () {
        function Undelegate(delegatorAddress, validatorAddress, amount) {
            this.delegatorAddress = delegatorAddress;
            this.validatorAddress = validatorAddress;
            this.amount = amount;
        }
        Undelegate.prototype.encode = function () {
            var raw = [];
            raw.push(crypto.hexlify(transaction.TransactionBase.normalizeAddress(this.delegatorAddress)));
            raw.push(crypto.hexlify(transaction.TransactionBase.normalizeAddress(this.validatorAddress)));
            raw.push(crypto.hexlify(this.amount));
            return raw;
        };
        return Undelegate;
    }());
    var CollectRewards = /** @class */ (function () {
        function CollectRewards(delegatorAddress) {
            this.delegatorAddress = delegatorAddress;
        }
        CollectRewards.prototype.encode = function () {
            var raw = [];
            raw.push(crypto.hexlify(transaction.TransactionBase.normalizeAddress(this.delegatorAddress)));
            return raw;
        };
        return CollectRewards;
    }());

    /**
     * @packageDocumentation
     * @module harmony-staking
     */
    var StakingFactory = /** @class */ (function () {
        function StakingFactory(messenger) {
            this.messenger = messenger;
            this.nonce = 0;
            this.gasPrice = new utils.Unit('100').asGwei().toHex();
            this.gasLimit = new utils.Unit('210000').asWei().toHex();
            this.chainId = 1;
            this.signature = {
                v: 0,
                r: '',
                s: '',
            };
        }
        StakingFactory.prototype.createValidator = function (_a) {
            var validatorAddress = _a.validatorAddress, description = _a.description, commissionRate = _a.commissionRate, minSelfDelegation = _a.minSelfDelegation, maxTotalDelegation = _a.maxTotalDelegation, slotPubKeys = _a.slotPubKeys, amount = _a.amount;
            this.stakeMsg = new CreateValidator(validatorAddress, new Description(description.name, description.identity, description.website, description.securityContact, description.details), new CommissionRate(new Decimal(commissionRate.rate), new Decimal(commissionRate.maxRate), new Decimal(commissionRate.maxChangeRate)), minSelfDelegation, maxTotalDelegation, slotPubKeys, amount);
            this.directive = 0 /* DirectiveCreateValidator */;
            return this;
        };
        StakingFactory.prototype.editValidator = function (_a) {
            var validatorAddress = _a.validatorAddress, description = _a.description, commissionRate = _a.commissionRate, minSelfDelegation = _a.minSelfDelegation, maxTotalDelegation = _a.maxTotalDelegation, slotKeyToRemove = _a.slotKeyToRemove, slotKeyToAdd = _a.slotKeyToAdd;
            this.stakeMsg = new EditValidator(validatorAddress, new Description(description.name, description.identity, description.website, description.securityContact, description.details), new Decimal(commissionRate), minSelfDelegation, maxTotalDelegation, slotKeyToRemove, slotKeyToAdd);
            this.directive = 1 /* DirectiveEditValidator */;
            return this;
        };
        StakingFactory.prototype.delegate = function (_a) {
            var delegatorAddress = _a.delegatorAddress, validatorAddress = _a.validatorAddress, amount = _a.amount;
            this.stakeMsg = new Delegate(delegatorAddress, validatorAddress, amount);
            this.directive = 2 /* DirectiveDelegate */;
            return this;
        };
        StakingFactory.prototype.undelegate = function (_a) {
            var delegatorAddress = _a.delegatorAddress, validatorAddress = _a.validatorAddress, amount = _a.amount;
            this.stakeMsg = new Undelegate(delegatorAddress, validatorAddress, amount);
            this.directive = 3 /* DirectiveUndelegate */;
            return this;
        };
        StakingFactory.prototype.collectRewards = function (_a) {
            var delegatorAddress = _a.delegatorAddress;
            this.stakeMsg = new CollectRewards(delegatorAddress);
            this.directive = 4 /* DirectiveCollectRewards */;
            return this;
        };
        StakingFactory.prototype.setTxParams = function (_a) {
            var nonce = _a.nonce, gasPrice = _a.gasPrice, gasLimit = _a.gasLimit, chainId = _a.chainId, signature = _a.signature;
            this.nonce = nonce;
            this.gasPrice = gasPrice;
            this.gasLimit = gasLimit;
            this.chainId = chainId;
            this.signature = signature;
            return this;
        };
        StakingFactory.prototype.build = function () {
            if (this.directive === undefined) {
                throw new Error('cannot build stakingTransaction without Directive');
            }
            if (this.stakeMsg === undefined) {
                throw new Error('cannot build stakingTransaction without stakeMsg');
            }
            return new StakingTransaction(this.directive, this.stakeMsg, this.nonce !== undefined ? this.nonce : 0, this.gasPrice !== undefined ? this.gasPrice : new utils.Unit('100').asGwei().toHex(), this.gasLimit !== undefined ? this.gasLimit : new utils.Unit('210000').asWei().toHex(), this.chainId !== undefined ? this.chainId : 1, this.messenger, "INITIALIZED" /* INTIALIZED */);
        };
        StakingFactory.prototype.setMessenger = function (messenger) {
            this.messenger = messenger;
        };
        return StakingFactory;
    }());

    /**
     * @packageDocumentation
     * @module harmony-staking
     * @ignore
     */

    exports.StakingSettings = StakingSettings;
    exports.StakingTransaction = StakingTransaction;
    exports.Description = Description;
    exports.Decimal = Decimal;
    exports.CommissionRate = CommissionRate;
    exports.CreateValidator = CreateValidator;
    exports.EditValidator = EditValidator;
    exports.Delegate = Delegate;
    exports.Undelegate = Undelegate;
    exports.CollectRewards = CollectRewards;
    exports.StakingFactory = StakingFactory;

    Object.defineProperty(exports, '__esModule', { value: true });

})));
//# sourceMappingURL=index.umd.js.map
