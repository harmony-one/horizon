/**
 * @packageDocumentation
 * @module harmony-staking
 */
/// <reference types="bn.js" />
import { BN, Signature } from '@harmony-js/crypto';
import { Messenger } from '@harmony-js/network';
import { TransactionBase, TxStatus } from '@harmony-js/transaction';
/** @hidden */
export declare class StakingSettings {
    static PRECISION: number;
    static MAX_DECIMAL: number;
}
/** @hidden */
export declare const enum Directive {
    DirectiveCreateValidator = 0,
    DirectiveEditValidator = 1,
    DirectiveDelegate = 2,
    DirectiveUndelegate = 3,
    DirectiveCollectRewards = 4
}
export declare class StakingTransaction extends TransactionBase {
    private directive;
    private stakeMsg;
    private nonce;
    private gasLimit;
    private gasPrice;
    private chainId;
    private rawTransaction;
    private unsignedRawTransaction;
    private signature;
    private from;
    constructor(directive: Directive, stakeMsg: CreateValidator | EditValidator | Delegate | Undelegate | CollectRewards, nonce: number | string, gasPrice: number | string, gasLimit: number | string, chainID: number, messenger?: Messenger, txStatus?: TxStatus);
    encode(): [string, any[]];
    rlpSign(prv: string): [Signature, string];
    getRLPSigned(raw: any[], signature: Signature): string;
    sendTransaction(): Promise<[StakingTransaction, string]>;
    setUnsigned(unSigned: string): void;
    setRawTransaction(rawTransaction: string): void;
    setSignature(signature: Signature): void;
    setNonce(nonce: number): void;
    setFromAddress(address: string): void;
    getUnsignedRawTransaction(): string;
    getRawTransaction(): string;
    getSignature(): Signature;
    getFromAddress(): string;
    confirm(txHash: string, maxAttempts?: number, interval?: number, shardID?: number | string, toShardID?: number | string): Promise<TransactionBase>;
}
/** @hidden */
export declare class Description {
    name: string;
    identity: string;
    website: string;
    securityContact: string;
    details: string;
    constructor(name: string, identity: string, website: string, securityContact: string, details: string);
    encode(): any[];
}
/** @hidden */
export declare class Decimal {
    value: BN;
    constructor(value: string);
    encode(): any[];
}
/** @hidden */
export declare class CommissionRate {
    rate: Decimal;
    maxRate: Decimal;
    maxChangeRate: Decimal;
    constructor(rate: Decimal, maxRate: Decimal, maxChangeRate: Decimal);
    encode(): any[];
}
export declare class CreateValidator {
    validatorAddress: string;
    description: Description;
    commissionRates: CommissionRate;
    minSelfDelegation: number;
    maxTotalDelegation: number;
    slotPubKeys: string[];
    amount: number;
    constructor(validatorAddress: string, description: Description, commissionRates: CommissionRate, minSelfDelegation: number, maxTotalDelegation: number, slotPubKeys: string[], amount: number);
    encode(): any[];
    encodeArr(): any[];
}
export declare class EditValidator {
    validatorAddress: string;
    description: Description;
    commissionRate: Decimal;
    minSelfDelegation: number;
    maxTotalDelegation: number;
    slotKeyToRemove: string;
    slotKeyToAdd: string;
    constructor(validatorAddress: string, description: Description, commissionRate: Decimal, minSelfDelegation: number, maxTotalDelegation: number, slotKeyToRemove: string, slotKeyToAdd: string);
    encode(): any[];
}
export declare class Delegate {
    delegatorAddress: string;
    validatorAddress: string;
    amount: number;
    constructor(delegatorAddress: string, validatorAddress: string, amount: number);
    encode(): any[];
}
export declare class Undelegate {
    delegatorAddress: string;
    validatorAddress: string;
    amount: number;
    constructor(delegatorAddress: string, validatorAddress: string, amount: number);
    encode(): any[];
}
export declare class CollectRewards {
    delegatorAddress: string;
    constructor(delegatorAddress: string);
    encode(): any[];
}
//# sourceMappingURL=stakingTransaction.d.ts.map