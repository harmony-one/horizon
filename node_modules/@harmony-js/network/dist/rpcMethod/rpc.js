"use strict";
/**
 # @harmony-js/network

This package provides a collection of apis to create messengers (HTTP, WebSocket) to connect to blockchain networks.

## Installation

```
npm install @harmony-js/network
```

## Usage

```javascript
const { Messenger, HttpProvider, WSProvider } = require('@harmony-js/network');
const { ChainID, ChainType } = require('@harmony-js/utils');
const testnetHTTP = 'https://api.s0.b.hmny.io';
const testnetWS = 'wss://ws.s0.b.hmny.io';
const localHTTP = 'http://localhost:9500/';
const localWS = 'http://localhost:9800/';
const http = new HttpProvider(testnetHTTP); // for local use localHTTP
const ws = new WSProvider(testnetWS); // for local use testnetWS
const customHTTPMessenger = new Messenger(http, ChainType.Harmony, ChainID.HmyTestnet); // for local ChainID.HmyLocal
const customWSMessenger = new Messenger(ws, ChainType.Harmony, ChainID.HmyTestnet); // for local ChainID.HmyLocal
```
 *
 * @packageDocumentation
 * @module harmony-network
 */
Object.defineProperty(exports, "__esModule", { value: true });
exports.RPCErrorCode = exports.RPCMethod = void 0;
/**@ignore */
var RPCMethod;
(function (RPCMethod) {
    // 1. hmy_getBlockByHash
    RPCMethod["GetBlockByHash"] = "hmy_getBlockByHash";
    // 2. hmy_getBlockByNumber
    RPCMethod["GetBlockByNumber"] = "hmy_getBlockByNumber";
    // 3. hmy_getBlockTransactionCountByHash
    RPCMethod["GetBlockTransactionCountByHash"] = "hmy_getBlockTransactionCountByHash";
    // 4. hmy_getBlockTransactionCountByNumber
    RPCMethod["GetBlockTransactionCountByNumber"] = "hmy_getBlockTransactionCountByNumber";
    // 5. hmy_getCode
    RPCMethod["GetCode"] = "hmy_getCode";
    // 6. hmy_getTransactionByBlockHashAndIndex
    RPCMethod["GetTransactionByBlockHashAndIndex"] = "hmy_getTransactionByBlockHashAndIndex";
    // 7. hmy_getTransactionByBlockNumberAndIndex
    RPCMethod["GetTransactionByBlockNumberAndIndex"] = "hmy_getTransactionByBlockNumberAndIndex";
    // 8. hmy_getTransactionByHash
    RPCMethod["GetTransactionByHash"] = "hmy_getTransactionByHash";
    RPCMethod["GetTransactionReceipt"] = "hmy_getTransactionReceipt";
    RPCMethod["GetCXReceiptByHash"] = "hmy_getCXReceiptByHash";
    // 9. hmy_syncing
    RPCMethod["Syncing"] = "hmy_syncing";
    // 10. net_peerCount
    RPCMethod["PeerCount"] = "net_peerCount";
    // 11. hmy_getBalance
    RPCMethod["GetBalance"] = "hmy_getBalance";
    // 12. hmy_getStorageAt
    RPCMethod["GetStorageAt"] = "hmy_getStorageAt";
    // 13. hmy_getTransactionCount
    RPCMethod["GetTransactionCount"] = "hmy_getTransactionCount";
    // 14. hmy_sendTransaction
    RPCMethod["SendTransaction"] = "hmy_sendTransaction";
    // 15. hmy_sendRawTransaction
    RPCMethod["SendRawTransaction"] = "hmy_sendRawTransaction";
    // 16. hmy_subscribe
    RPCMethod["Subscribe"] = "hmy_subscribe";
    // 17. hmy_getlogs
    RPCMethod["GetPastLogs"] = "hmy_getLogs";
    // 18. hmy_getWork
    RPCMethod["GetWork"] = "hmy_getWork";
    // 19. hmy_submitWork
    // SubmitWork = 'hmy_submitWork',
    // 20. hmy_getProof
    RPCMethod["GetProof"] = "hmy_getProof";
    // 21, hmy_getFilterChanges
    RPCMethod["GetFilterChanges"] = "hmy_getFilterChanges";
    // 22. hmy_newPendingTransactionFilter
    RPCMethod["NewPendingTransactionFilter"] = "hmy_newPendingTransactionFilter";
    // 23. hmy_newBlockFilter
    RPCMethod["NewBlockFilter"] = "hmy_newBlockFilter";
    // 24. hmy_newFilter
    RPCMethod["NewFilter"] = "hmy_newFilter";
    // 25. hmy_call
    RPCMethod["Call"] = "hmy_call";
    // 26. hmy_estimateGas
    RPCMethod["EstimateGas"] = "hmy_estimateGas";
    // 27. hmy_gasPrice
    RPCMethod["GasPrice"] = "hmy_gasPrice";
    // 28. hmy_blockNumber
    RPCMethod["BlockNumber"] = "hmy_blockNumber";
    // 29. hmy_unsubscribe
    RPCMethod["UnSubscribe"] = "hmy_unsubscribe";
    // 30. net_version
    RPCMethod["NetVersion"] = "net_version";
    // 31. hmy_protocolVersion
    RPCMethod["ProtocolVersion"] = "hmy_protocolVersion";
    // 32. hmy_getShardingStructure
    RPCMethod["GetShardingStructure"] = "hmy_getShardingStructure";
    // 33. hmy_sendRawStakingTransaction
    RPCMethod["SendRawStakingTransaction"] = "hmy_sendRawStakingTransaction";
    // 34. hmy_getAccountNonce
    RPCMethod["GetAccountNonce"] = "hmy_getAccountNonce";
})(RPCMethod = exports.RPCMethod || (exports.RPCMethod = {}));
/**@ignore */
var RPCErrorCode;
(function (RPCErrorCode) {
    // Standard JSON-RPC 2.0 errors
    // RPC_INVALID_REQUEST is internally mapped to HTTP_BAD_REQUEST (400).
    // It should not be used for application-layer errors.
    RPCErrorCode[RPCErrorCode["RPC_INVALID_REQUEST"] = -32600] = "RPC_INVALID_REQUEST";
    // RPC_METHOD_NOT_FOUND is internally mapped to HTTP_NOT_FOUND (404).
    // It should not be used for application-layer errors.
    RPCErrorCode[RPCErrorCode["RPC_METHOD_NOT_FOUND"] = -32601] = "RPC_METHOD_NOT_FOUND";
    RPCErrorCode[RPCErrorCode["RPC_INVALID_PARAMS"] = -32602] = "RPC_INVALID_PARAMS";
    // RPC_INTERNAL_ERROR should only be used for genuine errors in bitcoind
    // (for example datadir corruption).
    RPCErrorCode[RPCErrorCode["RPC_INTERNAL_ERROR"] = -32603] = "RPC_INTERNAL_ERROR";
    RPCErrorCode[RPCErrorCode["RPC_PARSE_ERROR"] = -32700] = "RPC_PARSE_ERROR";
    // General application defined errors
    RPCErrorCode[RPCErrorCode["RPC_MISC_ERROR"] = -1] = "RPC_MISC_ERROR";
    RPCErrorCode[RPCErrorCode["RPC_TYPE_ERROR"] = -3] = "RPC_TYPE_ERROR";
    RPCErrorCode[RPCErrorCode["RPC_INVALID_ADDRESS_OR_KEY"] = -5] = "RPC_INVALID_ADDRESS_OR_KEY";
    RPCErrorCode[RPCErrorCode["RPC_INVALID_PARAMETER"] = -8] = "RPC_INVALID_PARAMETER";
    RPCErrorCode[RPCErrorCode["RPC_DATABASE_ERROR"] = -20] = "RPC_DATABASE_ERROR";
    RPCErrorCode[RPCErrorCode["RPC_DESERIALIZATION_ERROR"] = -22] = "RPC_DESERIALIZATION_ERROR";
    RPCErrorCode[RPCErrorCode["RPC_VERIFY_ERROR"] = -25] = "RPC_VERIFY_ERROR";
    RPCErrorCode[RPCErrorCode["RPC_VERIFY_REJECTED"] = -26] = "RPC_VERIFY_REJECTED";
    RPCErrorCode[RPCErrorCode["RPC_IN_WARMUP"] = -28] = "RPC_IN_WARMUP";
    RPCErrorCode[RPCErrorCode["RPC_METHOD_DEPRECATED"] = -32] = "RPC_METHOD_DEPRECATED";
})(RPCErrorCode = exports.RPCErrorCode || (exports.RPCErrorCode = {}));
//# sourceMappingURL=rpc.js.map